{"question_id": 1, "text": "{'domain': 'Video Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorchvideo', 'slow_r50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained 3D ResNet model (slow_r50) from PyTorch Hub, which can be used to classify sports activities in video clips.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/pytorchvideo', 'slow_r50', pretrained=True)'}\\n\"", "answer_id": "U6BCyA8FF49UJFPZ9Ymo5G", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 2, "text": "{'domain': 'Speech-to-Text', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_stt', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained Silero Models for Speech-To-Text in Python, which can convert spoken language in a recording to text.', 'code': 'import torch\\nmodel, utils = torch.hub.load('snakers4/silero-models', 'silero_stt', language='en', device=torch.device('cpu'))'}\"", "answer_id": "R65WDf3WVwMYwSVTxfq84q", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 3, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'fcn_resnet101', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained FCN-ResNet101 model from PyTorch Hub for semantic segmentation to segment objects like pedestrians, vehicles, and buildings from street photos.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'fcn_resnet101', pretrained=True)'}\\n\"", "answer_id": "MQ4WMFje8QJEwRd3x6DSNV", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 4, "text": "{'domain': 'Object Detection', 'api_call': 'model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Use the pre-trained YOLOv5 model from PyTorch Hub, which is a highly efficient and accurate model for real-time object detection.', 'code': 'import torch\\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)'}\"", "answer_id": "ftFrPsKkrTb5BGiLTpVGGZ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 5, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x48d_w10', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext model from PyTorch Hub, which is designed for large-scale image classification and can handle millions of images with thousands of hashtags.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x48d_w10', pretrained=True)'}\"", "answer_id": "EPxAKokEQ5eebardvdBd2d", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 6, "text": "{'domain': 'Generative Adversarial Networks', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorchvideo', 'slowfast_r50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained SlowFast model from PyTorch Hub to generate faces of celebrities for a Virtual Reality event.', 'code': \\\"import torch\\nmodel = torch.hub.load('facebookresearch/pytorchvideo', 'slowfast_r50', pretrained=True)\\\"}\"", "answer_id": "kVqAuUVtVjAbHGiHbQDKKt", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 7, "text": "{'domain': 'Image Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet-50 model from PyTorch Hub, which is a highly accurate image classification model for the ImageNet dataset.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\"", "answer_id": "eeVyTx7tjErJkAaGhYSHn3", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 8, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-121 model from PyTorch Hub for image classification, which can categorize images into different classes of landmarks.', 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)\\\"}\"", "answer_id": "5XfP8DmQsgq6SPA34SouFs", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 9, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-201 model from PyTorch Hub to classify images of wildlife, including cheetahs.', 'code': 'import torch\\nmodel = torch.hub.load(\\\"pytorch/vision\\\", \\\"densenet201\\\", pretrained=True)'}\\n\"", "answer_id": "guLScTmcHa3oDArCTiEaMw", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 10, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet18', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained ResNet-18 model from PyTorch Hub for image classification, which can be fine-tuned for classifying product images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet18', pretrained=True)'}\"", "answer_id": "3X3Q28LFShkJsaHFd5Vjd5", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 11, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained AlexNet model from PyTorch Hub, which is a highly accurate image classification model that can classify animals from user-provided images without sacrificing model accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)'}\\n\"", "answer_id": "JchDSgDDHEzgFoFmEMoFYx", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 12, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Wide ResNet-50-2 model from PyTorch Hub, which has excellent image classification performance while using minimal computational resources.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)'}\\n\"", "answer_id": "558YHzL4Tiu3EmoWVdRJZ3", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 13, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from PyTorch Hub, which can be used to perform image classification tasks to recognize dogs and cats.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)'}\\n\"", "answer_id": "HCkHHUNetbrtyKp6zkirvs", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 14, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SNNMLP Small model from PyTorch Hub, which is an efficient image classification model that can process a wide range of images.', 'code': 'import torch\\nmodel = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_s', pretrained=True)'}\"", "answer_id": "nFLbqgm8ZrLR9epUFLcj9p", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 15, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained ResNet50 model from PyTorch Hub, which can be fine-tuned for object identification in a photo.\\\", 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\\n\"", "answer_id": "8WRxTce8i2mQicKV7XZ4TD", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 16, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext101_32x4d model from PyTorch Hub, which can be fine-tuned for object classification given a mobile camera image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)'}\"", "answer_id": "Hv6Ww6Ke9HgeZ7PPLqqCCp", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 17, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x8d_w10', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext-101 32x8d model from PyTorch Hub, which can be fine-tuned for animal species classification based on CCTV camera footage.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x8d_w10', pretrained=True)'}\"", "answer_id": "9iVW469w8D4dCJthTE2oMD", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 18, "text": "{'domain': 'Object Detection', 'api_call': \\\"model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained YOLOv5 model from PyTorch Hub, which uses a single model for object detection, drivable area segmentation, and lane detection in real time.', 'code': 'import torch\\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)'}\"", "answer_id": "nGbuMRfGCpPzKJ5tLzgMHa", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 19, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('zhanghang1989/ResNeSt', 'resnest269', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNeSt model from PyTorch Hub, which can be fine-tuned for object distance estimation given an input photo.', 'code': \\\"import torch\\nmodel = torch.hub.load('zhanghang1989/ResNeSt', 'resnest269', pretrained=True)\\\"}\"", "answer_id": "QAHxfgDwtZzM3fuiWS6C7Z", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 20, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained Silero Text-To-Speech model from PyTorch Hub, which can convert speech into natural-sounding text using a variety of languages and voices.', 'code': 'import torch\\nmodel = torch.hub.load('snakers4/silero-models', 'silero_tts', language='en', speaker='lj_16khz')'}\\n\"", "answer_id": "Tj4bWzSufhjoieCgZab2Sy", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 21, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained VGG13 model with batch normalization from PyTorch Hub, which can be used for image classification into different categories.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\\n\"", "answer_id": "46HX4V5QtBHYNgBPvV4pmS", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 22, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DeepLabV3 model with ResNet-50 backbone from PyTorch Hub for semantic segmentation of objects in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)'}\\n\"", "answer_id": "gpn372ftQyt544sT6MdHr8", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 23, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-161 model from PyTorch Hub, which is capable of classifying images with high efficiency and accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)'}\"", "answer_id": "bm2h6J7bNpp8Apu828tuyW", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 24, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', model='mealv2_resnest50', pretrained=True, **{'topN': 6, 'device':'cpu', 'num_classes': 120, 'num_resnest50': 80})\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MEAL_V2 model from PyTorch Hub, which can be fine-tuned for dog breed classification from a list of 120 unique breeds using a ResNeSt-50 model.', 'code': 'import torch\\nmodel = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', model='mealv2_resnest50', pretrained=True, **{'topN': 6, 'device':'cpu', 'num_classes': 120, 'num_resnest50': 80})'}\"", "answer_id": "GxvrTAiEHj4YiU7msj5nSc", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 25, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub for image classification to classify food dishes in restaurant menus.', 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\"}\"", "answer_id": "HApQuFSYh3P7qcYyJd38fm", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 26, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet169', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-169 model from PyTorch Hub, which is an efficient and light-weight image classification model suitable for mobile app classification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet169', pretrained=True)'}\"", "answer_id": "ZgCkhzaRe3KcqeN96c4ebe", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 27, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', 'mealv2_resnest50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MEAL V2 model from PyTorch Hub, which can be fine-tuned for animal species classification in wildlife photography.', 'code': 'import torch\\nmodel = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', 'mealv2_resnest50', pretrained=True)'}\"", "answer_id": "Sqb3cGt6fMyJgxQkt5epDR", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 28, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Inception_v3 model from PyTorch Hub for object detection and classification, which can be fine-tuned for bird classification and counting in images.', 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)\\\"}\"", "answer_id": "oTRPcxwmzjyoaYaTkTD5Cc", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 29, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_efficientnet_b0', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained EfficientNet model from PyTorch Hub, which is designed with spiking neural networks in mind for image classification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_efficientnet_b0', pretrained=True)'}\\n\"", "answer_id": "WYwS7CbwFFJnRFeYA2hLXH", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 30, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x8d_wsl', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext-101 32x8d WSL model from PyTorch Hub, which is an efficient image classification model with fewer parameters than AlexNet.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x8d_wsl', pretrained=True)'}\"", "answer_id": "YKd4yJtX8zxekQgUqQBpDx", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 31, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model from PyTorch Hub, which can be used for image classification tasks, including identifying animals in a given image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)'}\"", "answer_id": "MqeM8fD9SeLT53nBQgXPUB", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 32, "text": "{'domain': 'Image Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'shufflenet_v2_x1_0', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ShuffleNet v2 model from PyTorch Hub, which is designed for image classification and can be fine-tuned for car classification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'shufflenet_v2_x1_0', pretrained=True)'}\\n\"", "answer_id": "KhGMVHcsHRtYdxwpJPCNsd", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 33, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Wide ResNet-50-2 model from PyTorch Hub for image classification, which can be adapted for wildlife species classification in their natural habitats.', 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)\\\"}\"", "answer_id": "Punr9e2GNM7JPhSgH8VDk8", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 34, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_efficientnet_b0', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained EfficientNet model from NVIDIA, which is optimized for GPU performance and provides efficient image classification.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_efficientnet_b0', pretrained=True)'}\\n\"", "answer_id": "ChWfzkLwfPw8b3QUz7u9fe", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 35, "text": "{'domain': 'Text Translation', 'api_call': \\\"model = torch.hub.load('pytorch/fairseq', 'transformer.wmt14.en-fr')\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Transformer model from PyTorch Hub to translate an English ebook to French.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/fairseq', 'transformer.wmt14.en-fr')'}\"", "answer_id": "Mp8mpqWCi2zvxscwFNXQXF", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 36, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/semi-supervised-ImageNet1K-models', 'resnet18_swsl', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained semi-supervised ResNet-18 model from PyTorch Hub, which can be fine-tuned to recognize objects within an image.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/semi-supervised-ImageNet1K-models', 'resnet18_swsl', pretrained=True)'}\\n\"", "answer_id": "mDJvriuRuJNQDujWKaWasK", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 37, "text": "{'domain': 'Natural Language Processing (NLP)', 'api_call': \\\"model = torch.hub.load('pytorch/fairseq', 'transformers', tokenizer='moses', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Transformers model from PyTorch Hub for generating spoken weather information from a written weather forecast using natural language processing techniques.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/fairseq', 'transformers', tokenizer='moses', pretrained=True)'}\"", "answer_id": "7t5rGrAVXkiXQEzPaxjTNW", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 38, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'wide_resnet101_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Wide ResNet-101_2 model from PyTorch Hub without using common image classification tricks, which provides high top-1 accuracy without additional parameters.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'wide_resnet101_2', pretrained=True)'}\"", "answer_id": "ncoxnEeNKgukTzgkRqjLE2", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 39, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub, which can be fine-tuned to identify different types of cucumbers.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\"", "answer_id": "MyfZAMLEhSrpyhqYcHGaDa", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 40, "text": "{'domain': 'Object Detection', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_ssd', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained NVIDIA SSD model from PyTorch Hub, which is capable of simultaneously recognizing objects, drivable areas, and lanes for self-driving car applications.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_ssd', pretrained=True)'}\"", "answer_id": "YiHsF3LewoiC2mqFgtB9jZ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 41, "text": "{'domain': 'Audio Processing', 'api_call': 'model = torch.hub.load('snakers4/silero-vad', 'silero_vad', force_reload=True)', 'api_provider': 'PyTorch', 'explanation': 'Use the Silero Voice Activity Detector from PyTorch Hub to detect voice activity in an audio file.', 'code': 'import torch\\nuse_silero = True\\nif torch.cuda.is_available():\\nsilero = True\\ndevice = torch.device(use_silero)\\nmodel = torch.hub.load('snakers4/silero-vad', 'silero_vad', force_reload=True)'}\"", "answer_id": "biQnzuJP4s7ATdHsrvevx8", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 42, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the DeepLabV3 model with ResNet-50 backbone from PyTorch Hub, which can segment input images into foreground and background regions, including regions to be colored.\\\", 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)\\nmodel.eval()\\\"}\"", "answer_id": "M4TCD52KFFjtvc8VDK5s2K", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 43, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained VGG13 model with batch normalization from PyTorch Hub for image classification to identify objects in a given set of images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\"", "answer_id": "e4hQMNwKctTnQxmxgVGFPc", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 44, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/Densenet169', 'densenet169', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-201 model for image classification from PyTorch Hub for classifying images with high accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/Densenet169', 'densenet169', pretrained=True)'}\"", "answer_id": "GuYUrEfehEgFEXcj4XvEwx", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 45, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the DeepLabV3 model with ResNet-50 backbone from PyTorch Hub for semantic segmentation, which can segment objects within an image into separate categories.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)'}\"", "answer_id": "KpfUgatNRMt7EDRFp5URDQ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 46, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'squeezenet1_1', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SqueezeNet model from PyTorch Hub, which offers fast and efficient image classification suitable for low-end devices.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'squeezenet1_1', pretrained=True)'}\"", "answer_id": "XGtam5nfpEzp43bqCCxpVH", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 47, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet34 model from PyTorch Hub, which can be fine-tuned for artistic style/natural scenery classification.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)'}\\n\"", "answer_id": "6tXBFC9hbCgsuvqpgbrNNP", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 48, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet101', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet-101 model from PyTorch Hub, which can be fine-tuned for dog breed classification given an image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet101', pretrained=True)'}\"", "answer_id": "myurLDFfg9z58GuBu67aGT", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 49, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext50_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext50_32x4d model from PyTorch Hub for image classification, which can be fine-tuned for different categories based on their content.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext50_32x4d', pretrained=True)'}\"", "answer_id": "PRVQhabZzRjLChHU8m2zNG", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 50, "text": "{'domain': 'Neural Architecture Search', 'api_call': 'model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_gpunet', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Use the GPUNet model from NVIDIA Deep Learning Examples to automatically fine-tune your neural network architecture for optimal performance on a specific graphics processing unit (GPU) platform.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_gpunet', pretrained=True)'}\"", "answer_id": "BBALGYAKe9mK9HYUGKfNHf", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 51, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DenseNet-121 model from PyTorch Hub, which can be fine-tuned for image classification tasks to determine if an image contains a dog, cat, or horse.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)'}\"", "answer_id": "dMdiYCdcsVFFyGTPVyaNWi", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 52, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'mobilenet_v2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MobileNet v2 model from PyTorch Hub, which has been designed for mobile applications and offers 50x fewer parameters than AlexNet while maintaining similar classification accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'mobilenet_v2', pretrained=True)'}\"", "answer_id": "fM2Vcx9gxsBLkkk7QyQuwz", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 53, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x8d_w10', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained ResNext101_32x8d_w10 model from PyTorch Hub, which can be fine-tuned for recognizing decorative and architectural elements in architectural design images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x8d_w10', pretrained=True)'}\\n\"", "answer_id": "XMUmVNcm4Y6DxseW6H6UG9", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 54, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext101_32x4d model from PyTorch Hub for image classification, which can achieve top performance on the ImageNet dataset.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)'}\"", "answer_id": "UFoQDdjMx3hEf6oHzt473j", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 55, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the Inception v3 model from PyTorch Hub, which can be fine-tuned for dog breed classification given an image of a dog.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)'}\\n\"", "answer_id": "bBS2xpV7rWq8JkdZqq4Xs5", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 56, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('zhanghang1989/ResNeSt', 'resnest269', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNeSt-269 model from PyTorch Hub for image classification, which has been optimized for NVIDIA GPU and TensorRT performance.', 'code': 'import torch\\nmodel = torch.hub.load('zhanghang1989/ResNeSt', 'resnest269', pretrained=True)'}\"", "answer_id": "VjU38S7xLWcVuRVboJjvmy", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 57, "text": "{'domain': 'Machine Translation', 'api_call': \\\"model = torch.hub.load('pytorch/fairseq', 'transformer.wmt14.en-fr', tokenizer='moses', bpe='subword_nmt')\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained Transformer (NMT) model from PyTorch Hub, which can translate English text to French using a machine learning approach.\\\", 'code': \\\"import torch\\nlanguage = 'en'\\ndevice = torch.device('cpu')\\nmodel = torch.hub.load('pytorch/fairseq', 'transformer.wmt14.en-fr', tokenizer='moses', bpe='subword_nmt')\\\"}\"", "answer_id": "6S8R98xvfuEwhTTddbQJEd", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 58, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet-34 model from PyTorch Hub, which can be fine-tuned for dog breed identification based on input images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)'}\\n\"", "answer_id": "5kpDBKPwcJGbC5QqfARCfH", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 59, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vanilla_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Vanilla ResNet-50 model from PyTorch Hub without using any data augmentation tricks.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vanilla_resnet50', pretrained=True)'}\"", "answer_id": "GcPxJBCmCDjT4KacEt2WpD", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 60, "text": "{'domain': 'Image Reconstruction', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'densenet169', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load a pretrained Densenet-169 model from PyTorch Hub to reconstruct 3D scenes from a single 2D image.\\\", 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'densenet169', pretrained=True)\\nmodel.eval()'}\"", "answer_id": "kGGw9CqUscLh4aEZ6GvNMm", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 61, "text": "{'domain': 'Audio Separation', 'api_call': \\\"model = torch.hub.load('sigsep/open-unmix-pytorch', 'umxhq', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the Open-Unmix model from PyTorch Hub, which is pretrained on the MUSDB18 dataset and can separate audio into multiple tracks.', 'code': 'import torch\\nseparator = torch.hub.load('sigsep/open-unmix-pytorch', 'umxhq', pretrained=True)'}\\n\"", "answer_id": "QFednEEtGXVper5bHNy8ng", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 62, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Text-To-Speech model from PyTorch Hub, which can convert a text document into an audio file.', 'code': 'import torch\\nmodel, decoder, utils = torch.hub.load('snakers4/silero-models', 'silero_tts', language='en', speaker='lj_16khz', pretrained=True)'}\"", "answer_id": "gKhiRvXUQsCwdycrs5pEw3", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 63, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 model from PyTorch Hub for image classification, which can be fine-tuned to identify objects in a city park picture.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\"", "answer_id": "VCTFRjet3U9zutWtecwMSR", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 64, "text": "{'domain': 'Image Classification', 'api_call': 'model = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_s', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SNNMLP base model for image classification from PyTorch Hub to detect objects in an image.', 'code': 'import torch\\nmodel = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_s', pretrained=True)'}\\n\"", "answer_id": "4wSWc5zP3CwHuXX6227VdY", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 65, "text": "{'domain': 'Image Generation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DenseNet-201 model from PyTorch Hub, which can be used to generate unique images of clothing items.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)'}\\n\"", "answer_id": "dPDqdERBgu5vAfpH26UhRJ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 66, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', 'mealv2_resnest50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MEAL V2 model from PyTorch Hub, which is specifically designed for image classification tasks and can identify the contents of an image.', 'code': 'import torch\\nmodel = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', 'mealv2_resnest50', pretrained=True)'}\"", "answer_id": "4Mas7CWMkgaxphSfL82fJT", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 67, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Text-to-Speech model from PyTorch Hub, which can synthesize natural-sounding speech from text using a combination of Tacotron 2 and WaveGlow.', 'code': 'import torch\\nmodel = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)'}\\n\"", "answer_id": "VvFWDiRX2GBQGRQQFHYbas", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 68, "text": "{'domain': 'Image Recognition', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorchvideo', 'slow_r50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained 3D ResNet model (slow_r50) from PyTorch Hub for person re-identification, which is designed to handle various challenging tasks in large-scale face recognition and person re-identification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/pytorchvideo', 'slow_r50', pretrained=True)'}\\n\"", "answer_id": "9YzVdC8bPN6YtQaJSGa3mb", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 69, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 model from PyTorch Hub, which can be fine-tuned for vehicle and person re-identification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)'}\"", "answer_id": "CLxAaJ79V7cYDY6NbYU4bA", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 70, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from PyTorch Hub for image classification, which provides high accuracy across a wide range of objects.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\\n\"", "answer_id": "NVNETwnEQNghWC8jU6Nb9Y", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 71, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model from PyTorch Hub for image classification, which can be fine-tuned for bird species classification given an image from the Internet.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)'}\\n\"", "answer_id": "RqukYjkRy8FmpCUBpPFes7", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 72, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained AlexNet model from PyTorch Hub, which can be fine-tuned for identifying different breeds of pets given their images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)'}\"", "answer_id": "RB4CoepuZVrH8BkCFyCQyf", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 73, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Inception_v3 model from PyTorch Hub for image classification, which can recognize objects in an image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)'}\\n\"", "answer_id": "cRXqQKQ6nz7YjfMt23g92L", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 74, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained Wide ResNet-50-2 model from PyTorch Hub for image classification, which can be fine-tuned for different categories of images.\\\", 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)'}\"", "answer_id": "ghR3Ze2wuciJcA3EjSbkYX", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 75, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('mit-han-lab/ProxylessNAS', 'proxylessnas_cpu', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ProxylessNAS model from PyTorch Hub, which is optimized for CPU and provides accurate image classification with low latency.', 'code': 'import torch\\nmodel = torch.hub.load('mit-han-lab/ProxylessNAS', 'proxylessnas_cpu', pretrained=True)'}\"", "answer_id": "gjkTosyqsQhpVZacLd2rQB", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 76, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained ResNext101_32x4d model from PyTorch Hub, which can be used to classify images into different categories.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)'}\"", "answer_id": "DxuXceGMKdTN7XHNfUUDSJ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 77, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained GoogLeNet model from PyTorch Hub, which can classify images of products into different categories.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)'}\"", "answer_id": "RgBW3QEBNxJLp79bXYt9X8", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 78, "text": "{'domain': 'Object Detection', 'api_call': \\\"model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained YOLOv5 model from PyTorch Hub for jointly handling object detection, drivable area segmentation, and lane detection in Tesla\\'s back camera task.', 'code': 'import torch\\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)'}\\n\"", "answer_id": "MTY3VZYdvsNoDjCdydks2b", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 79, "text": "{'domain': 'Image Depth Estimation', 'api_call': \\\"model = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MiDaS DPT_Large model from PyTorch Hub to compute relative depth from a single image.', 'code': 'import torch\\nmodel = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)'}\"", "answer_id": "4XfskpKH3V6WaypecK7san", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 80, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet152', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained ResNet50 model from PyTorch Hub, which can be used to classify images into different categories.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet152', pretrained=True)'}\\n\"", "answer_id": "N7ZvF77SdZa9nbyK9qVS5h", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 81, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained AlexNet model from PyTorch Hub, which can be fine-tuned for bird species classification in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)'}\"", "answer_id": "GTiLTFEHyajTZmw7XQXoa7", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 82, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x8d_w10', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext W10 model from PyTorch Hub for modeling and classifying crops in aerial images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x8d_w10', pretrained=True)'}\\n\"", "answer_id": "YwTRE68ZwewarXaaXoWbsu", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 83, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg19', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG19 model from PyTorch Hub for efficient and fast image classification.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg19', pretrained=True)'}\"", "answer_id": "QWPGZ2Uk7xnqW78DQveXP8", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 84, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from PyTorch Hub for image classification, which can achieve high accuracy on the ImageNet dataset for classifying pictures of animals.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\\n\"", "answer_id": "WvsCRKQ7QZv75gCUVJw4zK", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 85, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained Densenet-121 model for image classification from PyTorch Hub to recognize and classify images with high accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)'}\"", "answer_id": "aW5e28ZYmnau5qD6P8tnSF", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 86, "text": "{'domain': 'Image Recognition', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-201 model from PyTorch Hub, which can be fine-tuned for dog breed classification based on its image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)'}\"", "answer_id": "EjdBaJWR9iwEXcnCVYLTKw", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 87, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-161 model from PyTorch Hub, which can be fine-tuned for bird species identification from a picture.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)'}\"", "answer_id": "X2VnxazY4cW8RyfBo33XNk", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 88, "text": "{'domain': 'Image Recognition', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-121 model from PyTorch Hub, which is a highly efficient multi-object recognition model trained on the ImageNet dataset.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet121', pretrained=True)'}\"", "answer_id": "Lbg34CduZaG9PuERSM96Vu", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 89, "text": "\\\"model = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)\\\", 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)\\\"}\"", "answer_id": "SLAa35pbgsFzsWbHke2gmu", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 90, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_gpunet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained GPUNet model from NVIDIA/DeepLearningExamples:torchhub for image classification on various edge devices with different resource constraints.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_gpunet', pretrained=True)'}\\n\"", "answer_id": "hZKF9WDP5VCUN99vxpA5jM", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 91, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained Silero Text-to-Speech model from PyTorch Hub, available for multiple languages, to convert text to natural-sounding speech.', 'code': 'import torch\\nmodel, sample_rate, example_string, apply_tts = torch.hub.load(\\\"snakers4/silero-models\\\", \\\"silero_tts\\\", language=\\\"en\\\")'}\\n\"", "answer_id": "GnoRQ9uqUmWoQ7aZjiisxR", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 92, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet18', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet18 model for image classification from PyTorch Hub, which can achieve a top-1 accuracy of 59.3% on ImageNet.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet18', pretrained=True)'}\"", "answer_id": "SmQpbBSiqz4tnsg2KBphg5", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 93, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load(repo_or_dir='pytorch/vision', model='wide_resnet50_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Wide ResNet-50-2 model from PyTorch Hub, which can be fine-tuned for classifying images based on their categories.', 'code': 'import torch\\nmodel = torch.hub.load(repo_or_dir='pytorch/vision', model='wide_resnet50_2', pretrained=True)'}\\n\"", "answer_id": "DkMLCNom6gMuAbRNewWLZg", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 94, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MiDaS model from PyTorch Hub, which can compute a single input image into a high-quality depth map.', 'code': 'import torch\\nmodel = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)'}\\n\"", "answer_id": "CTMLmwWnsnhteBQwSw5GJA", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 95, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DenseNet-201 model from PyTorch Hub, which has been trained on ImageNet and can be used for identifying bird species based on images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)'}\\n\"", "answer_id": "ATT2MozUpdtbamCsQELiUr", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 96, "text": "{'domain': 'Object Detection', 'api_call': \\\"model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'You can use the YOLOv5 model from PyTorch Hub, which is pre-trained for real-time object detection, making it suitable for implementing security camera systems.', 'code': \\\"import torch\\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\\\"}\\n\"", "answer_id": "fc6XUvqATitevZ6rLZa6E2", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 97, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet101', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet-101 model from NVIDIA DeepLearningExamples:PyTorchHub for object classification from various user images.', 'code': \\\"import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet101', pretrained=True)\\\"}\"", "answer_id": "kq8hgmxrZVfz9Ppn378CrZ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 98, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'resnet152', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet-152 model from PyTorch Hub for image classification, which can be fine-tuned for classifying clothing items from several fashion brands.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet152', pretrained=True)'}\"", "answer_id": "hjZguY2MvkAoMagjQgaQj7", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 99, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('XingangPan/IBN-Net', 'resnet101_ibn_a', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained IBN-Net model from PyTorch Hub, which is capable of re-identifying vehicles across different cameras using appearance invariance.', 'code': 'import torch\\nmodel = torch.hub.load('XingangPan/IBN-Net', 'resnet101_ibn_a', pretrained=True)'}\"", "answer_id": "5BFsvSoMTGsKKfnauH5Bet", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 100, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_b', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained SNNMLP Base model from PyTorch Hub for efficient image classification, which is based on Long Short-Term Memory (LSTM) and fully-connected networks.', 'code': 'import torch\\nmodel = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_b', pretrained=True)'}\"", "answer_id": "8HrhhLMeYbbHgDh3bvMygF", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 101, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('XingangPan/IBN-Net', 'resnext101_ibn_a', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained IBN-Net model \"resnext101_ibn_a\" from PyTorch Hub for efficient image classification on mobile platforms.', 'code': 'import torch\\nmodel = torch.hub.load('XingangPan/IBN-Net', 'resnext101_ibn_a', pretrained=True)'}\"", "answer_id": "WpCpvVZeHoqpJyxffzPNii", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 102, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_gpunet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained GPUNet model from NVIDIA/DeepLearningExamples:torchhub to classify images with high accuracy and efficiency on most platforms.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_gpunet', pretrained=True)'}\\n\"", "answer_id": "3LjPKW5JrDNFypxLXvnJ3J", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 103, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg11_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG11 model with batch normalization from PyTorch Hub for image recognition tasks, which can be used to recognize objects in photos using the photos uploaded by app users.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg11_bn', pretrained=True)'}\"", "answer_id": "mWsHdYPv8Vm2v8SbX2Mttr", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 104, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('zhanghang1989/ResNeSt', 'resnest269', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained ResNeSt-269 model from PyTorch Hub to classify images into different categories.\\\", 'code': 'import torch\\nmodel = torch.hub.load('zhanghang1989/ResNeSt', 'resnest269', pretrained=True)'}\"", "answer_id": "FUHWGeqEUisMh63KHcz5RN", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 105, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained AlexNet model from PyTorch Hub, which can be adapted for bird classification from photographs.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)'}\"", "answer_id": "QEoyGK8bVLxdVzhFP28Sa5", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 106, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub to classify the animals in the given image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\\n\"", "answer_id": "8DREPn8zQHWxSW8WKgLLdj", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 107, "text": "{'domain': 'Image Recognition', 'api_call': 'model = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained AlexNet model from PyTorch Hub for image recognition, which can be fine-tuned for object recognition in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)'}\"", "answer_id": "3oHqxrvUZeeC6fau8mmuEX", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 108, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the GoogLeNet model from PyTorch Hub to identify plants in an image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)'}\"", "answer_id": "RwRXpMnVEFfXwfZeTxNug2", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 109, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'squeezenet1_0', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SqueezeNet model from PyTorch Hub, which is designed for image classification with high accuracy and significantly lower computational cost than conventional deep models.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'squeezenet1_0', pretrained=True)'}\"", "answer_id": "LoLJEpkRDB4NeyaXGh7k3n", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 110, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub for image classification, which can be fine-tuned for animal classification.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\"", "answer_id": "b2FmqzyywGNDJvarMmbjKc", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 111, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x16d_wsl', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext WSL model from PyTorch Hub, which can be fine-tuned to estimate the depth of objects in a single image.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x16d_wsl', pretrained=True)'}\"", "answer_id": "5yYRDSokim5BLuiUxhpvEN", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 112, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet34 model from PyTorch Hub, which can be fine-tuned for predicting the category of an object given an image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)'}\"", "answer_id": "SM8mDTDdXtnu27mLf5jWkn", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 113, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'PGAN', model_name='celebAHQ-1x', pretrained=True, useGPU=use_gpu)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Progressive Growing of GANs (PGAN) model from PyTorch Hub, which can generate high-quality 64x64 images for an apparel ecommerce company.', 'code': 'import torch\\nuse_gpu = True if torch.cuda.is_available() else False\\nmodel = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'PGAN', model_name='celebAHQ-1x', pretrained=True, useGPU=use_gpu)'}\"", "answer_id": "6hm4PmAtzLhnxHdTzcRTDu", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 114, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'deeplabv3_mobilenet_v3_large', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DeepLabV3 model with a MobileNet-V3 backbone for semantic segmentation, which can segment roads, parks, and buildings in a satellite image.', 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'deeplabv3_mobilenet_v3_large', pretrained=True)\\\"}\"", "answer_id": "JSR9R42CZJfmT5tS8KhMDJ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 115, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-161 model from PyTorch Hub for image recognition tasks, which can be fine-tuned for bird species recognition using pictures taken by a wildlife photographer.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)'}\\n\"", "answer_id": "B9rDRKuKpTHoK6csgfWwtm", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 116, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext101_32x4d model from PyTorch Hub for image classification, which can be fine-tuned for recommending clothing based on images of outfits.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)'}\"", "answer_id": "e8ynzPjZusc3UnbjNRoGJv", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 117, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'squeezenet1_1', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SqueezeNet 1.1 model from PyTorch Hub, which is designed for low-compute image classification with competitive accuracy compared to other models.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'squeezenet1_1', pretrained=True)'}\"", "answer_id": "WWsq8X2FyFYYgzHWaP6zFk", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 118, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model with batch normalization from PyTorch Hub, which can be fine-tuned for product classification tasks on grocery store shelves.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\\n\"", "answer_id": "Rirwppk7bFMk658TjBkb7U", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 119, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resize_in_place', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNeSt model from PyTorch Hub, which is designed for image classification tasks and is optimized for storage space while maintaining high accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resize_in_place', pretrained=True)'}\\n\"", "answer_id": "45tbuy7aEidEwGaPwKMwD9", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 120, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'PGAN', model_name='celebAHQ-68', pretrained=True, useGPU=use_gpu)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Progressive Growing of GANs (PGAN) model from PyTorch Hub, which can be fine-tuned for classifying Marvel characters based on their similarity.', 'code': 'import torch\\nuse_gpu = True if torch.cuda.is_available() else False\\nmodel = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'PGAN', model_name='celebAHQ-68', pretrained=True, useGPU=use_gpu)'}\\n\"", "answer_id": "ZAhNLHTAaMDQCQUW6v3ibX", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 121, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model with batch normalization from PyTorch Hub, which can be fine-tuned for recognizing and classifying images containing multiple objects.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\"", "answer_id": "5LQfwDweBnFnJxmkU5r9CN", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 122, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet169', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-169 model from PyTorch Hub, which can be fine-tuned for wildlife animal identification based on images from your research cameras.', 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet169', pretrained=True)\\\"}\"", "answer_id": "434nQiN5FbMCUQMrSiQwPQ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 123, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from NVIDIA, which is suitable for classifying images of autonomous driving from different devices in an efficient and lightweight manner.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)'}\"", "answer_id": "nTKiMKAZEoCFiA5aGa2iDD", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 124, "text": "{'domain': 'Text-To-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Text-To-Speech model from PyTorch Hub, which offers high-quality voices in a variety of languages.', 'code': 'import torch\\nmodel = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)'}\\n\"", "answer_id": "abysJDyPj69hspFNL6bFPf", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 125, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Inception_v3 model from PyTorch Hub for image classification, which can help you classify new products in a storage platform.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'inception_v3', pretrained=True)'}\"", "answer_id": "crvG9YgJnEfSHYwn4z9NRH", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 126, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50_32x4d model from PyTorch Hub, which can be fine-tuned for classifying poisonous and non-poisonous mushrooms based on their pictures.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50_32x4d', pretrained=True)'}\"", "answer_id": "a6n5zmcAAF3CEhrcwpHHuu", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 127, "text": "{'domain': 'Video Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorchvideo', 'slowfast_r50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SlowFast model from PyTorch Hub for classifying video content based on the actions performed in it.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/pytorchvideo', 'slowfast_r50', pretrained=True)'}\\n\"", "answer_id": "k47GY8u9p9AZG2jqRVqbBa", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 128, "text": "{'domain': 'Object Detection', 'api_call': \\\"model = torch.hub.load('datvuthanh/hybridnets', 'hybridnets', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained HybridNets model from PyTorch Hub, which is capable of detecting traffic objects, segmenting drivable areas, and detecting lanes in real-time.', 'code': 'import torch\\nmodel = torch.hub.load('datvuthanh/hybridnets', 'hybridnets', pretrained=True)'}\"", "answer_id": "cLhmtLETZQyGsZXbg7w32e", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 129, "text": "{'domain': 'Audio Processing', 'api_call': \\\"model = torch.hub.load('snakers4/silero-vad', 'silero_vad', force_reload=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Voice Activity Detector (VAD) model from PyTorch Hub for detecting voice activity in an audio file.', 'code': 'import torch\\nmodel = torch.hub.load('snakers4/silero-vad', 'silero_vad', force_reload=True)'}\"", "answer_id": "4boT9ikwj89j92rJKYt4ra", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 130, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model with batch normalization from PyTorch Hub for image classification. This model can identify various objects in an image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\\n\"", "answer_id": "RFsXwajsxR78GiX99wmoh9", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 131, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained AlexNet model from PyTorch Hub, which can be fine-tuned for image classification tasks to identify different animal species and assign them to different categories.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'alexnet', pretrained=True)'}\\n\"", "answer_id": "Nf2GdSRS7GbHKVhkhq3gvj", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 132, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model with batch normalization from PyTorch Hub, which can be fine-tuned for fruit identification from images taken by users.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\nmodel.eval()\\ninputs = torch.hub.load('pytorch/vision', 'resnext50_32x4d')\\ninput_shape = inputs.shape\\ninput_data = torch.cuda.hub.load('pytorch/vision', 'resnext50_32x4d', pretrained=True)\\ninput_data.eval()\\ninput_batch = input_data.shape[0] / input_shape[0]'}\"", "answer_id": "5Nx36YcJ3WYKf6LJFTpUp6", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 133, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet18_1', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet18_1 model from PyTorch Hub, which can be fine-tuned for urban land classification by identifying buildings and roads from aerial photos.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet18_1', pretrained=True)'}\"", "answer_id": "E9ZcxYnNbRAaSuuvZfisYj", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 134, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('huawei-noah/ghostnet', 'ghostnet_1x', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained GhostNet model from PyTorch Hub, which is designed for fine-grained image classification and can be used to categorize animals in images taken by wildlife cameras.\\\", 'code': \\\"import torch\\nmodel = torch.hub.load('huawei-noah/ghostnet', 'ghostnet_1x', pretrained=True)\\\"}\"", "answer_id": "DAHmePmKnivhpq9Mk8Ec7p", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 135, "text": "{'domain': 'Neural Networks', 'api_call': \\\"model = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_t', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SNNMLP Tiny model from PyTorch Hub, which specializes in CNNs for different hardware platforms and is known for its high performance, low memory usage, and efficient power consumption.', 'code': 'import torch\\nmodel = torch.hub.load('huawei-noah/Efficient-AI-Backbones', 'snnmlp_t', pretrained=True)'}\\n\"", "answer_id": "iaE2St3yxawE9MxMvY8F5L", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 136, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'squeezenet1_0', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SqueezeNet model from PyTorch Hub, which is designed for image classification and offers high performance on GPUs.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'squeezenet1_0', pretrained=True)'}\\n\"", "answer_id": "fNxSCJVhQAnZuwdybEntjU", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 137, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub, which can achieve high accuracy for image classification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\"", "answer_id": "jtaYc5jGwjmRK6Lo8onNqJ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 138, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained VGG16 model with batch normalization from PyTorch Hub, which can be fine-tuned to classify different product types based on their images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\\n\"", "answer_id": "CMMUEqNnBAyHD4oAyW9V4P", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 139, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from PyTorch Hub, which is a highly accurate image recognition model specialized in identifying objects in images.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)'}\"", "answer_id": "DB8jsBxihKYTxkDbsfEM3T", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 140, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub for image classification, which can be fine-tuned for landmark recognition from images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\"", "answer_id": "i4b9vJiM5w2pDim6kbygsi", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 141, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', 'mealv2_resnest50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MEAL V2 model from PyTorch Hub with ResNet-50 architecture for image classification, which has a lower error rate compared to other models.', 'code': 'import torch\\nmodel = torch.hub.load('szq0214/MEAL-V2', 'meal_v2', 'mealv2_resnest50', pretrained=True)'}\\n\"", "answer_id": "adr2RSPP7kTtqX7R5bmvpM", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 142, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/fairseq', 'roberta.large', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained RoBERTa model for natural language processing from PyTorch Hub to classify the text about Jim Henson.', 'code': 'import torch\\nroberta = torch.hub.load('pytorch/fairseq', 'roberta.large', pretrained=True)'}\"", "answer_id": "ghAWaCPmevB3Q9SfqRjMhW", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 143, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from PyTorch Hub, which can be fine-tuned for animal classification given a photo.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)'}\"", "answer_id": "TiK87vL4C6g9T7ogs7WyfF", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 144, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 model from PyTorch Hub to classify the dog breed in your picture using deep residual networks.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\"", "answer_id": "9LkwEU2Z8rXF7qTB5ZVope", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 145, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the DenseNet-201 model from PyTorch Hub with pre-trained weights for image classification, which can be fine-tuned for categorizing uploaded images based on their content.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet201', pretrained=True)'}\\n\"", "answer_id": "VSt5VQXLc9SHpMVGZkVYfm", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 146, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the MiDaS model from PyTorch Hub, which can compute relative depth of objects in a given image using a combination of stereo and multi-view cues.', 'code': 'import torch\\nmodel = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)'}\\n\"", "answer_id": "ZCnd2JZ4rWb74oKZpNZNuc", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 147, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Text-To-Speech model from PyTorch Hub, which can be adapted for transcribing podcasts for people with impairments.', 'code': 'import torch\\nmodel, decoder, utils = torch.hub.load('snakers4/silero-models', 'silero_tts', language='en', speaker='lj_16khz')'}\\n\"", "answer_id": "8NCCxBPwRzYQEz5JbFbwCP", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 148, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DeepLabV3 with ResNet-50 backbone model from PyTorch Hub, which can segment objects in images and separate people from the background.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'deeplabv3_resnet50', pretrained=True)'}\\n\"", "answer_id": "EjSBC54KQEVRtNVWKjfPCn", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 149, "text": "{'domain': 'Object Detection', 'api_call': \\\"model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained YOLOv5 model for object detection from PyTorch Hub to detect objects in a given image.', 'code': 'import torch\\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)'}\\n\"", "answer_id": "ALz4bLTt7rHpidkZcvUYRE", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 150, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'DCGAN', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained DCGAN model from PyTorch Hub to generate new images of various clothing styles in 64x64 resolution.', 'code': \\\"import torch\\nmodel = torch.hub.load('facebookresearch/pytorch_GAN_zoo:hub', 'DCGAN', pretrained=True)\\\"}\"", "answer_id": "Luki2qPKszkR9ZLRNwHocN", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 151, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained VGG16 model from PyTorch Hub, which can be used for image classification to identify the content of an image.\\\", 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16', pretrained=True)'}\\n\"", "answer_id": "V48vuUhXRouB67V5jfKeom", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 152, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_waveglow', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained WaveGlow model from PyTorch Hub to synthesize natural-sounding speech from text using Tacotron 2 and WaveGlow.', 'code': 'import torch\\nwaveglow = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_waveglow', pretrained=True)'}\"", "answer_id": "Wdtf3wPJshfX73P6egSAyi", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 153, "text": "{'domain': 'Medical Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'ResNet50 is a pre-trained convolutional neural network that can be used for classifying diseases in X-Ray images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet50', pretrained=True)'}\"", "answer_id": "jKMdb2ZjFgcNeoxv5vnNia", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 154, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet50 v1.5 model from PyTorch Hub, which can be fine-tuned for object classification given an image.', 'code': \\\"import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resnet50', pretrained=True)\\\"}\"", "answer_id": "AN3SnmhzuZW2E6M9mZSQem", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 155, "text": "{'domain': 'Image Recognition', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained GoogLeNet model from PyTorch Hub for image recognition, which can be adapted to recognize various items from pictures taken by users.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'googlenet', pretrained=True)'}\"", "answer_id": "aeUjm4SpD8JigqnpYmCHB2", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 156, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Use the pretrained VGG16 model with batch normalization from PyTorch Hub for image classification tasks on a dataset of images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\\n\"", "answer_id": "7q9wjms7XNt5i6eYm2rL5W", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 157, "text": "{'domain': 'Image Recognition', 'api_call': 'model = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x48d_wsl', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext WSL model from PyTorch Hub to identify 102 different types of flowers in an image.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x48d_wsl', pretrained=True)'}\"", "answer_id": "aeZpNjZ5fXqUVVnBn5vuiZ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 158, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_efficientnet_b0', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained EfficientNet model from PyTorch Hub, which offers high accuracy and efficiency for image classification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_efficientnet_b0', pretrained=True)'}\\n\"", "answer_id": "mJ6R4XHi3K8834E6Ya2BX3", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 159, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-161 model from PyTorch Hub, a deep residual network that provides fast and efficient image recognition for the ImageNet dataset.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)'}\"", "answer_id": "PMxgGzD4jLpfkpJv7hoAmM", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 160, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'snnmlp_s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': \\\"Load the pretrained SNNMLP model for image classification from PyTorch Hub, which utilizes spiking neural networks for increased accuracy and efficiency.\\\", 'code': \\\"import torch\\nmodel = torch.hub.load('pytorch/vision', 'snnmlp_s', pretrained=True)\\\"}\"", "answer_id": "7f6aXgeBenibhFGCLUtEQ7", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 161, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg11_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG11 model with batch normalization from PyTorch Hub to recognize objects in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg11_bn', pretrained=True)'}\"", "answer_id": "cKrBVLwVPfoKnBrGyuAzrH", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 162, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub for image recognition tasks to recognize objects in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\"", "answer_id": "QbKExgmeNmSmBnytE9qQs3", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 163, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext model from PyTorch Hub for image classification, which can be used to identify whether an image contains an aircraft or not.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)'}\\n\"", "answer_id": "GxPLnWgTdXQwtGnxXBMJgi", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 164, "text": "'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model with batch normalization from PyTorch Hub for image recognition tasks to identify food items from images taken from the smart fridge.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\\n\"", "answer_id": "cmnLaMhLcQDtKBtfTBQTSi", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 165, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext50_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext50_32x4d model from PyTorch Hub for image classification, which can be used to count the number of people in a given image.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext50_32x4d', pretrained=True)'}\\n\"", "answer_id": "7eimefybpwD6DzXn2fBtgp", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 166, "text": "\\\"model = torch.hub.load('pytorch/vision', 'vgg16', pretrained=True)\\\", 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16', pretrained=True)\\\"}\"", "answer_id": "PwiG2nysTcEbfpLJf2z6Md", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 167, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resneXt', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNeXt101-32x4d model from PyTorch Hub, which can be fine-tuned for wildlife animal classification in images taken during a safari.', 'code': 'import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_resneXt', pretrained=True)'}\"", "answer_id": "LRSSrThep9b8BEam3dLDTG", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 168, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model from PyTorch Hub, which can be fine-tuned for object identification in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)'}\"", "answer_id": "cKUurLcmUY5kzdnNgaLtYy", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 169, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Wide ResNet-50-2 model from PyTorch Hub, which is designed for high accuracy image classification tasks.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)'}\\n\"", "answer_id": "2ReogD4sUVvmJ6eoRT6BaD", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 170, "text": "{'domain': 'Depth Estimation', 'api_call': \\\"model = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained MiDaS model from PyTorch Hub, which can compute relative depth from a single input image using the DPT_Large variant for high accuracy and efficiency.', 'code': 'import torch\\nmodel = torch.hub.load('intel-isl/MiDaS', 'DPT_Large', pretrained=True)'}\\n\"", "answer_id": "j9x75Ldd8gf9noV465wQHF", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 171, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG16 model with batch normalization from PyTorch Hub, which can be fine-tuned for bird classification from images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg16_bn', pretrained=True)'}\"", "answer_id": "VDbeWCxYepmCRN5qfi9cT2", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 172, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_stt', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Models STT (Speech-To-Text) model from PyTorch Hub to convert customer voice calls into text for use in a call center application.', 'code': \\\"import torch\\nmodel, decoder = torch.hub.load('snakers4/silero-models', 'silero_stt', pretrained=True)\\\"}\"", "answer_id": "nZFuKUwTh9iaT5HFUPk86a", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 173, "text": "{'domain': 'Semantic Segmentation', 'api_call': \\\"model = torch.hub.load('hustvl/yolop', 'yolop', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained YOLOP model from PyTorch Hub for city-scape segmentation in autonomous driving applications.', 'code': \\\"import torch\\nmodel = torch.hub.load('hustvl/yolop', 'yolop', pretrained=True)\\\"}\"", "answer_id": "88iVcbZFWhfpYNyjKTjEAn", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 174, "text": "{'domain': 'Classification', 'api_call': 'model = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_se_resnext101_32x4d', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained SE-ResNeXt101-32x4d model from PyTorch Hub, which can be fine-tuned for image classification tasks to extract features from a collection of photographs taken at the 2022 Olympics.', 'code': \\\"import torch\\nmodel = torch.hub.load('NVIDIA/DeepLearningExamples:torchhub', 'nvidia_se_resnext101_32x4d', pretrained=True)\\\"}\"", "answer_id": "BV6ahA7jRDZZc2pBsVDHE4", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 175, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'x3d_s', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pre-trained X3D model from PyTorch Hub, which is a powerful image classification model suitable for classifying products in an e-commerce context.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'x3d_s', pretrained=True)'}\\n\"", "answer_id": "YTaX2wVZHDKYom7NVUfDXb", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 176, "text": "{'domain': 'Image Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'resnet18_swsl', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet18_swsl model from PyTorch Hub for image classification, which can classify images with known objects.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet18_swsl', pretrained=True)'}\\n\"", "answer_id": "JJhCexP4z47yVfaRkeFMVh", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 177, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext101_32x4d model from PyTorch Hub to classify images into damaged and undamaged packages.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnext101_32x4d', pretrained=True)'}\"", "answer_id": "kP5Wqad798jfKiY3D78pU2", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 178, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Wide ResNet-50 model from PyTorch Hub, which is optimized for GPUs and can be used to identify objects in images.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'wide_resnet50_2', pretrained=True)'}\\n\"", "answer_id": "mwtvWyU5gm7EuoLH7UJsBT", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 179, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNet-34 model from PyTorch Hub, which can be fine-tuned for wildlife classification on mobile platforms.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'resnet34', pretrained=True)'}\"", "answer_id": "VERpyYhCj9KHbYsr7Hq9DM", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 180, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'deeplabv3_mobilenet_v3_large', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained DeepLabV3 model with a MobileNet-V3 backbone from PyTorch Hub for image recognition tasks, such as identifying defective parts in a manufacturing assembly line.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'deeplabv3_mobilenet_v3_large', pretrained=True)'}\\n\"", "answer_id": "TnDE8LrGAbCnZAmienU5iZ", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 181, "text": "{'domain': 'Image Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model with batch normalization from PyTorch Hub for image classification, which can be fine-tuned to determine if an object is a car, a bike, or a pedestrian.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13_bn', pretrained=True)'}\\n\"", "answer_id": "TS4oNzv6CYacohUtKo9fyc", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 182, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Densenet-161 model from PyTorch Hub for efficient image classification without sacrificing too much accuracy.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'densenet161', pretrained=True)'}\\n\"", "answer_id": "AckaUD6XDENaPwGweZSKfi", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 183, "text": "{'domain': 'Image Classification', 'api_call': 'model = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)', 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG13 model from PyTorch Hub, which can be fine-tuned for plant classification using images of plants in the student's environment.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg13', pretrained=True)'}\"", "answer_id": "88NwwXv4sTx4JtD5k2rSPX", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 184, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x48d_wsl', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained ResNext WSL model from PyTorch Hub, which is optimized for image classification on multiple edge devices with different resource constraints.', 'code': 'import torch\\nmodel = torch.hub.load('facebookresearch/WSL-Images', 'resnext101_32x48d_wsl', pretrained=True)'}\\n\"", "answer_id": "KzEnm2u7b5Jydk34Br8Kww", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 185, "text": "{'domain': 'Text-to-Speech', 'api_call': \\\"model = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained Silero Text-To-Speech model from PyTorch Hub for converting text into natural-sounding speech.', 'code': 'import torch\\nmodel = torch.hub.load('snakers4/silero-models', 'silero_tts', pretrained=True)'}\\n\"", "answer_id": "cjX8G4t57xm588HSUzji6p", "model_id": "zshot-FT-th-may10", "metadata": {}}
{"question_id": 186, "text": "{'domain': 'Classification', 'api_call': \\\"model = torch.hub.load('pytorch/vision', 'vgg11_bn', pretrained=True)\\\", 'api_provider': 'PyTorch', 'explanation': 'Load the pretrained VGG11 model with batch normalization from PyTorch Hub to classify dog breeds given a photo of a dog.', 'code': 'import torch\\nmodel = torch.hub.load('pytorch/vision', 'vgg11_bn', pretrained=True)'}\"", "answer_id": "47XaFgzn2JJRs3UH3gWYVE", "model_id": "zshot-FT-th-may10", "metadata": {}}
