{"question_id": 1, "text": " Design a feature for a social media website to recommend articles to users based on how similar the articles are to their previously liked articles.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"princeton-nlp/unsup-simcse-roberta-base\", \"api_call\": \"AutoModel.from_pretrained('princeton-nlp/unsup-simcse-roberta-base')\", \"api_arguments\": null, \"python_environment_requirements\": [\"transformers\"], \"example_code\": null, \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"An unsupervised sentence embedding model trained using the SimCSE approach with a Roberta base architecture.\"}}", "category": "generic"}
{"question_id": 2, "text": " The user is interested in a tool to find relationships between medical terms.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"GanjinZero/UMLSBert_ENG\", \"api_call\": \"AutoModel.from_pretrained('GanjinZero/UMLSBert_ENG')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"CODER: Knowledge infused cross-lingual medical term embedding for term normalization. English Version. Old name. This model is not UMLSBert! Github Link: https://github.com/GanjinZero/CODER\"}}", "category": "generic"}
{"question_id": 3, "text": " As a journalist, I am curious about speech sentiment analysis in a group of people in a crowd. I want to extract features from the audio to run sentiment analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"hubert-large-ll60k\", \"api_call\": \"HubertModel.from_pretrained('facebook/hubert-large-ll60k')\", \"api_arguments\": \"pretrained model name\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"hubert = HubertModel.from_pretrained('facebook/hubert-large-ll60k')\", \"performance\": {\"dataset\": \"Libri-Light\", \"accuracy\": \"matches or improves upon the state-of-the-art wav2vec 2.0 performance\"}, \"description\": \"Hubert-Large is a self-supervised speech representation learning model pretrained on 16kHz sampled speech audio. It is designed to deal with the unique problems in speech representation learning, such as multiple sound units in each input utterance, no lexicon of input sound units during the pre-training phase, and variable lengths of sound units with no explicit segmentation. The model relies on an offline clustering step to provide aligned target labels for a BERT-like prediction loss.\"}}", "category": "generic"}
{"question_id": 4, "text": " A chat service needs a way to compare and cluster similar sentences from users in different languages. Find a suitable feature extraction method to achieve this.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"rasa/LaBSE\", \"api_call\": \"AutoModel.from_pretrained('rasa/LaBSE')\", \"api_arguments\": \"input_text\", \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"LaBSE (Language-agnostic BERT Sentence Embedding) model for extracting sentence embeddings in multiple languages.\"}}", "category": "generic"}
{"question_id": 5, "text": " I am an interior designer and want to showcase a modern living room with a fireplace and a large window overlooking a forest. Create an image according to this description.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image generation and modification based on text prompts\", \"api_name\": \"stabilityai/stable-diffusion-2-inpainting\", \"api_call\": \"StableDiffusionInpaintPipeline.from_pretrained('stabilityai/stable-diffusion-2-inpainting', torch_dtype=torch.float16)\", \"api_arguments\": [\"prompt\", \"image\", \"mask_image\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"scipy\", \"safetensors\"], \"example_code\": \"from diffusers import StableDiffusionInpaintPipeline\\npipe = StableDiffusionInpaintPipeline.from_pretrained('stabilityai/stable-diffusion-2-inpainting', torch_dtype=torch.float16)\\npipe.to(cuda)\\nprompt = Face of a yellow cat, high resolution, sitting on a park bench\\nimage = pipe(prompt=prompt, image=image, mask_image=mask_image).images[0]\\nimage.save(./yellow_cat_on_park_bench.png)\", \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"A Latent Diffusion Model that uses a fixed, pretrained text encoder (OpenCLIP-ViT/H) to generate and modify images based on text prompts.\"}}", "category": "generic"}
{"question_id": 6, "text": " We need a product description for an image-based online store platform that will help customers understand the specifics of the product.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-coco\", \"api_call\": \"GenerativeImage2TextModel.from_pretrained('microsoft/git-large-coco')\", \"api_arguments\": \"image, text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"See table 11 in the paper for more details.\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on COCO. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 7, "text": " Create a program to generate a description for an image provided as input.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-r-textcaps\", \"api_call\": \"pipeline('text-generation', model='microsoft/git-large-r-textcaps')\", \"api_arguments\": \"image\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"TextCaps\", \"accuracy\": \"\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextCaps. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).\"}}", "category": "generic"}
{"question_id": 8, "text": " I am a financial analyst, and I receive report after report filled with charts helping to explain trends and data in my field. However, I also need to have this information in tabular format. Please help me extract a linearized table from this chart.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"google/deplot\", \"api_call\": \"Pix2StructForConditionalGeneration.from_pretrained('google/deplot')\", \"api_arguments\": {\"images\": \"image\", \"text\": \"question\", \"return_tensors\": \"pt\", \"max_new_tokens\": 512}, \"python_environment_requirements\": {\"transformers\": \"Pix2StructForConditionalGeneration, Pix2StructProcessor\", \"requests\": \"requests\", \"PIL\": \"Image\"}, \"example_code\": \"from transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\\nimport requests\\nfrom PIL import Image\\nmodel = Pix2StructForConditionalGeneration.from_pretrained('google/deplot')\\nprocessor = Pix2StructProcessor.from_pretrained('google/deplot')\\nurl = https://raw.githubusercontent.com/vis-nlp/ChartQA/main/ChartQA%20Dataset/val/png/5090.png\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(images=image, text=Generate underlying data table of the figure below:, return_tensors=pt)\\npredictions = model.generate(**inputs, max_new_tokens=512)\\nprint(processor.decode(predictions[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"ChartQA\", \"accuracy\": \"24.0% improvement over finetuned SOTA\"}, \"description\": \"DePlot is a model that translates the image of a plot or chart to a linearized table. It decomposes the challenge of visual language reasoning into two steps: (1) plot-to-text translation, and (2) reasoning over the translated text. The output of DePlot can then be directly used to prompt a pretrained large language model (LLM), exploiting the few-shot reasoning capabilities of LLMs.\"}}", "category": "generic"}
{"question_id": 9, "text": " We are building an automatic video generation platform based on user-provided text. We need a reliable model to convert text instructions into appropriate videos.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video\", \"api_name\": \"ImRma/Brucelee\", \"api_call\": \"pipeline('text-to-video', model='ImRma/Brucelee')\", \"api_arguments\": [\"your_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Hugging Face model for converting Persian and English text into video.\"}}", "category": "generic"}
{"question_id": 10, "text": " How can I extract video content from a text file? Provide a code sample to generate the video based on the text.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video\", \"api_name\": \"duncan93/video\", \"api_call\": \"BaseModel.from_pretrained('duncan93/video')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"Asteroid\", \"example_code\": \"\", \"performance\": {\"dataset\": \"OpenAssistant/oasst1\", \"accuracy\": \"\"}, \"description\": \"A text-to-video model trained on OpenAssistant/oasst1 dataset.\"}}", "category": "generic"}
{"question_id": 11, "text": " We are developing a mobile app to demonstrate the AI's ability to generate a short video from text. The app focuses on processing written stories into video.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video Synthesis\", \"api_name\": \"damo-vilab/text-to-video-ms-1.7b-legacy\", \"api_call\": \"DiffusionPipeline.from_pretrained('damo-vilab/text-to-video-ms-1.7b-legacy', torch_dtype=torch.float16)\", \"api_arguments\": [\"prompt\", \"num_inference_steps\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\"], \"example_code\": \"import torch\\nfrom diffusers import DiffusionPipeline, DPMSolverMultistepScheduler\\nfrom diffusers.utils import export_to_video\\npipe = DiffusionPipeline.from_pretrained(damo-vilab/text-to-video-ms-1.7b-legacy, torch_dtype=torch.float16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\nprompt = Spiderman is surfing\\nvideo_frames = pipe(prompt, num_inference_steps=25).frames\\nvideo_path = export_to_video(video_frames)\", \"performance\": {\"dataset\": [\"LAION5B\", \"ImageNet\", \"Webvid\"], \"accuracy\": \"Not provided\"}, \"description\": \"This model is based on a multi-stage text-to-video generation diffusion model, which inputs a description text and returns a video that matches the text description. Only English input is supported.\"}}", "category": "generic"}
{"question_id": 12, "text": " Hey, I want to analyze images in my phone gallery and answer questions about them.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/git-base-vqav2\", \"api_call\": \"pipeline('visual-question-answering', model='microsoft/git-base-vqav2')\", \"api_arguments\": \"image, question\", \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"vqa(image='path/to/image.jpg', question='What is in the image?')\", \"performance\": {\"dataset\": \"VQAv2\", \"accuracy\": \"Refer to the paper for evaluation results\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, base-sized version, fine-tuned on VQAv2. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 13, "text": " My company wants to develop an application that will analyze images in relation to food and answer questions about them. We want it to handle questions like \\\"what is in the dish\\\" and \\\"how many calories does it have\\\".\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"azwierzc/vilt-b32-finetuned-vqa-pl\", \"api_call\": \"pipeline('visual-question-answering', model='azwierzc/vilt-b32-finetuned-vqa-pl')\", \"api_arguments\": {\"image\": \"path_to_image\", \"question\": \"question_text\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Visual Question Answering model fine-tuned on the Polish language.\"}}", "category": "generic"}
{"question_id": 14, "text": " We have received an invoice document, and would like to extract the total amount from it.\\n###Input: {'question': 'What is the total amount?', 'context': 'Invoice information for order ABC_123\\\\nProduct: Widget A, Quantity: 10, Price: $5 each\\\\nProduct: Widget B, Quantity: 5, Price: $3 each\\\\nProduct: Widget C, Quantity: 15, Price: $2 each\\\\nSubtotal: $75, Tax: $6.38, Total Amount Due: $81.38'}\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"layoutlm-invoices\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('impira/layoutlm-invoices')\", \"api_arguments\": \"question, context\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"nlp(question='What is the total amount?', context='your_invoice_text')\", \"performance\": {\"dataset\": \"proprietary dataset of invoices, SQuAD2.0, and DocVQA\", \"accuracy\": \"Not provided\"}, \"description\": \"A fine-tuned version of the multi-modal LayoutLM model for the task of question answering on invoices and other documents. It has been fine-tuned on a proprietary dataset of invoices as well as both SQuAD2.0 and DocVQA for general comprehension. Unlike other QA models, which can only extract consecutive tokens, this model can predict longer-range, non-consecutive sequences with an additional classifier head.\"}}", "category": "generic"}
{"question_id": 15, "text": " As a clerk in a school, you want to extract information from some student enrollment forms. These forms contain students' details such as Name, age, and address.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"tiny-random-LayoutLMv3ForQuestionAnswering\", \"api_call\": \"LayoutLMv3ForQuestionAnswering.from_pretrained('hf-tiny-model-private/tiny-random-LayoutLMv3ForQuestionAnswering')\", \"api_arguments\": {\"image\": \"path/to/image/file\"}, \"python_environment_requirements\": [\"transformers\", \"torch\", \"tensorflow\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random LayoutLMv3 model for document question answering. Can be used with the Hugging Face Inference API.\"}}", "category": "generic"}
{"question_id": 16, "text": " Find a model that can be used to predict the properties of molecules based on their graph representations.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Graph Machine Learning\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"graphormer-base-pcqm4mv1\", \"api_call\": \"AutoModel.from_pretrained('graphormer-base-pcqm4mv1')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"See the Graph Classification with Transformers tutorial\", \"performance\": {\"dataset\": \"PCQM4M-LSC\", \"accuracy\": \"1st place on the KDD CUP 2021 (quantum prediction track)\"}, \"description\": \"The Graphormer is a graph Transformer model, pretrained on PCQM4M-LSC, and which got 1st place on the KDD CUP 2021 (quantum prediction track). Developed by Microsoft, this model should be used for graph classification tasks or graph representation tasks; the most likely associated task is molecule modeling. It can either be used as such, or finetuned on downstream tasks.\"}}", "category": "generic"}
{"question_id": 17, "text": " Estimate the depth of a pool using computational depth estimation, given an underwater photo.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"hf-tiny-model-private/tiny-random-GLPNForDepthEstimation\", \"api_call\": \"AutoModel.from_pretrained('hf-tiny-model-private/tiny-random-GLPNForDepthEstimation')\", \"api_arguments\": [], \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random GLPN model for depth estimation using the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 18, "text": " I need technology that can analyze images and estimate their depth in a single camera.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Monocular Depth Estimation\", \"api_name\": \"Intel/dpt-large\", \"api_call\": \"DPTForDepthEstimation.from_pretrained('Intel/dpt-large')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"Intel/dpt-large\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import DPTImageProcessor, DPTForDepthEstimation\\nimport torch\\nimport numpy as np\\nfrom PIL import Image\\nimport requests\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = DPTImageProcessor.from_pretrained(Intel/dpt-large)\\nmodel = DPTForDepthEstimation.from_pretrained(Intel/dpt-large)\\ninputs = processor(images=image, return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n predicted_depth = outputs.predicted_depth\\nprediction = torch.nn.functional.interpolate(\\n predicted_depth.unsqueeze(1),\\n size=image.size[::-1],\\n mode=bicubic,\\n align_corners=False,\\n)\\noutput = prediction.squeeze().cpu().numpy()\\nformatted = (output * 255 / np.max(output)).astype(uint8)\\ndepth = Image.fromarray(formatted)\", \"performance\": {\"dataset\": \"MIX 6\", \"accuracy\": \"10.82\"}, \"description\": \"Dense Prediction Transformer (DPT) model trained on 1.4 million images for monocular depth estimation. Introduced in the paper Vision Transformers for Dense Prediction by Ranftl et al. (2021). DPT uses the Vision Transformer (ViT) as backbone and adds a neck + head on top for monocular depth estimation.\"}}", "category": "generic"}
{"question_id": 19, "text": " The client is a real estate company working on virtual tours. We need to help them estimate depth in images of houses.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-kitti-finetuned-diode-221214-123047\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-kitti-finetuned-diode-221214-123047')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers==4.24.0\", \"torch==1.12.1+cu116\", \"tokenizers==0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3497, \"Mae\": 0.2847, \"Rmse\": 0.3977, \"Abs Rel\": 0.3477, \"Log Mae\": 0.1203, \"Log Rmse\": 0.1726, \"Delta1\": 0.5217, \"Delta2\": 0.8246, \"Delta3\": 0.9436}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-kitti on the diode-subset dataset. It is used for depth estimation in computer vision applications.\"}}", "category": "generic"}
{"question_id": 20, "text": " Assist me in setting up an image classifier that can recognize objects within an image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"timm/mobilenetv3_large_100.ra_in1k\", \"api_call\": \"timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\", \"api_arguments\": {\"pretrained\": \"True\"}, \"python_environment_requirements\": {\"timm\": \"latest\"}, \"example_code\": \"from urllib.request import urlopen\\nfrom PIL import Image\\nimport timm\\nimg = Image.open(urlopen(\\n 'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\\n))\\nmodel = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\\nmodel = model.eval()\\ndata_config = timm.data.resolve_model_data_config(model)\\ntransforms = timm.data.create_transform(**data_config, is_training=False)\\noutput = model(transforms(img).unsqueeze(0))\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"A MobileNet-v3 image classification model. Trained on ImageNet-1k in timm using recipe template described below. Recipe details: RandAugment RA recipe. Inspired by and evolved from EfficientNet RandAugment recipes. Published as B recipe in ResNet Strikes Back. RMSProp (TF 1.0 behaviour) optimizer, EMA weight averaging. Step (exponential decay w/ staircase) LR schedule with warmup.\"}}", "category": "generic"}
{"question_id": 21, "text": " Identify an object within an image based on textual description. For example, find a dog in the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-base-patch32\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-base-patch32')\", \"api_arguments\": {\"texts\": \"List of text queries\", \"images\": \"Image to be processed\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"import requests\\nfrom PIL import Image\\nimport torch\\nfrom transformers import OwlViTProcessor, OwlViTForObjectDetection\\nprocessor = OwlViTProcessor.from_pretrained(google/owlvit-base-patch32)\\nmodel = OwlViTForObjectDetection.from_pretrained(google/owlvit-base-patch32)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [[a photo of a cat, a photo of a dog]]\\ninputs = processor(text=texts, images=image, return_tensors=pt)\\noutputs = model(**inputs)\\ntarget_sizes = torch.Tensor([image.size[::-1]])\\nresults = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"performance\": {\"dataset\": \"COCO and OpenImages\", \"accuracy\": \"Not specified\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. The model can be used to query an image with one or multiple text queries.\"}}", "category": "generic"}
{"question_id": 22, "text": " Our client is an AI gaming company and we need to develop a bot for the game Valorant. The bot should detect objects like dropped spike, enemy, planted spike, and teammate within the game.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-valorant-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-valorant-detection')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic_nms\": false, \"max_det\": 1000}, \"python_environment_requirements\": \"pip install ultralyticsplus==0.0.23 ultralytics==8.0.21\", \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8m-valorant-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"valorant-object-detection\", \"accuracy\": 0.965}, \"description\": \"A YOLOv8 model for object detection in Valorant game, trained on a custom dataset. It detects dropped spike, enemy, planted spike, and teammate objects.\"}}", "category": "generic"}
{"question_id": 23, "text": " A client from real estate agency needs to get a list of objects present in a series of pictures to prepare their property listings.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-base-patch16\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-base-patch16')\", \"api_arguments\": [\"texts\", \"images\"], \"python_environment_requirements\": [\"requests\", \"PIL\", \"torch\", \"transformers\"], \"example_code\": \"processor = OwlViTProcessor.from_pretrained(google/owlvit-base-patch16)\\nmodel = OwlViTForObjectDetection.from_pretrained(google/owlvit-base-patch16)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [[a photo of a cat, a photo of a dog]]\\ninputs = processor(text=texts, images=image, return_tensors=pt)\\noutputs = model(**inputs)\\ntarget_sizes = torch.Tensor([image.size[::-1]])\\nresults = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not provided\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. OWL-ViT uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features.\"}}", "category": "generic"}
{"question_id": 24, "text": " We are developing an application for smartphones which automatically separates elements in a user's photo, and we need to implement this feature.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"facebook/detr-resnet-50-panoptic\", \"api_call\": \"DetrForSegmentation.from_pretrained('facebook/detr-resnet-50-panoptic')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"torch\", \"numpy\", \"transformers\", \"PIL\", \"requests\", \"io\"], \"example_code\": [\"import io\", \"import requests\", \"from PIL import Image\", \"import torch\", \"import numpy\", \"from transformers import DetrFeatureExtractor, DetrForSegmentation\", \"from transformers.models.detr.feature_extraction_detr import rgb_to_id\", \"url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\", \"image = Image.open(requests.get(url, stream=True).raw)\", \"feature_extractor = DetrFeatureExtractor.from_pretrained('facebook/detr-resnet-50-panoptic')\", \"model = DetrForSegmentation.from_pretrained('facebook/detr-resnet-50-panoptic')\", \"inputs = feature_extractor(images=image, return_tensors='pt')\", \"outputs = model(**inputs)\", \"processed_sizes = torch.as_tensor(inputs['pixel_values'].shape[-2:]).unsqueeze(0)\", \"result = feature_extractor.post_process_panoptic(outputs, processed_sizes)[0]\", \"panoptic_seg = Image.open(io.BytesIO(result['png_string']))\", \"panoptic_seg = numpy.array(panoptic_seg, dtype=numpy.uint8)\", \"panoptic_seg_id = rgb_to_id(panoptic_seg)\"], \"performance\": {\"dataset\": \"COCO 2017 validation\", \"accuracy\": {\"box_AP\": 38.8, \"segmentation_AP\": 31.1, \"PQ\": 43.4}}, \"description\": \"DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 panoptic (118k annotated images). It was introduced in the paper End-to-End Object Detection with Transformers by Carion et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 25, "text": " I have a picture of a room demonstrating a mixture of objects. The model needs to seperate the objects and label them accordingly.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"facebook/maskformer-swin-large-ade\", \"api_call\": \"MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-large-ade')\", \"api_arguments\": {\"from_pretrained\": \"facebook/maskformer-swin-large-ade\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": \"from transformers import MaskFormerImageProcessor, MaskFormerForInstanceSegmentation\\nfrom PIL import Image\\nimport requests\\nurl = 'https://huggingface.co/datasets/hf-internal-testing/fixtures_ade20k/resolve/main/ADE_val_00000001.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = MaskFormerImageProcessor.from_pretrained('facebook/maskformer-swin-large-ade')\\ninputs = processor(images=image, return_tensors='pt')\\nmodel = MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-large-ade')\\noutputs = model(**inputs)\\nclass_queries_logits = outputs.class_queries_logits\\nmasks_queries_logits = outputs.masks_queries_logits\\npredicted_semantic_map = processor.post_process_semantic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\", \"performance\": {\"dataset\": \"ADE20k\", \"accuracy\": \"Not provided\"}, \"description\": \"MaskFormer model trained on ADE20k semantic segmentation (large-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository. This model addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation.\"}}", "category": "generic"}
{"question_id": 26, "text": " We want to randomly generate high-quality images of celebrity faces.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Denoising Diffusion Probabilistic Models (DDPM)\", \"api_name\": \"google/ddpm-ema-celebahq-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-ema-celebahq-256')\", \"api_arguments\": {\"model_id\": \"google/ddpm-ema-celebahq-256\"}, \"python_environment_requirements\": \"diffusers\", \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-ema-celebahq-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": {\"CIFAR10\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}, \"LSUN\": {\"sample_quality\": \"similar to ProgressiveGAN\"}}}, \"description\": \"High quality image synthesis using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics.\"}}", "category": "generic"}
{"question_id": 27, "text": " Generate a new image based on the online database of bedroom art.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"johnowhitaker/sd-class-wikiart-from-bedrooms\", \"api_call\": \"DDPMPipeline.from_pretrained('johnowhitaker/sd-class-wikiart-from-bedrooms')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('johnowhitaker/sd-class-wikiart-from-bedrooms')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"https://huggingface.co/datasets/huggan/wikiart\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a diffusion model initialized from https://huggingface.co/google/ddpm-bedroom-256 and trained for 5000 steps on https://huggingface.co/datasets/huggan/wikiart.\"}}", "category": "generic"}
{"question_id": 28, "text": " I run an online store that sells butterfly-themed products. Please generate an image of a cute butterfly for our social media page.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"sd-class-butterflies-32\", \"api_call\": \"DDPMPipeline.from_pretrained('clp/sd-class-butterflies-32')\", \"api_arguments\": {\"model_id\": \"clp/sd-class-butterflies-32\"}, \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('clp/sd-class-butterflies-32')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"This model is a diffusion model for unconditional image generation of cute butterflies.\"}}", "category": "generic"}
{"question_id": 29, "text": " We need a video-based AI model for security purposes. We want the AI to check and categorize footage based on existing security guidelines.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/xclip-base-patch32\", \"api_call\": \"XClipModel.from_pretrained('microsoft/xclip-base-patch32')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"Kinetics 400\", \"accuracy\": {\"top-1\": 80.4, \"top-5\": 95.0}}, \"description\": \"X-CLIP is a minimal extension of CLIP for general video-language understanding. The model is trained in a contrastive way on (video, text) pairs. This allows the model to be used for tasks like zero-shot, few-shot or fully supervised video classification and video-text retrieval.\"}}", "category": "generic"}
{"question_id": 30, "text": " A new project demands to classify videos for a social media platform. Let us create a video classification pipeline.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base')\", \"api_arguments\": [\"video\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-base)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base)\\npixel_values = processor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": \"To be provided\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches.\"}}", "category": "generic"}
{"question_id": 31, "text": " I am an insurance adjustor. I need a zero-shot image classifier that will tell me whether a car has been involved in a major accident or had minor damages.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-ViT-B-16-laion2B-s34B-b88K\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-ViT-B-16-laion2B-s34B-b88K')\", \"api_arguments\": {\"image\": \"Path to image file or URL\", \"class_names\": \"List of possible class names (comma-separated)\"}, \"python_environment_requirements\": {\"transformers\": \">=4.11.0\"}, \"example_code\": \"from transformers import pipeline; classify = pipeline('image-classification', model='laion/CLIP-ViT-B-16-laion2B-s34B-b88K'); classify('/path/to/image.jpg', ['cat', 'dog'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"70.2%\"}, \"description\": \"A CLIP ViT-B/16 model trained with the LAION-2B English subset of LAION-5B using OpenCLIP. This model is intended for research purposes and can be used for zero-shot image classification, image and text retrieval, and other related tasks.\"}}", "category": "generic"}
{"question_id": 32, "text": " I want to analyze a medical image to find out if it's an X-ray, an MRI scan, or a CT scan.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"microsoft/BiomedCLIP-PubMedBERT_256-vit_base_patch16_224\", \"api_call\": \"pipeline('zero-shot-image-classification', model='microsoft/BiomedCLIP-PubMedBERT_256-vit_base_patch16_224')\", \"api_arguments\": \"image, possible_class_names\", \"python_environment_requirements\": \"transformers, torch, torchvision\", \"example_code\": \"from transformers import pipeline\\nclip = pipeline('zero-shot-image-classification', model='microsoft/BiomedCLIP-PubMedBERT_256-vit_base_patch16_224')\\nimage = 'path/to/image.png'\\npossible_class_names = ['class1', 'class2', 'class3']\\nresult = clip(image, possible_class_names)\", \"performance\": {\"dataset\": \"PMC-15M\", \"accuracy\": \"State of the art\"}, \"description\": \"BiomedCLIP is a biomedical vision-language foundation model pretrained on PMC-15M, a dataset of 15 million figure-caption pairs extracted from biomedical research articles in PubMed Central, using contrastive learning. It uses PubMedBERT as the text encoder and Vision Transformer as the image encoder, with domain-specific adaptations. It can perform various vision-language processing (VLP) tasks such as cross-modal retrieval, image classification, and visual question answering.\"}}", "category": "generic"}
{"question_id": 33, "text": " We are building a quiz application where the image will be shown, and we have to choose a dressings matching that image. Please help in classifying the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"kakaobrain/align-base\", \"api_call\": \"AlignModel.from_pretrained('kakaobrain/align-base')\", \"api_arguments\": [\"text\", \"images\", \"return_tensors\"], \"python_environment_requirements\": [\"requests\", \"torch\", \"PIL\", \"transformers\"], \"example_code\": \"import requests\\nimport torch\\nfrom PIL import Image\\nfrom transformers import AlignProcessor, AlignModel\\nprocessor = AlignProcessor.from_pretrained(kakaobrain/align-base)\\nmodel = AlignModel.from_pretrained(kakaobrain/align-base)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ncandidate_labels = [an image of a cat, an image of a dog]\\ninputs = processor(text=candidate_labels, images=image, return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\\nprint(probs)\", \"performance\": {\"dataset\": \"COYO-700M\", \"accuracy\": \"on-par or outperforms Google ALIGN's reported metrics\"}, \"description\": \"The ALIGN model is a dual-encoder architecture with EfficientNet as its vision encoder and BERT as its text encoder. It learns to align visual and text representations with contrastive learning. This implementation is trained on the open source COYO dataset and can be used for zero-shot image classification and multi-modal embedding retrieval.\"}}", "category": "generic"}
{"question_id": 34, "text": " We're developing a chatbot that can quickly identify and describe images for our Chinese-speaking users.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"OFA-Sys/chinese-clip-vit-large-patch14-336px\", \"api_call\": \"ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14-336px')\", \"api_arguments\": {\"images\": \"image\", \"text\": \"texts\", \"return_tensors\": \"pt\", \"padding\": \"True\"}, \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\\nmodel = ChineseCLIPModel.from_pretrained(OFA-Sys/chinese-clip-vit-large-patch14-336px)\\nprocessor = ChineseCLIPProcessor.from_pretrained(OFA-Sys/chinese-clip-vit-large-patch14-336px)\\nurl = https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/pokemon.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = []\\ninputs = processor(images=image, return_tensors=pt)\\nimage_features = model.get_image_features(**inputs)\\nimage_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, padding=True, return_tensors=pt)\\ntext_features = model.get_text_features(**inputs)\\ntext_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": {\"CIFAR10\": 96.0, \"CIFAR100\": 79.75, \"DTD\": 51.2, \"EuroSAT\": 52.0, \"FER\": 55.1, \"FGVC\": 26.2, \"KITTI\": 49.9, \"MNIST\": 79.4, \"PC\": 63.5, \"VOC\": 84.9}, \"accuracy\": \"various\"}, \"description\": \"Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It uses ViT-L/14@336px as the image encoder and RoBERTa-wwm-base as the text encoder.\"}}", "category": "generic"}
{"question_id": 35, "text": " We would like to understand the sentiment of user's messages in a customer support chat system.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"cardiffnlp/twitter-xlm-roberta-base-sentiment\", \"api_call\": \"pipeline(sentiment-analysis, model='cardiffnlp/twitter-xlm-roberta-base-sentiment')\", \"api_arguments\": [\"model_path\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nmodel_path = cardiffnlp/twitter-xlm-roberta-base-sentiment\\nsentiment_task = pipeline(sentiment-analysis, model=model_path, tokenizer=model_path)\\nsentiment_task(T'estimo!)\", \"performance\": {\"dataset\": \"Twitter\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a multilingual XLM-roBERTa-base model trained on ~198M tweets and finetuned for sentiment analysis. The sentiment fine-tuning was done on 8 languages (Ar, En, Fr, De, Hi, It, Sp, Pt) but it can be used for more languages (see paper for details).\"}}", "category": "generic"}
{"question_id": 36, "text": " As a book store owner, I want to classify customer reviews into positive and negative sentiments.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"distilbert-base-uncased-finetuned-sst-2-english\", \"api_call\": \"DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')\", \"api_arguments\": [\"inputs\"], \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"import torch\\nfrom transformers import DistilBertTokenizer, DistilBertForSequenceClassification\\ntokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')\\nmodel = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')\\ninputs = tokenizer('Hello, my dog is cute', return_tensors='pt')\\nwith torch.no_grad():\\n    logits = model(**inputs).logits\\npredicted_class_id = logits.argmax().item()\\nmodel.config.id2label[predicted_class_id]\", \"performance\": {\"dataset\": \"glue\", \"accuracy\": 0.911}, \"description\": \"This model is a fine-tune checkpoint of DistilBERT-base-uncased, fine-tuned on SST-2. It reaches an accuracy of 91.3 on the dev set (for comparison, Bert bert-base-uncased version reaches an accuracy of 92.7). This model can be used for topic classification.\"}}", "category": "generic"}
{"question_id": 37, "text": " I am the owner of a news website. I have several consumers' comments about our publishing news. I want to analyze the sentiments of these comments.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"cardiffnlp/twitter-roberta-base-sentiment-latest\", \"api_call\": \"pipeline(sentiment-analysis, model=AutoModel.from_pretrained('cardiffnlp/twitter-roberta-base-sentiment-latest'), tokenizer=AutoTokenizer.from_pretrained('cardiffnlp/twitter-roberta-base-sentiment-latest'))\", \"api_arguments\": {\"model\": \"model_path\", \"tokenizer\": \"model_path\"}, \"python_environment_requirements\": [\"transformers\", \"numpy\", \"scipy\"], \"example_code\": \"from transformers import pipeline\\nsentiment_task = pipeline(sentiment-analysis, model=model_path, tokenizer=model_path)\\nsentiment_task(Covid cases are increasing fast!)\", \"performance\": {\"dataset\": \"tweet_eval\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a RoBERTa-base model trained on ~124M tweets from January 2018 to December 2021, and finetuned for sentiment analysis with the TweetEval benchmark. The model is suitable for English.\"}}", "category": "generic"}
{"question_id": 38, "text": " Our business is expanding to international markets. Analyze the sentiment of the following customer review to better understand their satisfaction with our product: \\\"\\u00a1Esto es maravilloso! Me encanta.\\\"\\n###Input: \\\"\\u00a1Esto es maravilloso! Me encanta.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"bert-base-multilingual-uncased-sentiment\", \"api_call\": \"pipeline('sentiment-analysis', model='nlptown/bert-base-multilingual-uncased-sentiment')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"result = sentiment_pipeline('I love this product!')\", \"performance\": {\"dataset\": [{\"language\": \"English\", \"accuracy\": {\"exact\": \"67%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Dutch\", \"accuracy\": {\"exact\": \"57%\", \"off-by-1\": \"93%\"}}, {\"language\": \"German\", \"accuracy\": {\"exact\": \"61%\", \"off-by-1\": \"94%\"}}, {\"language\": \"French\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"94%\"}}, {\"language\": \"Italian\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Spanish\", \"accuracy\": {\"exact\": \"58%\", \"off-by-1\": \"95%\"}}]}, \"description\": \"This a bert-base-multilingual-uncased model finetuned for sentiment analysis on product reviews in six languages: English, Dutch, German, French, Spanish and Italian. It predicts the sentiment of the review as a number of stars (between 1 and 5).\"}}", "category": "generic"}
{"question_id": 39, "text": " We are a forum moderator team looking for a solution to classify comments into toxic or non-toxic categories.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"martin-ha/toxic-comment-model\", \"api_call\": \"pipeline(model='martin-ha/toxic-comment-model')\", \"api_arguments\": {\"model_path\": \"martin-ha/toxic-comment-model\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer, TextClassificationPipeline\\nmodel_path = martin-ha/toxic-comment-model\\ntokenizer = AutoTokenizer.from_pretrained(model_path)\\nmodel = AutoModelForSequenceClassification.from_pretrained(model_path)\\npipeline = TextClassificationPipeline(model=model, tokenizer=tokenizer)\\nprint(pipeline('This is a test text.'))\", \"performance\": {\"dataset\": \"held-out test set\", \"accuracy\": 0.94, \"f1-score\": 0.59}, \"description\": \"This model is a fine-tuned version of the DistilBERT model to classify toxic comments.\"}}", "category": "generic"}
{"question_id": 40, "text": " My company is launching a social media campaign. We need an AI-based system that would automatically analyze the sentiment of any user-generated reviews or tweets concerning our product.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"siebert/sentiment-roberta-large-english\", \"api_call\": \"pipeline('sentiment-analysis', model='siebert/sentiment-roberta-large-english')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nsentiment_analysis = pipeline(sentiment-analysis, model=siebert/sentiment-roberta-large-english)\\nprint(sentiment_analysis(I love this!))\", \"performance\": {\"dataset\": [{\"name\": \"McAuley and Leskovec (2013) (Reviews)\", \"accuracy\": 98.0}, {\"name\": \"McAuley and Leskovec (2013) (Review Titles)\", \"accuracy\": 87.0}, {\"name\": \"Yelp Academic Dataset\", \"accuracy\": 96.5}, {\"name\": \"Maas et al. (2011)\", \"accuracy\": 96.0}, {\"name\": \"Kaggle\", \"accuracy\": 96.0}, {\"name\": \"Pang and Lee (2005)\", \"accuracy\": 91.0}, {\"name\": \"Nakov et al. (2013)\", \"accuracy\": 88.5}, {\"name\": \"Shamma (2009)\", \"accuracy\": 87.0}, {\"name\": \"Blitzer et al. (2007) (Books)\", \"accuracy\": 92.5}, {\"name\": \"Blitzer et al. (2007) (DVDs)\", \"accuracy\": 92.5}, {\"name\": \"Blitzer et al. (2007) (Electronics)\", \"accuracy\": 95.0}, {\"name\": \"Blitzer et al. (2007) (Kitchen devices)\", \"accuracy\": 98.5}, {\"name\": \"Pang et al. (2002)\", \"accuracy\": 95.5}, {\"name\": \"Speriosu et al. (2011)\", \"accuracy\": 85.5}, {\"name\": \"Hartmann et al. (2019)\", \"accuracy\": 98.0}], \"average_accuracy\": 93.2}, \"description\": \"This model ('SiEBERT', prefix for 'Sentiment in English') is a fine-tuned checkpoint of RoBERTa-large (Liu et al. 2019). It enables reliable binary sentiment analysis for various types of English-language text. For each instance, it predicts either positive (1) or negative (0) sentiment. The model was fine-tuned and evaluated on 15 data sets from diverse text sources to enhance generalization across different types of texts (reviews, tweets, etc.). Consequently, it outperforms models trained on only one type of text (e.g., movie reviews from the popular SST-2 benchmark) when used on new data as shown below.\"}}", "category": "generic"}
{"question_id": 41, "text": " I have jobs descriptions in French for sales manager, please highlight names of organizations or cities within the text.\\n###Input: \\\"La soci\\u00e9t\\u00e9 de Paris est sp\\u00e9cialis\\u00e9e dans la vente de v\\u00e9hicules \\u00e9lectriques. Responsable des ventes, vous travaillerez au sein d'une \\u00e9quipe dynamique dans l'agence de Lyon. Vous \\u00eates charg\\u00e9(e) de d\\u00e9velopper le portefeuille client et d'assurer la satisfaction des clients existants. Dans ce contexte, vous devrez travailler en lien \\u00e9troit avec le directeur commercial et les autres \\u00e9quipes de l'entreprise. Une exp\\u00e9rience pr\\u00e9alable chez Renault est un atout.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Jean-Baptiste/camembert-ner\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Jean-Baptiste/camembert-ner')\", \"api_arguments\": {\"model\": \"model\", \"tokenizer\": \"tokenizer\", \"aggregation_strategy\": \"simple\"}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModelForTokenClassification, pipeline\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\ntokenizer = AutoTokenizer.from_pretrained(Jean-Baptiste/camembert-ner)\\nmodel = AutoModelForTokenClassification.from_pretrained(Jean-Baptiste/camembert-ner)\\nfrom transformers import pipeline\\nnlp = pipeline('ner', model=model, tokenizer=tokenizer, aggregation_strategy=simple)\\nnlp(Apple est cre le 1er avril 1976 dans le garage de la maison d'enfance de Steve Jobs  Los Altos en Californie par Steve Jobs, Steve Wozniak et Ronald Wayne14, puis constitue sous forme de socit le 3 janvier 1977  l'origine sous le nom d'Apple Computer, mais pour ses 30 ans et pour reflter la diversification de ses produits, le mot \\u00ab computer  est retir le 9 janvier 2015.)\", \"performance\": {\"dataset\": \"wikiner-fr\", \"accuracy\": {\"overall_f1\": 0.8914, \"PER_f1\": 0.9483, \"ORG_f1\": 0.8181, \"LOC_f1\": 0.8955, \"MISC_f1\": 0.8146}}, \"description\": \"camembert-ner is a Named Entity Recognition (NER) model fine-tuned from camemBERT on the wikiner-fr dataset. It can recognize entities such as persons, organizations, locations, and miscellaneous entities.\"}}", "category": "generic"}
{"question_id": 42, "text": " In order to have a better understanding of our clients, I'd like to identify the names of people and organizations mentioned in the following customer review.\\n###Input: \\\"I recently purchased a MacBook Pro from Apple Inc. and had a fantastic customer support experience. John from their tech support team was incredibly helpful and professional.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"dslim/bert-large-NER\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('dslim/bert-large-NER')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained('dslim/bert-large-NER')\", \"tokenizer\": \"AutoTokenizer.from_pretrained('dslim/bert-large-NER')\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.1\"}, \"example_code\": {\"example\": \"My name is Wolfgang and I live in Berlin\", \"ner_results\": \"nlp(example)\"}, \"performance\": {\"dataset\": \"conll2003\", \"accuracy\": {\"f1\": 0.92, \"precision\": 0.92, \"recall\": 0.919}}, \"description\": \"bert-large-NER is a fine-tuned BERT model that is ready to use for Named Entity Recognition and achieves state-of-the-art performance for the NER task. It has been trained to recognize four types of entities: location (LOC), organizations (ORG), person (PER) and Miscellaneous (MISC).\"}}", "category": "generic"}
{"question_id": 43, "text": " I am building a social media app that requires people to write fascinating stories rather than boring sentences. Detect named entities in a sentence by using an NER model.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Flair\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english-ontonotes-large\", \"api_call\": \"SequenceTagger.load('flair/ner-english-ontonotes-large')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\n# load tagger\\ntagger = SequenceTagger.load('flair/ner-english-ontonotes-large')\\n# make example sentence\\nsentence = Sentence('On September 1st George won 1 dollar while watching Game of Thrones.')\\n# predict NER tags\\ntagger.predict(sentence)\\n# print sentence\\nprint(sentence)\\n# print predicted NER spans\\nprint('The following NER tags are found:')\\n# iterate over entities and print\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"Ontonotes\", \"accuracy\": 90.93}, \"description\": \"English NER in Flair (Ontonotes large model). This is the large 18-class NER model for English that ships with Flair. It predicts 18 tags such as cardinal value, date value, event name, building name, geo-political entity, language name, law name, location name, money name, affiliation, ordinal value, organization name, percent value, person name, product name, quantity value, time value, and name of work of art. The model is based on document-level XLM-R embeddings and FLERT.\"}}", "category": "generic"}
{"question_id": 44, "text": " We have a large dataset of customer orders in the form of a table. Help us answer questions about this data.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-small-finetuned-sqa\", \"api_call\": \"pipeline('table-question-answering', model='google/tapas-small-finetuned-sqa')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"msr_sqa\", \"accuracy\": 0.6155}, \"description\": \"TAPAS small model fine-tuned on Sequential Question Answering (SQA). It uses relative position embeddings (i.e. resetting the position index at every cell of the table).\"}}", "category": "generic"}
{"question_id": 45, "text": " Gather information about annual income and age demographics of employees to predict retirement patterns. Make sure to identify top employees for potential promotions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-large-finetuned-sqa\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-large-finetuned-sqa')\", \"api_arguments\": [\"question\", \"table\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"https://huggingface.co/google/tapas-large-finetuned-sqa\", \"performance\": {\"dataset\": \"msr_sqa\", \"accuracy\": 0.7289}, \"description\": \"TAPAS large model fine-tuned on Sequential Question Answering (SQA). This model was pre-trained on MLM and an additional step which the authors call intermediate pre-training, and then fine-tuned on SQA. It uses relative position embeddings (i.e. resetting the position index at every cell of the table).\"}}", "category": "generic"}
{"question_id": 46, "text": " To track our sales data, we need to find total sales of a specific product based on a table containing sales information per week.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"lysandre/tapas-temporary-repo\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\", \"api_arguments\": [\"model_name\", \"question\", \"table\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"tokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\\ninputs = tokenizer(table=table, queries=question, return_tensors='pt')\\noutputs = model(**inputs)\\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())\", \"performance\": {\"dataset\": \"SQA\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS base model fine-tuned on Sequential Question Answering (SQA). This model is pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion and can be used for answering questions related to a table in a conversational set-up.\"}}", "category": "generic"}
{"question_id": 47, "text": " I have a table containing information about various animals and their important characteristics. I need the system to answer a query to provide information about the tallest animal in the table.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-mini-finetuned-sqa\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-mini-finetuned-sqa')\", \"api_arguments\": [\"model_name\", \"table\", \"queries\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"msr_sqa\", \"accuracy\": 0.5148}, \"description\": \"TAPAS mini model fine-tuned on Sequential Question Answering (SQA)\"}}", "category": "generic"}
{"question_id": 48, "text": " You are building an app that allows users to find quick answers to textbook questions. Users will send a message with the question, and the answer should be detected directly from the textbook content.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"distilbert-base-uncased-distilled-squad\", \"api_call\": \"pipeline('question-answering', model='distilbert-base-uncased-distilled-squad')\", \"api_arguments\": [\"question\", \"context\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nquestion_answerer = pipeline(question-answering, model='distilbert-base-uncased-distilled-squad')\\ncontext = r\\n... Extractive Question Answering is the task of extracting an answer from a text given a question. An example of a\\n... question answering dataset is the SQuAD dataset, which is entirely based on that task. If you would like to fine-tune\\n... a model on a SQuAD task, you may leverage the examples/pytorch/question-answering/run_squad.py script.\\n... \\nresult = question_answerer(question=What is a good example of a question answering dataset?, context=context)\\nprint(\\n... fAnswer: '{result['answer']}', score: {round(result['score'], 4)}, start: {result['start']}, end: {result['end']}\\n...)\", \"performance\": {\"dataset\": \"SQuAD v1.1\", \"accuracy\": \"86.9 F1 score\"}, \"description\": \"DistilBERT base uncased distilled SQuAD is a fine-tuned version of DistilBERT-base-uncased for the task of question answering. It has 40% less parameters than bert-base-uncased, runs 60% faster while preserving over 95% of BERT's performances as measured on the GLUE language understanding benchmark.\"}}", "category": "generic"}
{"question_id": 49, "text": " We want to make sure clarify some questions about the legal implications of a new partnership contract for a real estate development project.\\n###Input: We hereby grant the Licensee the exclusive right to develop, construct, operate and promote the Project, as well as to manage the daily operations of the Licensed Facilities during the Term. In consideration for the grant of the License, the Licensee shall pay to the Licensor the full amount of Ten Million (10,000,000) Dollars within thirty (30) days after the execution hereof.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"Rakib/roberta-base-on-cuad\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('Rakib/roberta-base-on-cuad')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained(Rakib/roberta-base-on-cuad)\"}, \"python_environment_requirements\": {\"transformers\": \"latest\"}, \"example_code\": {\"import\": \"from transformers import AutoTokenizer, AutoModelForQuestionAnswering\", \"tokenizer\": \"tokenizer = AutoTokenizer.from_pretrained(Rakib/roberta-base-on-cuad)\", \"model\": \"model = AutoModelForQuestionAnswering.from_pretrained(Rakib/roberta-base-on-cuad)\"}, \"performance\": {\"dataset\": \"cuad\", \"accuracy\": \"46.6%\"}, \"description\": \"This model is trained for the task of Question Answering on Legal Documents using the CUAD dataset. It is based on the RoBERTa architecture and can be used to extract answers from legal contracts and documents.\"}}", "category": "generic"}
{"question_id": 50, "text": " Help me setup a tinyroberta model from deepset for Question and Answer. Provide a sample input and output.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/tinyroberta-squad2\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('deepset/tinyroberta-squad2')\", \"api_arguments\": {\"model_name_or_path\": \"deepset/tinyroberta-squad2\", \"question\": \"Why is model conversion important?\", \"context\": \"The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForQuestionAnswering, AutoTokenizer, pipeline\\nmodel_name = deepset/tinyroberta-squad2\\nnlp = pipeline('question-answering', model=model_name, tokenizer=model_name)\\nQA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\", \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"exact\": 78.69114798281817, \"f1\": 81.9198998536977}}, \"description\": \"This is the distilled version of the deepset/roberta-base-squad2 model. This model has a comparable prediction quality and runs at twice the speed of the base model.\"}}", "category": "generic"}
{"question_id": 51, "text": " I want to build a tool to answer questions automatically from a given document. Which model do you recommend for this task?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-base-squad2-distilled\", \"api_call\": \"AutoModel.from_pretrained('deepset/roberta-base-squad2-distilled')\", \"api_arguments\": {\"context\": \"string\", \"question\": \"string\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='deepset/roberta-base-squad2-distilled')\\nresult = qa_pipeline({'context': 'This is a context.', 'question': 'What is this?'})\\nprint(result)\", \"performance\": {\"dataset\": \"squad_v2\", \"exact\": 79.8366040596311, \"f1\": 83.916407079888}, \"description\": \"This model is a distilled version of deepset/roberta-large-squad2, trained on SQuAD 2.0 dataset for question answering tasks. It is based on the Roberta architecture and has been fine-tuned using Haystack's distillation feature.\"}}", "category": "generic"}
{"question_id": 52, "text": " We have a French news agency and we want to categorize the news articles based on sports, politics, and science.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"BaptisteDoyen/camembert-base-xnli\", \"api_call\": \"pipeline('zero-shot-classification', model='BaptisteDoyen/camembert-base-xnli')\", \"api_arguments\": {\"sequence\": \"str\", \"candidate_labels\": \"List[str]\", \"hypothesis_template\": \"str\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"sequence = L'\\u00e9quipe de France joue aujourd'hui au Parc des Princes\\ncandidate_labels = [sport,politique,science]\\nhypothesis_template = Ce texte parle de {}.\\nclassifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"performance\": {\"dataset\": \"xnli\", \"accuracy\": {\"validation\": 81.4, \"test\": 81.7}}, \"description\": \"Camembert-base model fine-tuned on french part of XNLI dataset. One of the few Zero-Shot classification models working on French.\"}}", "category": "generic"}
{"question_id": 53, "text": " I need a solution to detect whether a piece of news is talking about technology, sports, or politics.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"cross-encoder/nli-roberta-base\", \"api_call\": \"CrossEncoder('cross-encoder/nli-roberta-base')\", \"api_arguments\": [\"sentence1\", \"sentence2\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model='cross-encoder/nli-roberta-base')\\nsent = Apple just announced the newest iPhone X\\ncandidate_labels = [technology, sports, politics]\\nres = classifier(sent, candidate_labels)\\nprint(res)\", \"performance\": {\"dataset\": [\"SNLI\", \"MultiNLI\"], \"accuracy\": \"See SBERT.net - Pretrained Cross-Encoder\"}, \"description\": \"Cross-Encoder for Natural Language Inference trained on the SNLI and MultiNLI datasets. Outputs three scores corresponding to the labels: contradiction, entailment, neutral.\"}}", "category": "generic"}
{"question_id": 54, "text": " I want to build a chatbot that is used by language learners who want to communicate in French while they only know English. Generate a response for an English message.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-en-fr\", \"api_call\": \"translate('input_text', model='Helsinki-NLP/opus-mt-en-fr')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newsdiscussdev2015-enfr.en.fr\": 33.8, \"newsdiscusstest2015-enfr.en.fr\": 40.0, \"newssyscomb2009.en.fr\": 29.8, \"news-test2008.en.fr\": 27.5, \"newstest2009.en.fr\": 29.4, \"newstest2010.en.fr\": 32.7, \"newstest2011.en.fr\": 34.3, \"newstest2012.en.fr\": 31.8, \"newstest2013.en.fr\": 33.2, \"Tatoeba.en.fr\": 50.5}}}, \"description\": \"Helsinki-NLP/opus-mt-en-fr is a translation model that translates English text to French using the Hugging Face Transformers library. It is based on the OPUS dataset and uses a transformer-align architecture with normalization and SentencePiece pre-processing.\"}}", "category": "generic"}
{"question_id": 55, "text": " Translate the following text from French to English: \\u201cLe syst\\u00e8me \\u00e9ducatif fran\\u00e7ais est compos\\u00e9 d'\\u00e9coles maternelles, d'\\u00e9coles \\u00e9l\\u00e9mentaires, de coll\\u00e8ges et de lyc\\u00e9es.\\u201d\\n###Input: Le syst\\u00e8me \\u00e9ducatif fran\\u00e7ais est compos\\u00e9 d'\\u00e9coles maternelles, d'\\u00e9coles \\u00e9l\\u00e9mentaires, de coll\\u00e8ges et de lyc\\u00e9es.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-fr-en\", \"api_call\": \"pipeline('translation_fr_to_en', model='Helsinki-NLP/opus-mt-fr-en')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"translation_pipeline('Bonjour, comment \\u00e7a va?')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newsdiscussdev2015-enfr.fr.en\": 33.1, \"newsdiscusstest2015-enfr.fr.en\": 38.7, \"newssyscomb2009.fr.en\": 30.3, \"news-test2008.fr.en\": 26.2, \"newstest2009.fr.en\": 30.2, \"newstest2010.fr.en\": 32.2, \"newstest2011.fr.en\": 33.0, \"newstest2012.fr.en\": 32.8, \"newstest2013.fr.en\": 33.9, \"newstest2014-fren.fr.en\": 37.8, \"Tatoeba.fr.en\": 57.5}}}, \"description\": \"Helsinki-NLP/opus-mt-fr-en is a machine translation model trained to translate from French to English. It is based on the Marian NMT framework and trained on the OPUS dataset.\"}}", "category": "generic"}
{"question_id": 56, "text": " I want to translate a text from one language to another.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"facebook/nllb-200-distilled-600M\", \"api_call\": \"pipeline('translation_xx_to_yy', model='facebook/nllb-200-distilled-600M')\", \"api_arguments\": [\"model\", \"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline; translator = pipeline('translation_xx_to_yy', model='facebook/nllb-200-distilled-600M'); translator('Hello World')\", \"performance\": {\"dataset\": \"Flores-200\", \"accuracy\": \"BLEU, spBLEU, chrF++\"}, \"description\": \"NLLB-200 is a machine translation model primarily intended for research in machine translation, especially for low-resource languages. It allows for single sentence translation among 200 languages. The model was trained on general domain text data and is not intended to be used with domain specific texts, such as medical domain or legal domain. The model is not intended to be used for document translation.\"}}", "category": "generic"}
{"question_id": 57, "text": " Our team member has written a long article that needs to be published on a company blog. Can you provide a shorter summary to be used as a snippet on the landing page?\\n###Input: \\\"Apple Inc. reported its quarterly earnings results yesterday. The company posted a record-breaking revenue of $123.9 billion for the first quarter of 2022, up by 11% from the same period last year. The increase was fueled by stronger demand for iPhones, iPads, and Macs, as well as continued growth in its services segment. Apple's operating profit for the quarter came in at $38.3 billion, up 17% from a year earlier. The results surpassed analysts' expectations, who had anticipated revenue of around $118 billion. This strong performance is largely attributed to the successful launch of the iPhone 13, which has enjoyed robust sales since its debut in September. Apple CEO Tim Cook said in a statement, \\\"Our record-breaking quarter reflects the strength of our entire ecosystem, from our innovative products and services to the unmatched dedication of our teams around the world.\\\" Despite the ongoing global supply chain disruptions, Apple has managed to maintain its growth trajectory, thanks in part to its vertically integrated operations and nimble supply chain management. The company is expected to face stiffer competition going forward, particularly in the smartphone market, as rivals introduce new devices and increased pricing pressures.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Summarization\", \"api_name\": \"facebook/bart-large-cnn\", \"api_call\": \"pipeline('summarization', model='facebook/bart-large-cnn')\", \"api_arguments\": [\"ARTICLE\", \"max_length\", \"min_length\", \"do_sample\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline(summarization, model=facebook/bart-large-cnn)\\nARTICLE = ...\\nprint(summarizer(ARTICLE, max_length=130, min_length=30, do_sample=False))\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": {\"ROUGE-1\": 42.949, \"ROUGE-2\": 20.815, \"ROUGE-L\": 30.619, \"ROUGE-LSUM\": 40.038}}, \"description\": \"BART (large-sized model), fine-tuned on CNN Daily Mail. BART is a transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder. BART is pre-trained by (1) corrupting text with an arbitrary noising function, and (2) learning a model to reconstruct the original text. BART is particularly effective when fine-tuned for text generation (e.g. summarization, translation) but also works well for comprehension tasks (e.g. text classification, question answering). This particular checkpoint has been fine-tuned on CNN Daily Mail, a large collection of text-summary pairs.\"}}", "category": "generic"}
{"question_id": 58, "text": " Write a summary of a conference held by the World Health Organization discussing the impacts of climate change on human health.\\n###Input: Over the past week, the World Health Organization held a conference discussing the impacts of climate change on human health. The conference brought together leading experts from around the world to examine the current problems affecting people's health due to changing environmental conditions. The topics of discussion included increased occurrence of heat-related illnesses, heightened rates of vector-borne diseases, and the growing problem of air pollution. The conference concluded with a call to action for governments and organizations to invest in mitigating and adapting to the negative consequences of climate change for the sake of public health.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"google/pegasus-xsum\", \"api_call\": \"pipeline('summarization', model='google/pegasus-xsum')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": [{\"name\": \"xsum\", \"accuracy\": {\"ROUGE-1\": 46.862, \"ROUGE-2\": 24.453, \"ROUGE-L\": 39.055, \"ROUGE-LSUM\": 39.099}}, {\"name\": \"cnn_dailymail\", \"accuracy\": {\"ROUGE-1\": 22.206, \"ROUGE-2\": 7.67, \"ROUGE-L\": 15.405, \"ROUGE-LSUM\": 19.218}}, {\"name\": \"samsum\", \"accuracy\": {\"ROUGE-1\": 21.81, \"ROUGE-2\": 4.253, \"ROUGE-L\": 17.447, \"ROUGE-LSUM\": 18.891}}]}, \"description\": \"PEGASUS is a pre-trained model for abstractive summarization, developed by Google. It is based on the Transformer architecture and trained on both C4 and HugeNews datasets. The model is designed to extract gap sentences and generate summaries by stochastically sampling important sentences.\"}}", "category": "generic"}
{"question_id": 59, "text": " Please provide a brief overview of a news article.\\n###Input: A new study suggests that eating chocolate at least once a week can lead to better cognition. The study, published in the journal Appetite, analyzed data from over 900 adults and found that individuals who consumed chocolate at least once a week performed better on cognitive tests than those who consumed chocolate less frequently. Researchers believe that the beneficial effects of chocolate on cognition may be due to the presence of flavonoids, which have been shown to be antioxidant-rich and to improve brain blood flow.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"google/pegasus-cnn_dailymail\", \"api_call\": \"PegasusForConditionalGeneration.from_pretrained('google/pegasus-cnn_dailymail')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import PegasusForConditionalGeneration, PegasusTokenizer\\nmodel_name = 'google/pegasus-cnn_dailymail'\\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name)\\ninputs = tokenizer.encode('input_text', return_tensors='pt')\\nsummary_ids = model.generate(inputs)\\nsummary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": \"44.16/21.56/41.30\"}, \"description\": \"PEGASUS model for abstractive summarization, pretrained on the CNN/DailyMail dataset.\"}}", "category": "generic"}
{"question_id": 60, "text": " I developed a document generation app, I need to create a summary of a long article given as input to provide to my users before they read the full article.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"google/bigbird-pegasus-large-bigpatent\", \"api_call\": \"BigBirdPegasusForConditionalGeneration.from_pretrained('google/bigbird-pegasus-large-bigpatent')\", \"api_arguments\": {\"attention_type\": \"original_full\", \"block_size\": 16, \"num_random_blocks\": 2}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import BigBirdPegasusForConditionalGeneration, AutoTokenizer\\ntokenizer = AutoTokenizer.from_pretrained(google/bigbird-pegasus-large-bigpatent)\\nmodel = BigBirdPegasusForConditionalGeneration.from_pretrained(google/bigbird-pegasus-large-bigpatent)\\ntext = Replace me by any text you'd like.\\ninputs = tokenizer(text, return_tensors='pt')\\nprediction = model.generate(**inputs)\\nprediction = tokenizer.batch_decode(prediction)\", \"performance\": {\"dataset\": \"big_patent\", \"accuracy\": \"Not provided\"}, \"description\": \"BigBird, a sparse-attention based transformer, extends Transformer-based models like BERT to much longer sequences. It can handle sequences up to a length of 4096 at a much lower compute cost compared to BERT. BigBird has achieved state-of-the-art results on various tasks involving very long sequences such as long documents summarization and question-answering with long contexts.\"}}", "category": "generic"}
{"question_id": 61, "text": " We need a quick summary of a news article we found online. Can you help us with that?\\n###Input: Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said. The policy includes the termination of accounts of anti-vaccine influencers. Tech giants have been criticised for not doing more to counter false health information on their sites. In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue. YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines. In a blog post, the company said it had seen false claims about Covid jabs spill over into misinformation about vaccines in general. The new policy covers long-approved vaccines, such as those against measles or hepatitis B. We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO, the post said, referring to the World Health Organization.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"csebuetnlp/mT5_multilingual_XLSum\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('csebuetnlp/mT5_multilingual_XLSum')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers==4.11.0.dev0\"], \"example_code\": \"import re\\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nWHITESPACE_HANDLER = lambda k: re.sub('\\\\s+', ' ', re.sub('\\\\n+', ' ', k.strip()))\\narticle_text = Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said. The policy includes the termination of accounts of anti-vaccine influencers. Tech giants have been criticised for not doing more to counter false health information on their sites. In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue. YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines. In a blog post, the company said it had seen false claims about Covid jabs spill over into misinformation about vaccines in general. The new policy covers long-approved vaccines, such as those against measles or hepatitis B. We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO, the post said, referring to the World Health Organization.\\nmodel_name = csebuetnlp/mT5_multilingual_XLSum\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\\ninput_ids = tokenizer(\\n [WHITESPACE_HANDLER(article_text)],\\n return_tensors=pt,\\n padding=max_length,\\n truncation=True,\\n max_length=512\\n)[input_ids]\\noutput_ids = model.generate(\\n input_ids=input_ids,\\n max_length=84,\\n no_repeat_ngram_size=2,\\n num_beams=4\\n)[0]\\nsummary = tokenizer.decode(\\n output_ids,\\n skip_special_tokens=True,\\n clean_up_tokenization_spaces=False\\n)\\nprint(summary)\", \"performance\": {\"dataset\": \"xsum\", \"accuracy\": {\"ROUGE-1\": 36.5, \"ROUGE-2\": 13.934, \"ROUGE-L\": 28.988, \"ROUGE-LSUM\": 28.996, \"loss\": 2.067, \"gen_len\": 26.973}}, \"description\": \"This repository contains the mT5 checkpoint finetuned on the 45 languages of XL-Sum dataset. It is a multilingual abstractive summarization model that supports text-to-text generation for 43 languages.\"}}", "category": "generic"}
{"question_id": 62, "text": " We'd like our chatbot to act as a fictional character for engaging with our users.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"pygmalion-6b\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('waifu-workshop/pygmalion-6b')\", \"api_arguments\": [\"input_ids\", \"max_length\", \"num_return_sequences\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForCausalLM\\ntokenizer = AutoTokenizer.from_pretrained('waifu-workshop/pygmalion-6b')\\nmodel = AutoModelForCausalLM.from_pretrained('waifu-workshop/pygmalion-6b')\\ninput_text = [CHARACTER]'s Persona: [A few sentences about the character you want the model to play]\\\\n<START>\\\\n[DIALOGUE HISTORY]\\\\nYou: [Your input message here]\\\\n[CHARACTER]:\\ninput_ids = tokenizer.encode(input_text, return_tensors='pt')\\noutput = model.generate(input_ids, max_length=100, num_return_sequences=1)\\noutput_text = tokenizer.decode(output[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"56MB of dialogue data gathered from multiple sources\", \"accuracy\": \"Not specified\"}, \"description\": \"Pygmalion 6B is a proof-of-concept dialogue model based on EleutherAI's GPT-J-6B. It is fine-tuned on 56MB of dialogue data gathered from multiple sources, which includes both real and partially machine-generated conversations. The model is intended for conversational text generation and can be used to play a character in a dialogue.\"}}", "category": "generic"}
{"question_id": 63, "text": " Write a story about a spaceship journey to a distant planet in search of a new home for humanity.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"EleutherAI/gpt-j-6B\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('EleutherAI/gpt-j-6B')\", \"api_arguments\": {\"pretrained_model\": \"EleutherAI/gpt-j-6B\"}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModelForCausalLM\"}, \"example_code\": {\"loading_model\": \"from transformers import AutoTokenizer, AutoModelForCausalLM\\ntokenizer = AutoTokenizer.from_pretrained(EleutherAI/gpt-j-6B)\\nmodel = AutoModelForCausalLM.from_pretrained(EleutherAI/gpt-j-6B)\"}, \"performance\": {\"dataset\": \"the_pile\", \"accuracy\": {\"LAMBADA_PPL\": 3.99, \"LAMBADA_Acc\": \"69.7%\", \"Winogrande\": \"65.3%\", \"Hellaswag\": \"66.1%\", \"PIQA\": \"76.5%\"}}, \"description\": \"GPT-J 6B is a transformer model trained using Ben Wang's Mesh Transformer JAX. It consists of 28 layers with a model dimension of 4096, and a feedforward dimension of 16384. The model dimension is split into 16 heads, each with a dimension of 256. Rotary Position Embedding (RoPE) is applied to 64 dimensions of each head. The model is trained with a tokenization vocabulary of 50257, using the same set of BPEs as GPT-2/GPT-3. GPT-J 6B was trained on the Pile, a large-scale curated dataset created by EleutherAI.\"}}", "category": "generic"}
{"question_id": 64, "text": " I want to write a story about a brave knight and a dragon but I'm unable to come up with a good start. Help me with that.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"sshleifer/tiny-gpt2\", \"api_call\": \"TinyGPT2LMHeadModel.from_pretrained('sshleifer/tiny-gpt2')\", \"api_arguments\": {\"model\": \"sshleifer/tiny-gpt2\"}, \"python_environment_requirements\": {\"huggingface_transformers\": \">=4.0.0\"}, \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('text-generation', model='sshleifer/tiny-gpt2')\\nresult = nlp('Once upon a time')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"A tiny GPT-2 model for text generation, suitable for low-resource environments and faster inference. This model is part of the Hugging Face Transformers library and can be used for generating text given a prompt.\"}}", "category": "generic"}
{"question_id": 65, "text": " I need a text analysis tool that can automatically predict the most plausible missing text in a given sentence.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"albert-base-v2\", \"api_call\": \"pipeline('fill-mask', model='albert-base-v2')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='albert-base-v2')\\nunmasker(Hello I'm a [MASK] model.)\", \"performance\": {\"dataset\": {\"SQuAD1.1\": \"90.2/83.2\", \"SQuAD2.0\": \"82.1/79.3\", \"MNLI\": \"84.6\", \"SST-2\": \"92.9\", \"RACE\": \"66.8\"}, \"accuracy\": \"82.3\"}, \"description\": \"ALBERT Base v2 is a transformers model pretrained on a large corpus of English data in a self-supervised fashion using a masked language modeling (MLM) objective. It was introduced in this paper and first released in this repository. This model, as all ALBERT models, is uncased: it does not make a difference between english and English.\"}}", "category": "generic"}
{"question_id": 66, "text": " Help me fill in the blanks in the following Chinese sentence: \\\"\\u4e0a\\u6d77\\u662f\\u4e2d\\u56fd\\u7684[MASK]\\u5927\\u57ce\\u5e02\\u3002\\\"\\n###Input: \\u4e0a\\u6d77\\u662f\\u4e2d\\u56fd\\u7684[MASK]\\u5927\\u57ce\\u5e02\\u3002\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"uer/albert-base-chinese-cluecorpussmall\", \"api_call\": \"AlbertForMaskedLM.from_pretrained('uer/albert-base-chinese-cluecorpussmall')\", \"api_arguments\": [\"model\", \"tokenizer\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import BertTokenizer, AlbertForMaskedLM, FillMaskPipeline\\ntokenizer = BertTokenizer.from_pretrained(uer/albert-base-chinese-cluecorpussmall)\\nmodel = AlbertForMaskedLM.from_pretrained(uer/albert-base-chinese-cluecorpussmall)\\nunmasker = FillMaskPipeline(model, tokenizer)\\nunmasker(\\u4e2d\\u56fd\\u7684\\u9996\\u90fd\\u662f[MASK]\\u4eac\\u3002)\", \"performance\": {\"dataset\": \"CLUECorpusSmall\", \"accuracy\": \"Not provided\"}, \"description\": \"This is the set of Chinese ALBERT models pre-trained by UER-py on the CLUECorpusSmall dataset. The model can be used for tasks like text generation and feature extraction.\"}}", "category": "generic"}
{"question_id": 67, "text": " We are building a source code autocompletion tool which will complete the code snippet containing a masked token.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling Prediction\", \"api_name\": \"CodeBERTa-small-v1\", \"api_call\": \"pipeline('fill-mask', model='huggingface/CodeBERTa-small-v1')\", \"api_arguments\": [\"task\", \"model\", \"tokenizer\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"fill_mask(PHP_CODE)\", \"performance\": {\"dataset\": \"code_search_net\", \"accuracy\": null}, \"description\": \"CodeBERTa is a RoBERTa-like model trained on the CodeSearchNet dataset from GitHub. It supports languages like Go, Java, JavaScript, PHP, Python, and Ruby. The tokenizer is a Byte-level BPE tokenizer trained on the corpus using Hugging Face tokenizers. The small model is a 6-layer, 84M parameters, RoBERTa-like Transformer model.\"}}", "category": "generic"}
{"question_id": 68, "text": " I work for a Japanese company, and my manager needs me to take a look at a request from a client. I can understand fluent Japanese, but I need a little help filling in missing words from the text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"cl-tohoku/bert-base-japanese\", \"api_call\": \"AutoModelForMaskedLM.from_pretrained('cl-tohoku/bert-base-japanese')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"fill_mask('[MASK]')\", \"performance\": {\"dataset\": \"wikipedia\", \"accuracy\": \"N/A\"}, \"description\": \"This is a BERT model pretrained on texts in the Japanese language. This version of the model processes input texts with word-level tokenization based on the IPA dictionary, followed by the WordPiece subword tokenization.\"}}", "category": "generic"}
{"question_id": 69, "text": " We are building a platform to compare and contrast user input sentences with existing sentences in our database. It should return similar results.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/paraphrase-distilroberta-base-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-distilroberta-base-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-distilroberta-base-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Automated evaluation\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 70, "text": " I need a method to compare the similarity between two sentences to be used within a meme generator, so we can produce a meme with a similar caption.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-MiniLM-L3-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L3-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L3-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"snli, multi_nli, ms_marco\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 71, "text": " A student is writing a research paper and needs help with finding similar articles in order to include them in the literature review section.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/nli-mpnet-base-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/nli-mpnet-base-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/nli-mpnet-base-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Automated evaluation\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 72, "text": " Create a solution to convert a given Japanese sentence into a speech audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_jvs_tts_finetune_jvs001_jsut_vits_raw_phn_jaconv_pyopenjta-truncated-178804\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('espnet/kan-bayashi_jvs_tts_finetune_jvs001_jsut_vits_raw_phn_jaconv_pyopenjta-truncated-178804')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Japanese text-to-speech model trained using the ESPnet framework. It is designed to convert text input into natural-sounding speech.\"}}", "category": "generic"}
{"question_id": 73, "text": " We are working on a transcription service for our customers. We need a way to convert audio files into text.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Recognition\", \"api_name\": \"jonatasgrosman/wav2vec2-large-xlsr-53-english\", \"api_call\": \"Wav2Vec2Model.from_pretrained('jonatasgrosman/wav2vec2-large-xlsr-53-english')\", \"api_arguments\": [\"audio_paths\"], \"python_environment_requirements\": [\"huggingsound\", \"torch\", \"librosa\", \"datasets\", \"transformers\"], \"example_code\": \"from huggingsound import SpeechRecognitionModel\\nmodel = SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-english')\\naudio_paths = ['/path/to/file.mp3', '/path/to/another_file.wav']\\ntranscriptions = model.transcribe(audio_paths)\", \"performance\": {\"dataset\": \"mozilla-foundation/common_voice_6_0\", \"accuracy\": {\"Test WER\": 19.06, \"Test CER\": 7.69, \"Test WER (+LM)\": 14.81, \"Test CER (+LM)\": 6.84}}, \"description\": \"Fine-tuned facebook/wav2vec2-large-xlsr-53 on English using the train and validation splits of Common Voice 6.1. When using this model, make sure that your speech input is sampled at 16kHz.\"}}", "category": "generic"}
{"question_id": 74, "text": " We are creating an online video conference service, and we need to detect when two or more speakers are speaking at the same time in the audio.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"pyannote.audio\", \"functionality\": \"overlapped-speech-detection\", \"api_name\": \"pyannote/overlapped-speech-detection\", \"api_call\": \"pipeline.from_pretrained('pyannote/overlapped-speech-detection', use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": [\"audio.wav\"], \"python_environment_requirements\": [\"pyannote.audio 2.1\"], \"example_code\": \"from pyannote.audio import Pipeline\\npipeline = Pipeline.from_pretrained(pyannote/overlapped-speech-detection, use_auth_token=ACCESS_TOKEN_GOES_HERE)\\noutput = pipeline(audio.wav)\\nfor speech in output.get_timeline().support():\\n  # two or more speakers are active between speech.start and speech.end\\n  ...\", \"performance\": {\"dataset\": \"ami\", \"accuracy\": null}, \"description\": \"Automatic overlapped speech detection using pyannote.audio framework. The model detects when two or more speakers are active in an audio file.\"}}", "category": "generic"}
{"question_id": 75, "text": " Our company develops smart speaker devices that involve interaction with the user. We need to transcribe the input from the users with the maintained accent or language.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription and Translation\", \"api_name\": \"openai/whisper-tiny\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')\", \"api_arguments\": {\"forced_decoder_ids\": \"WhisperProcessor.get_decoder_prompt_ids(language='english', task='transcribe')\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained('openai/whisper-tiny')\", \"model = WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny')\", \"model.config.forced_decoder_ids = None\", \"ds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')\", \"sample = ds[0]['audio']\", \"input_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean)\", \"accuracy\": 7.54}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning. It is a Transformer-based encoder-decoder model that can be used for transcription and translation tasks.\"}}", "category": "generic"}
{"question_id": 76, "text": " One of our clients is facing noise issues on their audio recordings. Can you help them to remove the noise from the audio?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"speech-enhancement\", \"api_name\": \"speechbrain/metricgan-plus-voicebank\", \"api_call\": \"SpectralMaskEnhancement.from_hparams(source='speechbrain/metricgan-plus-voicebank', savedir='pretrained_models/metricgan-plus-voicebank')\", \"api_arguments\": {\"source\": \"speechbrain/metricgan-plus-voicebank\", \"savedir\": \"pretrained_models/metricgan-plus-voicebank\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"import torch\\nimport torchaudio\\nfrom speechbrain.pretrained import SpectralMaskEnhancement\\nenhance_model = SpectralMaskEnhancement.from_hparams(\\n source='speechbrain/metricgan-plus-voicebank',\\n savedir='pretrained_models/metricgan-plus-voicebank',\\n)\\nnoisy = enhance_model.load_audio(\\n 'speechbrain/metricgan-plus-voicebank/example.wav'\\n).unsqueeze(0)\\nenhanced = enhance_model.enhance_batch(noisy, lengths=torch.tensor([1.]))\\ntorchaudio.save('enhanced.wav', enhanced.cpu(), 16000)\", \"performance\": {\"dataset\": \"Voicebank\", \"accuracy\": {\"Test PESQ\": \"3.15\", \"Test STOI\": \"93.0\"}}, \"description\": \"MetricGAN-trained model for Enhancement\"}}", "category": "generic"}
{"question_id": 77, "text": " We are a media company and we have a large volume of Chinese language audio files. We want to transcribe the audios into chinese text.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Recognition\", \"api_name\": \"jonatasgrosman/wav2vec2-large-xlsr-53-chinese-zh-cn\", \"api_call\": \"Wav2Vec2Model.from_pretrained('jonatasgrosman/wav2vec2-large-xlsr-53-chinese-zh-cn')\", \"api_arguments\": [\"audio_paths\"], \"python_environment_requirements\": [\"huggingsound\", \"torch\", \"librosa\", \"datasets\", \"transformers\"], \"example_code\": \"from huggingsound import SpeechRecognitionModel\\nmodel = SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-chinese-zh-cn')\\naudio_paths = ['/path/to/file.mp3', '/path/to/another_file.wav']\\ntranscriptions = model.transcribe(audio_paths)\", \"performance\": {\"dataset\": \"Common Voice zh-CN\", \"accuracy\": {\"WER\": 82.37, \"CER\": 19.03}}, \"description\": \"Fine-tuned XLSR-53 large model for speech recognition in Chinese. Fine-tuned facebook/wav2vec2-large-xlsr-53 on Chinese using the train and validation splits of Common Voice 6.1, CSS10 and ST-CMDS.\"}}", "category": "generic"}
{"question_id": 78, "text": " Help us improve the listener experience from our customers by enhancing the audio of noisy recordings.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"speechbrain/sepformer-whamr-enhancement\", \"api_call\": \"separator.from_hparams(source='speechbrain/sepformer-whamr-enhancement', savedir='pretrained_models/sepformer-whamr-enhancement')\", \"api_arguments\": {\"path\": \"Path to the input audio file.\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"from speechbrain.pretrained import SepformerSeparation as separator\\nimport torchaudio\\nmodel = separator.from_hparams(source=speechbrain/sepformer-whamr-enhancement, savedir='pretrained_models/sepformer-whamr-enhancement')\\nest_sources = model.separate_file(path='speechbrain/sepformer-whamr-enhancement/example_whamr.wav')\\ntorchaudio.save(enhanced_whamr.wav, est_sources[:, :, 0].detach().cpu(), 8000)\", \"performance\": {\"dataset\": \"WHAMR!\", \"accuracy\": \"10.59 dB SI-SNR\"}, \"description\": \"This repository provides all the necessary tools to perform speech enhancement (denoising + dereverberation) with a SepFormer model, implemented with SpeechBrain, and pretrained on WHAMR! dataset with 8k sampling frequency, which is basically a version of WSJ0-Mix dataset with environmental noise and reverberation in 8k.\"}}", "category": "generic"}
{"question_id": 79, "text": " Our company is working on a project to automatically translate spoken English audio to spoken Hokkien audio. We need a speech-to-speech translation model.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"xm_transformer_s2ut_en-hk\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')\", \"api_arguments\": {\"arg_overrides\": {\"config_yaml\": \"config.yaml\", \"task\": \"speech_to_text\"}, \"cache_dir\": \"cache_dir\"}, \"python_environment_requirements\": [\"fairseq\", \"huggingface_hub\", \"torchaudio\"], \"example_code\": {\"import_modules\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\"], \"load_model\": [\"cache_dir = os.getenv('HUGGINGFACE_HUB_CACHE')\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk', arg_overrides={'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, cache_dir=cache_dir)\", \"model = models[0].cpu()\", \"cfg['task'].cpu = True\"], \"generate_prediction\": [\"generator = task.build_generator([model], cfg)\", \"audio, _ = torchaudio.load('/path/to/an/audio/file')\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\"], \"speech_synthesis\": [\"library_name = 'fairseq'\", \"cache_dir = (cache_dir or (Path.home() / '.cache' / library_name).as_posix())\", \"cache_dir = snapshot_download('facebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS', cache_dir=cache_dir, library_name=library_name)\", \"x = hub_utils.from_pretrained(cache_dir, 'model.pt', '.', archive_map=CodeHiFiGANVocoder.hub_models(), config_yaml='config.json', fp16=False, is_vocoder=True)\", \"with open(f'{x['args']['data']}/config.json') as f:\", \"  vocoder_cfg = json.load(f)\", \"assert (len(x['args']['model_path']) == 1), 'Too many vocoder models in the input'\", \"vocoder = CodeHiFiGANVocoder(x['args']['model_path'][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"]}, \"performance\": {\"dataset\": \"MuST-C\", \"accuracy\": \"Not specified\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq: English-Hokkien. Trained with supervised data in TED domain, and weakly supervised data in TED and Audiobook domain.\"}}", "category": "generic"}
{"question_id": 80, "text": " We are a startup developing voice assistants. We need a keyword spotting system that can recognize user commands.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/hubert-base-superb-ks\", \"api_call\": \"pipeline('audio-classification', model='superb/hubert-base-superb-ks')\", \"api_arguments\": [\"file\", \"top_k\"], \"python_environment_requirements\": [\"datasets\", \"transformers\", \"torchaudio\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, ks, split=test)\\nclassifier = pipeline(audio-classification, model=superb/hubert-base-superb-ks)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"Speech Commands dataset v1.0\", \"accuracy\": 0.9672}, \"description\": \"This is a ported version of S3PRL's Hubert for the SUPERB Keyword Spotting task. The base model is hubert-base-ls960, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 81, "text": " The model needs to have speech recognition capability to identify languages in a given audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Language Identification\", \"api_name\": \"sanchit-gandhi/whisper-medium-fleurs-lang-id\", \"api_call\": \"AutoModelForSpeechClassification.from_pretrained('sanchit-gandhi/whisper-medium-fleurs-lang-id')\", \"api_arguments\": [\"model = AutoModelForSpeechClassification.from_pretrained('sanchit-gandhi/whisper-medium-fleurs-lang-id')\", \"processor = Wav2Vec2Processor.from_pretrained('sanchit-gandhi/whisper-medium-fleurs-lang-id')\"], \"python_environment_requirements\": [\"transformers==4.27.0.dev0\", \"pytorch==1.13.1\", \"datasets==2.9.0\", \"tokenizers==0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"google/xtreme_s\", \"accuracy\": 0.8805}, \"description\": \"This model is a fine-tuned version of openai/whisper-medium on the FLEURS subset of the google/xtreme_s dataset. It is used for language identification in audio classification tasks.\"}}", "category": "generic"}
{"question_id": 82, "text": " I have just recorded a meeting, I want to find the best segments from the audio where people are speaking, and construct a summary.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face\", \"functionality\": \"Voice Activity Detection\", \"api_name\": \"Eklavya/ZFF_VAD\", \"api_call\": \"pipeline('voice-activity-detection', model='Eklavya/ZFF_VAD')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"A Voice Activity Detection model by Eklavya, using the Hugging Face framework.\"}}", "category": "generic"}
{"question_id": 83, "text": " I am running a wine store, and I am looking for a machine learning model that can help me classify the quality of wine based on some given features.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Scikit-learn\", \"functionality\": \"Wine Quality classification\", \"api_name\": \"osanseviero/wine-quality\", \"api_call\": \"joblib.load(cached_download(hf_hub_url('julien-c/wine-quality', 'sklearn_model.joblib')))\", \"api_arguments\": \"X\", \"python_environment_requirements\": [\"huggingface_hub\", \"joblib\", \"pandas\"], \"example_code\": \"from huggingface_hub import hf_hub_url, cached_download\\nimport joblib\\nimport pandas as pd\\nREPO_ID = julien-c/wine-quality\\nFILENAME = sklearn_model.joblib\\nmodel = joblib.load(cached_download(\\n hf_hub_url(REPO_ID, FILENAME)\\n))\\ndata_file = cached_download(\\n hf_hub_url(REPO_ID, winequality-red.csv)\\n)\\nwinedf = pd.read_csv(data_file, sep=;)\\nX = winedf.drop([quality], axis=1)\\nY = winedf[quality]\\nprint(X[:3])\\nlabels = model.predict(X[:3])\", \"performance\": {\"dataset\": \"winequality-red.csv\", \"accuracy\": 0.6616635397123202}, \"description\": \"A Simple Example of Scikit-learn Pipeline for Wine Quality classification. Inspired by https://towardsdatascience.com/a-simple-example-of-pipeline-in-machine-learning-with-scikit-learn-e726ffbb6976 by Saptashwa Bhattacharyya.\"}}", "category": "generic"}
{"question_id": 84, "text": " Build a simple application to predict the survival status of passengers on the Titanic based on their age, gender, and passenger class.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Binary Classification\", \"api_name\": \"harithapliyal/autotrain-tatanic-survival-51030121311\", \"api_call\": \"AutoModel.from_pretrained('harithapliyal/autotrain-tatanic-survival-51030121311')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"harithapliyal/autotrain-data-tatanic-survival\", \"accuracy\": 0.872}, \"description\": \"A tabular classification model trained on the Titanic survival dataset using Hugging Face AutoTrain. The model predicts whether a passenger survived or not based on features such as age, gender, and passenger class.\"}}", "category": "generic"}
{"question_id": 85, "text": " I need to estimate CO2 emissions from vehicles based on their characteristics, such as engine size, transmission type, and miles traveled.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Tabular Classification\", \"api_name\": \"datadmg/autotrain-test-news-44534112235\", \"api_call\": \"AutoModel.from_pretrained('datadmg/autotrain-test-news-44534112235')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"datadmg/autotrain-data-test-news\", \"accuracy\": 0.333}, \"description\": \"This model is trained for Multi-class Classification on CO2 Emissions dataset. It uses the Hugging Face Transformers framework and is based on the extra_trees algorithm. The model is trained with AutoTrain and has a tabular classification functionality.\"}}", "category": "generic"}
{"question_id": 86, "text": " We have been asked to predict future criminal re-offense from a given dataset. What model should we adopt and how do we proceed?\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Scikit-learn\", \"functionality\": \"Classification\", \"api_name\": \"imodels/figs-compas-recidivism\", \"api_call\": \"joblib.load(cached_download(hf_hub_url('imodels/figs-compas-recidivism', 'sklearn_model.joblib')))\", \"api_arguments\": [\"REPO_ID\", \"FILENAME\"], \"python_environment_requirements\": [\"joblib\", \"huggingface_hub\", \"pandas\", \"numpy\", \"datasets\", \"imodels\", \"sklearn.model_selection\"], \"example_code\": \"from huggingface_hub import hf_hub_url, cached_download\\nimport joblib\\nimport pandas as pd\\nREPO_ID = imodels/figs-compas-recidivism\\nFILENAME = sklearn_model.joblib\\nmodel = joblib.load(cached_download(\\n hf_hub_url(REPO_ID, FILENAME)\\n))\\npreds = model.predict(X_test)\\nprint('accuracy', np.mean(preds==y_test))\", \"performance\": {\"dataset\": \"imodels/compas-recidivism\", \"accuracy\": 0.6759165485112416}, \"description\": \"A tabular classification model for predicting recidivism using the COMPAS dataset. The model is an imodels.FIGSClassifier trained with Scikit-learn and can be used with the Hugging Face Inference API.\"}}", "category": "generic"}
{"question_id": 87, "text": " Our company's goal is to predict carbon emissions based on the given features of the compound.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Hugging Face\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"kochetkovIT/autotrain-ironhack-49741119788\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"kochetkovIT/autotrain-data-ironhack\", \"accuracy\": {\"Loss\": 2.603, \"R2\": 0.013, \"MSE\": 6.776, \"MAE\": 1.666, \"RMSLE\": 0.502}}, \"description\": \"A tabular regression model trained using AutoTrain to predict carbon emissions (in grams) with an R2 score of 0.013.\"}}", "category": "generic"}
{"question_id": 88, "text": " The factory wants to make its production process more eco-friendly. Calculate the carbon emissions for given data.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"al02783013/autotrain-faseiii_diciembre-2311773112\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\", \"json\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"al02783013/autotrain-data-faseiii_diciembre\", \"accuracy\": {\"Loss\": 5487.957, \"R2\": 0.96, \"MSE\": 30117668.0, \"MAE\": 2082.499, \"RMSLE\": 1.918}}, \"description\": \"A tabular regression model trained using AutoTrain to predict carbon emissions based on input features.\"}}", "category": "generic"}
{"question_id": 89, "text": " We want to predict the carbon emissions of a new line of electric vehicles for an annual report. Automate the process of loading a regression model, then calculate the forecast of emissions for this year.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"Robertooo/autotrain-hmaet-2037366891\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"Robertooo/autotrain-data-hmaet\", \"accuracy\": {\"Loss\": 0.067, \"R2\": 0.486, \"MSE\": 0.005, \"MAE\": 0.055, \"RMSLE\": 0.036}}, \"description\": \"A tabular regression model trained with AutoTrain to predict carbon emissions.\"}}", "category": "generic"}
{"question_id": 90, "text": " We are planning to launch a website which provides tips to people for their daily lives. Can you please build a model to predict the appropriate amount of tips?\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Scikit-learn\", \"functionality\": \"baseline-trainer\", \"api_name\": \"merve/tips9y0jvt5q-tip-regression\", \"api_call\": \"pipeline('tabular-regression', model='merve/tips9y0jvt5q-tip-regression')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"dabl\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"tips9y0jvt5q\", \"accuracy\": {\"r2\": 0.41524, \"neg_mean_squared_error\": -1.098792}}, \"description\": \"Baseline Model trained on tips9y0jvt5q to apply regression on tip. The model uses Ridge(alpha=10) and is trained with dabl library as a baseline. For better results, use AutoTrain.\"}}", "category": "generic"}
{"question_id": 91, "text": " We have a robotic arm in our warehouse that needs to be trained to optimize loading and unloading tasks. The robotic arm is based on the CartPole environment.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"deep-reinforcement-learning\", \"api_name\": \"ppo-seals-CartPole-v0\", \"api_call\": \"load_from_hub(repo_id='HumanCompatibleAI/ppo-seals-CartPole-v0',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"rl_zoo3\", \"stable-baselines3\", \"stable-baselines3-contrib\"], \"example_code\": \"python -m rl_zoo3.load_from_hub --algo ppo --env seals/CartPole-v0 -orga HumanCompatibleAI -f logs/\", \"performance\": {\"dataset\": \"seals/CartPole-v0\", \"accuracy\": \"500.00 +/- 0.00\"}, \"description\": \"This is a trained model of a PPO agent playing seals/CartPole-v0 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 92, "text": " There is an upcoming event called \\\"Space Party\\\" and we need a representative image for the event. Can you assist us in creating an image containing a party in space with astronauts and aliens having fun together?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Generation\", \"api_name\": \"stabilityai/stable-diffusion-2-1\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('stabilityai/stable-diffusion-2-1', torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"a photo of an astronaut riding a horse on mars\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"scipy\", \"safetensors\"], \"example_code\": \"from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\\nmodel_id = stabilityai/stable-diffusion-2-1\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe = pipe.to(cuda)\\nprompt = a photo of an astronaut riding a horse on mars\\nimage = pipe(prompt).images[0]\\nimage.save(astronaut_rides_horse.png)\", \"performance\": {\"dataset\": \"COCO2017\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion v2-1 is a diffusion-based text-to-image generation model developed by Robin Rombach and Patrick Esser. It is capable of generating and modifying images based on text prompts in English. The model is trained on a subset of the LAION-5B dataset and is primarily intended for research purposes.\"}}", "category": "generic"}
{"question_id": 93, "text": " We're creating a promotional image for a wildlife-themed event. We need to display two tigers in a natural setting.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Generate and modify images based on text prompts\", \"api_name\": \"stabilityai/stable-diffusion-2-depth\", \"api_call\": \"StableDiffusionDepth2ImgPipeline.from_pretrained('stabilityai/stable-diffusion-2-depth', torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"Text prompt to generate image\", \"image\": \"Initial image (optional)\", \"negative_prompt\": \"Negative text prompt to avoid certain features\", \"strength\": \"Strength of the prompt effect on the generated image\"}, \"python_environment_requirements\": [\"pip install -U git+https://github.com/huggingface/transformers.git\", \"pip install diffusers transformers accelerate scipy safetensors\"], \"example_code\": \"import torch\\nimport requests\\nfrom PIL import Image\\nfrom diffusers import StableDiffusionDepth2ImgPipeline\\npipe = StableDiffusionDepth2ImgPipeline.from_pretrained(\\n stabilityai/stable-diffusion-2-depth,\\n torch_dtype=torch.float16,\\n).to(cuda)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\ninit_image = Image.open(requests.get(url, stream=True).raw)\\nprompt = two tigers\\nn_propmt = bad, deformed, ugly, bad anotomy\\nimage = pipe(prompt=prompt, image=init_image, negative_prompt=n_propmt, strength=0.7).images[0]\", \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion v2 is a latent diffusion model that generates and modifies images based on text prompts. It uses a fixed, pretrained text encoder (OpenCLIP-ViT/H) and is developed by Robin Rombach and Patrick Esser. The model works with English language prompts and is intended for research purposes only.\"}}", "category": "generic"}
{"question_id": 94, "text": " We have a collection of low-resolution images of movie characters, and we need to upscale those images to get a more detailed high-resolution image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image Upscaling\", \"api_name\": \"stabilityai/sd-x2-latent-upscaler\", \"api_call\": \"StableDiffusionLatentUpscalePipeline.from_pretrained(stabilityai/sd-x2-latent-upscaler, torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"text prompt\", \"image\": \"low resolution latents\", \"num_inference_steps\": 20, \"guidance_scale\": 0, \"generator\": \"torch generator\"}, \"python_environment_requirements\": [\"git+https://github.com/huggingface/diffusers.git\", \"transformers\", \"accelerate\", \"scipy\", \"safetensors\"], \"example_code\": \"from diffusers import StableDiffusionLatentUpscalePipeline, StableDiffusionPipeline\\nimport torch\\npipeline = StableDiffusionPipeline.from_pretrained(CompVis/stable-diffusion-v1-4, torch_dtype=torch.float16)\\npipeline.to(cuda)\\nupscaler = StableDiffusionLatentUpscalePipeline.from_pretrained(stabilityai/sd-x2-latent-upscaler, torch_dtype=torch.float16)\\nupscaler.to(cuda)\\nprompt = a photo of an astronaut high resolution, unreal engine, ultra realistic\\ngenerator = torch.manual_seed(33)\\nlow_res_latents = pipeline(prompt, generator=generator, output_type=latent).images\\nupscaled_image = upscaler(prompt=prompt, image=low_res_latents, num_inference_steps=20, guidance_scale=0, generator=generator).images[0]\\nupscaled_image.save(astronaut_1024.png)\", \"performance\": {\"dataset\": \"LAION-2B\", \"accuracy\": \"Not specified\"}, \"description\": \"Stable Diffusion x2 latent upscaler is a diffusion-based upscaler model developed by Katherine Crowson in collaboration with Stability AI. It is designed to upscale Stable Diffusion's latent denoised image embeddings, allowing for fast text-to-image and upscaling pipelines. The model was trained on a high-resolution subset of the LAION-2B dataset and works with all Stable Diffusion checkpoints.\"}}", "category": "generic"}
{"question_id": 95, "text": " I want you to create a function that generates captions for a list of images.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Captioning\", \"api_name\": \"nlpconnect/vit-gpt2-image-captioning\", \"api_call\": \"VisionEncoderDecoderModel.from_pretrained('nlpconnect/vit-gpt2-image-captioning')\", \"api_arguments\": {\"model\": \"nlpconnect/vit-gpt2-image-captioning\"}, \"python_environment_requirements\": [\"transformers\", \"torch\", \"PIL\"], \"example_code\": \"from transformers import VisionEncoderDecoderModel, ViTImageProcessor, AutoTokenizer\\nimport torch\\nfrom PIL import Image\\nmodel = VisionEncoderDecoderModel.from_pretrained(nlpconnect/vit-gpt2-image-captioning)\\nfeature_extractor = ViTImageProcessor.from_pretrained(nlpconnect/vit-gpt2-image-captioning)\\ntokenizer = AutoTokenizer.from_pretrained(nlpconnect/vit-gpt2-image-captioning)\\ndevice = torch.device(cuda if torch.cuda.is_available() else cpu)\\nmodel.to(device)\\nmax_length = 16\\nnum_beams = 4\\ngen_kwargs = {max_length: max_length, num_beams: num_beams}\\ndef predict_step(image_paths):\\n images = []\\n for image_path in image_paths:\\n i_image = Image.open(image_path)\\n if i_image.mode != RGB:\\n i_image = i_image.convert(mode=RGB)\\nimages.append(i_image)\\npixel_values = feature_extractor(images=images, return_tensors=pt).pixel_values\\n pixel_values = pixel_values.to(device)\\noutput_ids = model.generate(pixel_values, **gen_kwargs)\\npreds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)\\n preds = [pred.strip() for pred in preds]\\n return preds\\npredict_step(['doctor.e16ba4e4.jpg']) # ['a woman in a hospital bed with a woman in a hospital bed']\", \"performance\": {\"dataset\": \"Not provided\", \"accuracy\": \"Not provided\"}, \"description\": \"An image captioning model that uses transformers to generate captions for input images. The model is based on the Illustrated Image Captioning using transformers approach.\"}}", "category": "generic"}
{"question_id": 96, "text": " We need a tool to help us generate textual descriptions for images and videos related to our product.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-textcaps\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('microsoft/git-large-textcaps')\", \"api_arguments\": \"image, text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"TextCaps\", \"accuracy\": \"Refer to the paper\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextCaps. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).\"}}", "category": "generic"}
{"question_id": 97, "text": " We need to build an AI-powered tool to assist visually impaired users in understanding their surroundings by answering questions about images.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-textvqa\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/git-large-textvqa')\", \"api_arguments\": \"image, question\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"TextVQA\", \"accuracy\": \"See table 11 in the paper for more details.\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextVQA. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like: image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).\"}}", "category": "generic"}
{"question_id": 98, "text": " I'm a nutritionist and want to help my clients by answering questions about their meals. They will send me an image of their food and ask me a question about it, like \\\"Is this vegan?\\\" or \\\"How many calories do you think it contains?\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"temp_vilt_vqa\", \"api_call\": \"pipeline('visual-question-answering', model='Bingsu/temp_vilt_vqa', tokenizer='Bingsu/temp_vilt_vqa')\", \"api_arguments\": {\"model\": \"Bingsu/temp_vilt_vqa\", \"tokenizer\": \"Bingsu/temp_vilt_vqa\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A visual question answering model for answering questions related to images using the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 99, "text": " Our client is a legal firm that needs assistance in extracting specific information from a large number of legal documents. Automate the process of answering questions related to these documents.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased_finetuned_docvqa\", \"api_call\": \"pipeline('question-answering', model='Sayantan1993/layoutlmv2-base-uncased_finetuned_docvqa')\", \"api_arguments\": \"{'question': 'your_question', 'context': 'your_context'}\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A model for document question answering, fine-tuned on the DocVQA dataset using LayoutLMv2-base-uncased.\"}}", "category": "generic"}
{"question_id": 100, "text": " In a healthcare company, we are trying to create an automated system for answering patient-related questions based on their medical documents. We need a solution using NLP.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased-finetuned-infovqa\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('tiennvcs/layoutlmv2-base-uncased-finetuned-infovqa')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \"4.12.2\", \"pytorch\": \"1.8.0+cu101\", \"datasets\": \"1.14.0\", \"tokenizers\": \"0.10.3\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 2.087}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-base-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 101, "text": " Develop a program which can answer questions related to a scanned document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.11.0\"}, \"example_code\": {}, \"performance\": {\"dataset\": {}, \"accuracy\": {}}, \"description\": \"A document question answering model based on LayoutLMv2, which can be used to extract answers from images with text and layout information.\"}}", "category": "generic"}
{"question_id": 102, "text": " I have received a PDF document and a question. My task is to find the answer part in the document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face\", \"functionality\": \"Question Answering\", \"api_name\": \"impira/layoutlm-document-qa\", \"api_call\": \"pipeline('question-answering', model=LayoutLMForQuestionAnswering.from_pretrained('impira/layoutlm-document-qa', return_dict=True))\", \"api_arguments\": [\"image_url\", \"question\"], \"python_environment_requirements\": [\"PIL\", \"pytesseract\", \"PyTorch\", \"transformers\"], \"example_code\": \"nlp(https://templates.invoicehome.com/invoice-template-us-neat-750px.png, What is the invoice number?)\", \"performance\": {\"dataset\": \"SQuAD2.0 and DocVQA\", \"accuracy\": \"Not provided\"}, \"description\": \"A fine-tuned version of the multi-modal LayoutLM model for the task of question answering on documents.\"}}", "category": "generic"}
{"question_id": 103, "text": " An interior design firm builds a software to understand the depth of rooms captured in photographs for remodeling activities.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221215-093747\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221215-093747')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"DIODE\", \"accuracy\": \"\"}, \"description\": \"A depth estimation model fine-tuned on the DIODE dataset.\"}}", "category": "generic"}
{"question_id": 104, "text": " We are running an autonomous vehicle company and want to implement a depth estimation module for the real-time video feed captured by our camera.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-nyu-finetuned-diode-221116-104421\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-104421')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.24.0, pytorch==1.12.1+cu113, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3736, \"Mae\": 0.3079, \"Rmse\": 0.4321, \"Abs Rel\": 0.3666, \"Log Mae\": 0.1288, \"Log Rmse\": 0.1794, \"Delta1\": 0.4929, \"Delta2\": 0.7934, \"Delta3\": 0.9234}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 105, "text": " Our team wants to create a new app for autonomous vehicles. For that, we need to estimate the depth of the field from images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221121-063504\", \"api_call\": \"AutoModelForImageClassification.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221121-063504')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers==4.24.0\", \"torch==1.12.1+cu116\", \"tokenizers==0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3533, \"Mae\": 0.2668, \"Rmse\": 0.3716, \"Abs Rel\": 0.3427, \"Log Mae\": 0.1167, \"Log Rmse\": 0.1703, \"Delta1\": 0.5522, \"Delta2\": 0.8362, \"Delta3\": 0.9382}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset for depth estimation.\"}}", "category": "generic"}
{"question_id": 106, "text": " As a city planner, I need to measure the depth of spaces in a series of images taken from streets.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221221-102136\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode-221221-102136')\", \"api_arguments\": [], \"python_environment_requirements\": [\"Transformers 4.24.0\", \"Pytorch 1.12.1+cu116\", \"Datasets 2.8.0\", \"Tokenizers 0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.4222, \"Mae\": 0.411, \"Rmse\": 0.6292, \"Abs Rel\": 0.3778, \"Log Mae\": 0.1636, \"Log Rmse\": 0.224, \"Delta1\": 0.432, \"Delta2\": 0.6806, \"Delta3\": 0.8068}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 107, "text": " In our online ecommerce platform, we want to build an AI app to automatically recognize the type of products. It should be able to identify common items like clothing, electronics, furniture, and more.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"facebook/convnext-large-224\", \"api_call\": \"ConvNextForImageClassification.from_pretrained('facebook/convnext-large-224')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"facebook/convnext-large-224\"}, \"python_environment_requirements\": {\"transformers\": \"Hugging Face Transformers\", \"torch\": \"PyTorch\", \"datasets\": \"Hugging Face Datasets\"}, \"example_code\": {\"import\": [\"from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification\", \"import torch\", \"from datasets import load_dataset\"], \"load_dataset\": \"dataset = load_dataset('huggingface/cats-image')\", \"image\": \"image = dataset['test']['image'][0]\", \"feature_extractor\": \"feature_extractor = ConvNextFeatureExtractor.from_pretrained('facebook/convnext-large-224')\", \"model\": \"model = ConvNextForImageClassification.from_pretrained('facebook/convnext-large-224')\", \"inputs\": \"inputs = feature_extractor(image, return_tensors='pt')\", \"logits\": \"with torch.no_grad():\\n  logits = model(**inputs).logits\", \"predicted_label\": \"predicted_label = logits.argmax(-1).item()\", \"print\": \"print(model.config.id2label[predicted_label])\"}, \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not specified\"}, \"description\": \"ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them. The authors started from a ResNet and 'modernized' its design by taking the Swin Transformer as inspiration.\"}}", "category": "generic"}
{"question_id": 108, "text": " We need to recognize the breed of dog in the given image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/vit-base-patch16-224\", \"api_call\": \"ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-224\", \"from_tf\": \"False\", \"config\": \"None\", \"cache_dir\": \"None\", \"revision\": \"None\", \"use_auth_token\": \"False\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.0\", \"torch\": \"1.9.0\", \"PIL\": \"8.3.2\", \"requests\": \"2.26.0\"}, \"example_code\": {\"1\": \"from transformers import ViTImageProcessor, ViTForImageClassification\", \"2\": \"from PIL import Image\", \"3\": \"import requests\", \"4\": \"url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\", \"5\": \"image = Image.open(requests.get(url, stream=True).raw)\", \"6\": \"processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\", \"7\": \"model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"8\": \"inputs = processor(images=image, return_tensors='pt')\", \"9\": \"outputs = model(**inputs)\", \"10\": \"logits = outputs.logits\", \"11\": \"predicted_class_idx = logits.argmax(-1).item()\", \"12\": \"print('Predicted class:', model.config.id2label[predicted_class_idx])\"}, \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al.\"}}", "category": "generic"}
{"question_id": 109, "text": " Develop a solution that can categorize an image of a cell phone, laptop, or smartwatch as one of these respective device types.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"lysandre/tiny-vit-random\", \"api_call\": \"ViTForImageClassification.from_pretrained('lysandre/tiny-vit-random')\", \"api_arguments\": \"image_path\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny-vit-random model for image classification using Hugging Face Transformers.\"}}", "category": "generic"}
{"question_id": 110, "text": " Build a system to help companies identify logos from a collection of images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"convnextv2_huge.fcmae_ft_in1k\", \"api_call\": \"timm.create_model('convnextv2_huge.fcmae_ft_in1k', pretrained=True)\", \"api_arguments\": {\"pretrained\": \"True\"}, \"python_environment_requirements\": [\"timm\"], \"example_code\": \"from urllib.request import urlopen\\nfrom PIL import Image\\nimport timm\\nimg = Image.open(urlopen('https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'))\\nmodel = timm.create_model('convnextv2_huge.fcmae_ft_in1k', pretrained=True)\\nmodel = model.eval()\\ndata_config = timm.data.resolve_model_data_config(model)\\ntransforms = timm.data.create_transform(**data_config, is_training=False)\\noutput = model(transforms(img).unsqueeze(0))\\ntop5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": 86.256}, \"description\": \"A ConvNeXt-V2 image classification model. Pretrained with a fully convolutional masked autoencoder framework (FCMAE) and fine-tuned on ImageNet-1k.\"}}", "category": "generic"}
{"question_id": 111, "text": " Develop a pipeline that detects objects present in an image using computer vision.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"hustvl/yolos-tiny\", \"api_call\": \"YolosForObjectDetection.from_pretrained('hustvl/yolos-tiny')\", \"api_arguments\": {\"images\": \"image\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import YolosFeatureExtractor, YolosForObjectDetection\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nfeature_extractor = YolosFeatureExtractor.from_pretrained('hustvl/yolos-tiny')\\nmodel = YolosForObjectDetection.from_pretrained('hustvl/yolos-tiny')\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\nbboxes = outputs.pred_boxes\", \"performance\": {\"dataset\": \"COCO 2017 validation\", \"accuracy\": \"28.7 AP\"}, \"description\": \"YOLOS is a Vision Transformer (ViT) trained using the DETR loss. Despite its simplicity, a base-sized YOLOS model is able to achieve 42 AP on COCO validation 2017 (similar to DETR and more complex frameworks such as Faster R-CNN). The model is trained using a bipartite matching loss: one compares the predicted classes + bounding boxes of each of the N = 100 object queries to the ground truth annotations, padded up to the same length N (so if an image only contains 4 objects, 96 annotations will just have a no object as class and no bounding box as bounding box). The Hungarian matching algorithm is used to create an optimal one-to-one mapping between each of the N queries and each of the N annotations. Next, standard cross-entropy (for the classes) and a linear combination of the L1 and generalized IoU loss (for the bounding boxes) are used to optimize the parameters of the model.\"}}", "category": "generic"}
{"question_id": 112, "text": " Assit me to process and segment an image for further analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"nvidia/segformer-b5-finetuned-ade-640-640\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-ade-640-640')\", \"api_arguments\": [\"images\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nfeature_extractor = SegformerFeatureExtractor.from_pretrained(nvidia/segformer-b5-finetuned-ade-512-512)\\nmodel = SegformerForSemanticSegmentation.from_pretrained(nvidia/segformer-b5-finetuned-ade-512-512)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\", \"performance\": {\"dataset\": \"ADE20K\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on ADE20k at resolution 640x640. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 113, "text": " We need to analyze satellite images to categorize the types of land use. For this purpose, I need to segment the images and identify different objects.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"shi-labs/oneformer_coco_swin_large\", \"api_call\": \"'OneFormerForUniversalSegmentation.from_pretrained(shi-labs/oneformer_coco_swin_large)'\", \"api_arguments\": {\"images\": \"image\", \"task_inputs\": [\"semantic\", \"instance\", \"panoptic\"], \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\\nfrom PIL import Image\\nimport requests\\nurl = https://huggingface.co/datasets/shi-labs/oneformer_demo/blob/main/coco.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = OneFormerProcessor.from_pretrained(shi-labs/oneformer_coco_swin_large)\\nmodel = OneFormerForUniversalSegmentation.from_pretrained(shi-labs/oneformer_coco_swin_large)\\nsemantic_inputs = processor(images=image, task_inputs=[semantic], return_tensors=pt)\\nsemantic_outputs = model(**semantic_inputs)\\npredicted_semantic_map = processor.post_process_semantic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\", \"performance\": {\"dataset\": \"ydshieh/coco_dataset_script\", \"accuracy\": \"Not provided\"}, \"description\": \"OneFormer model trained on the COCO dataset (large-sized version, Swin backbone). It was introduced in the paper OneFormer: One Transformer to Rule Universal Image Segmentation by Jain et al. and first released in this repository. OneFormer is the first multi-task universal image segmentation framework. It needs to be trained only once with a single universal architecture, a single model, and on a single dataset, to outperform existing specialized models across semantic, instance, and panoptic segmentation tasks. OneFormer uses a task token to condition the model on the task in focus, making the architecture task-guided for training, and task-dynamic for inference, all with a single model.\"}}", "category": "generic"}
{"question_id": 114, "text": " We are a city planning department and want to evaluate the city layout. Analyze the image we provide to segment and understand the various urban elements.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Semantic Segmentation\", \"api_name\": \"nvidia/segformer-b5-finetuned-cityscapes-1024-1024\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-cityscapes-1024-1024')\", \"api_arguments\": {\"images\": \"image\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": \"from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nfeature_extractor = SegformerFeatureExtractor.from_pretrained(nvidia/segformer-b5-finetuned-cityscapes-1024-1024)\\nmodel = SegformerForSemanticSegmentation.from_pretrained(nvidia/segformer-b5-finetuned-cityscapes-1024-1024)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\", \"performance\": {\"dataset\": \"CityScapes\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 115, "text": " My company develops drones for agriculture purposes, and we need a model to segment aerial images accurately.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"facebook/maskformer-swin-base-ade\", \"api_call\": \"MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-base-ade')\", \"api_arguments\": {\"from_pretrained\": \"facebook/maskformer-swin-base-ade\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"PIL\": \"latest\", \"requests\": \"latest\"}, \"example_code\": \"from transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation\\nfrom PIL import Image\\nimport requests\\nurl = https://huggingface.co/datasets/hf-internal-testing/fixtures_ade20k/resolve/main/ADE_val_00000001.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nfeature_extractor = MaskFormerFeatureExtractor.from_pretrained(facebook/maskformer-swin-base-ade)\\ninputs = feature_extractor(images=image, return_tensors=pt)\\nmodel = MaskFormerForInstanceSegmentation.from_pretrained(facebook/maskformer-swin-base-ade)\\noutputs = model(**inputs)\\nclass_queries_logits = outputs.class_queries_logits\\nmasks_queries_logits = outputs.masks_queries_logits\\npredicted_semantic_map = feature_extractor.post_process_semantic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\", \"performance\": {\"dataset\": \"ADE20k\", \"accuracy\": \"Not provided\"}, \"description\": \"MaskFormer model trained on ADE20k semantic segmentation (base-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository. This model addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation.\"}}", "category": "generic"}
{"question_id": 116, "text": " I want to generate images from text descriptions and use the scribble images as control inputs for my project.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Diffusers\", \"functionality\": \"Text-to-Image\", \"api_name\": \"lllyasviel/control_v11p_sd15_scribble\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_scribble')\", \"api_arguments\": {\"checkpoint\": \"lllyasviel/control_v11p_sd15_scribble\", \"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux==0.3.0\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom controlnet_aux import PidiNetDetector, HEDdetector\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11p_sd15_scribble\\nimage = load_image(\\n https://huggingface.co/lllyasviel/control_v11p_sd15_scribble/resolve/main/images/input.png\\n)\\nprompt = royal chamber with fancy bed\\nprocessor = HEDdetector.from_pretrained('lllyasviel/Annotators')\\ncontrol_image = processor(image, scribble=True)\\ncontrol_image.save(./images/control.png)\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(0)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"Stable Diffusion v1-5\", \"accuracy\": \"Not specified\"}, \"description\": \"Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Scribble images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.\"}}", "category": "generic"}
{"question_id": 118, "text": " We want to recommend workouts to our users, based on the type of sports they enjoy. Help us classify sports videos.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-large-finetuned-kinetics\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-large-finetuned-kinetics')\", \"api_arguments\": [\"video\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-large-finetuned-kinetics)\\nmodel = VideoMAEForVideoClassification.from_pretrained(MCG-NJU/videomae-large-finetuned-kinetics)\\ninputs = processor(video, return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": {\"top-1\": 84.7, \"top-5\": 96.5}}, \"description\": \"VideoMAE model pre-trained for 1600 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 119, "text": " We need to classify videos showing different actions for our new video moderation system.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"videomae-base-short-ssv2\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base-short-ssv2')\", \"api_arguments\": [\"video\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"numpy\", \"torch\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-base-short-ssv2)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base-short-ssv2)\\npixel_values = processor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Something-Something-v2\", \"accuracy\": \"N/A\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks: if you have a dataset of labeled videos for instance, you can train a standard classifier by placing a linear layer on top of the pre-trained encoder. One typically places a linear layer on top of the [CLS] token, as the last hidden state of this token can be seen as a representation of an entire video.\"}}", "category": "generic"}
{"question_id": 120, "text": " I need the AI to tell if an image is of a cat or a dog, regardless of its breed or species.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"openai/clip-vit-base-patch32\", \"api_call\": \"CLIPModel.from_pretrained('openai/clip-vit-base-patch32')\", \"api_arguments\": [\"text\", \"images\", \"return_tensors\", \"padding\"], \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(openai/clip-vit-base-patch32)\\nprocessor = CLIPProcessor.from_pretrained(openai/clip-vit-base-patch32)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(text=[a photo of a cat, a photo of a dog], images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [\"Food101\", \"CIFAR10\", \"CIFAR100\", \"Birdsnap\", \"SUN397\", \"Stanford Cars\", \"FGVC Aircraft\", \"VOC2007\", \"DTD\", \"Oxford-IIIT Pet dataset\", \"Caltech101\", \"Flowers102\", \"MNIST\", \"SVHN\", \"IIIT5K\", \"Hateful Memes\", \"SST-2\", \"UCF101\", \"Kinetics700\", \"Country211\", \"CLEVR Counting\", \"KITTI Distance\", \"STL-10\", \"RareAct\", \"Flickr30\", \"MSCOCO\", \"ImageNet\", \"ImageNet-A\", \"ImageNet-R\", \"ImageNet Sketch\", \"ObjectNet (ImageNet Overlap)\", \"Youtube-BB\", \"ImageNet-Vid\"], \"accuracy\": \"varies\"}, \"description\": \"The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.\"}}", "category": "generic"}
{"question_id": 121, "text": " We have a set of pictures for pets (dogs and cats). We need to offer an AI-based solution to classify the pictures given the pet name.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"CLIPModel.from_pretrained('laion/CLIP-convnext_base_w-laion2B-s13B-b82K')\", \"api_call\": \"CLIPModel.from_pretrained('laion/CLIP-convnext_base_w-laion2B-s13B-b82K')\", \"api_arguments\": {\"image_path\": \"path to the image file\", \"labels\": \"list of possible class names\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; clip = pipeline('image-classification', model='laion/CLIP-convnext_base_w-laion2B-s13B-b82K'); clip('path/to/image.jpg', ['cat', 'dog'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"70.8 - 71.7%\"}, \"description\": \"A series of CLIP ConvNeXt-Base (w/ wide embed dim) models trained on subsets LAION-5B using OpenCLIP. The models achieve between 70.8 and 71.7 zero-shot top-1 accuracy on ImageNet-1k. The models can be used for zero-shot image classification, image and text retrieval, and other related tasks.\"}}", "category": "generic"}
{"question_id": 122, "text": " Our startup team is now building an app for diagnosing plant diseases based on images. We need to get the diagnosis for different types of plant issues.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"timm/eva02_enormous_patch14_plus_clip_224.laion2b_s9b_b144k\", \"api_call\": \"clip.load('timm/eva02_enormous_patch14_plus_clip_224.laion2b_s9b_b144k')\", \"api_arguments\": \"image, class_names\", \"python_environment_requirements\": \"huggingface_hub, openai, transformers\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"This model is a zero-shot image classification model based on OpenCLIP. It can be used for classifying images into various categories without any additional training.\"}}", "category": "generic"}
{"question_id": 123, "text": " We need to analyze customer reviews and find out how well our new product is doing in the market.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"bert-base-multilingual-uncased-sentiment\", \"api_call\": \"pipeline('sentiment-analysis', model='nlptown/bert-base-multilingual-uncased-sentiment')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"result = sentiment_pipeline('I love this product!')\", \"performance\": {\"dataset\": [{\"language\": \"English\", \"accuracy\": {\"exact\": \"67%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Dutch\", \"accuracy\": {\"exact\": \"57%\", \"off-by-1\": \"93%\"}}, {\"language\": \"German\", \"accuracy\": {\"exact\": \"61%\", \"off-by-1\": \"94%\"}}, {\"language\": \"French\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"94%\"}}, {\"language\": \"Italian\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Spanish\", \"accuracy\": {\"exact\": \"58%\", \"off-by-1\": \"95%\"}}]}, \"description\": \"This a bert-base-multilingual-uncased model finetuned for sentiment analysis on product reviews in six languages: English, Dutch, German, French, Spanish and Italian. It predicts the sentiment of the review as a number of stars (between 1 and 5).\"}}", "category": "generic"}
{"question_id": 124, "text": " A new tutoring company is founded, and they want a tutoring AI. To do so, they need help in creating better explanations for a chemistry concept.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Paraphrase-based utterance augmentation\", \"api_name\": \"prithivida/parrot_fluency_model\", \"api_call\": \"pipeline('text-classification', model='prithivida/parrot_fluency_model')\", \"api_arguments\": \"text\", \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"parrot('your input text')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"Parrot is a paraphrase-based utterance augmentation framework purpose-built to accelerate training NLU models. A paraphrase framework is more than just a paraphrasing model.\"}}", "category": "generic"}
{"question_id": 125, "text": " Create a function that can determine if a given text is a question or a statement.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"shahrukhx01/question-vs-statement-classifier\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('shahrukhx01/question-vs-statement-classifier')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained(shahrukhx01/question-vs-statement-classifier)\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(shahrukhx01/question-vs-statement-classifier)\\nmodel = AutoModelForSequenceClassification.from_pretrained(shahrukhx01/question-vs-statement-classifier)\", \"performance\": {\"dataset\": \"Haystack\", \"accuracy\": \"Not provided\"}, \"description\": \"Trained to add the feature for classifying queries between Question Query vs Statement Query using classification in Haystack\"}}", "category": "generic"}
{"question_id": 126, "text": " I want to create a system that can answer questions by sorting out possible answers to a question.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Information Retrieval\", \"api_name\": \"cross-encoder/ms-marco-TinyBERT-L-2-v2\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/ms-marco-TinyBERT-L-2-v2')\", \"api_arguments\": {\"tokenizer\": \"tokenizer = AutoTokenizer.from_pretrained('model_name')\", \"features\": \"features = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors='pt')\"}, \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": {\"import\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\", \"model\": \"model = AutoModelForSequenceClassification.from_pretrained('model_name')\", \"tokenizer\": \"tokenizer = AutoTokenizer.from_pretrained('model_name')\", \"features\": \"features = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors='pt')\", \"scores\": \"with torch.no_grad():\\n    scores = model(**features).logits\\n    print(scores)\"}, \"performance\": {\"dataset\": \"TREC Deep Learning 2019\", \"accuracy\": \"69.84 (NDCG@10)\"}, \"description\": \"This model was trained on the MS Marco Passage Ranking task. It can be used for Information Retrieval: Given a query, encode the query with all possible passages (e.g. retrieved with ElasticSearch). Then sort the passages in a decreasing order. The training code is available here: SBERT.net Training MS Marco.\"}}", "category": "generic"}
{"question_id": 127, "text": " We have a news article and we need to extract all the entities like the names of people, organizations, and locations.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"distilbert-base-multilingual-cased-ner-hrl\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\", \"api_arguments\": {\"model\": \"Davlan/distilbert-base-multilingual-cased-ner-hrl\", \"tokenizer\": \"Davlan/distilbert-base-multilingual-cased-ner-hrl\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\nfrom transformers import pipeline\\ntokenizer = AutoTokenizer.from_pretrained(Davlan/distilbert-base-multilingual-cased-ner-hrl)\\nmodel = AutoModelForTokenClassification.from_pretrained(Davlan/distilbert-base-multilingual-cased-ner-hrl)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": [{\"name\": \"ANERcorp\", \"language\": \"Arabic\"}, {\"name\": \"conll 2003\", \"language\": \"German\"}, {\"name\": \"conll 2003\", \"language\": \"English\"}, {\"name\": \"conll 2002\", \"language\": \"Spanish\"}, {\"name\": \"Europeana Newspapers\", \"language\": \"French\"}, {\"name\": \"Italian I-CAB\", \"language\": \"Italian\"}, {\"name\": \"Latvian NER\", \"language\": \"Latvian\"}, {\"name\": \"conll 2002\", \"language\": \"Dutch\"}, {\"name\": \"Paramopama + Second Harem\", \"language\": \"Portuguese\"}, {\"name\": \"MSRA\", \"language\": \"Chinese\"}], \"accuracy\": \"Not specified\"}, \"description\": \"distilbert-base-multilingual-cased-ner-hrl is a Named Entity Recognition model for 10 high resourced languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese) based on a fine-tuned Distiled BERT base model. It has been trained to recognize three types of entities: location (LOC), organizations (ORG), and person (PER).\"}}", "category": "generic"}
{"question_id": 128, "text": " We are purchasing a CRM system to keep track of our customers and their organizations. We want to extract useful entities from customer emails automatically.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english-ontonotes\", \"api_call\": \"SequenceTagger.load('flair/ner-english-ontonotes')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\ntagger = SequenceTagger.load(flair/ner-english-ontonotes)\\nsentence = Sentence(On September 1st George Washington won 1 dollar.)\\ntagger.predict(sentence)\\nprint(sentence)\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"Ontonotes\", \"accuracy\": \"89.27\"}, \"description\": \"This is the 18-class NER model for English that ships with Flair. It predicts 18 tags such as cardinal value, date value, event name, building name, geo-political entity, language name, law name, location name, money name, affiliation, ordinal value, organization name, percent value, person name, product name, quantity value, time value, and name of work of art. Based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 129, "text": " As a researcher, I am trying to find an answer to my question in a table containing information about animals and their characteristics.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"neulab/omnitab-large-finetuned-wtq\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('neulab/omnitab-large-finetuned-wtq')\", \"api_arguments\": {\"table\": \"pd.DataFrame\", \"query\": \"str\"}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModelForSeq2SeqLM\", \"pandas\": \"pd\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nimport pandas as pd\\ntokenizer = AutoTokenizer.from_pretrained(neulab/omnitab-large-finetuned-wtq)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(neulab/omnitab-large-finetuned-wtq)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = In which year did beijing host the Olympic Games?\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": null}, \"description\": \"OmniTab is a table-based QA model proposed in OmniTab: Pretraining with Natural and Synthetic Data for Few-shot Table-based Question Answering. The original Github repository is https://github.com/jzbjyb/OmniTab.\"}}", "category": "generic"}
{"question_id": 130, "text": " A teacher wants to create a quiz for her students. We are now working on the questions and answers for the quiz that be arranged in a table format.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"table-question-answering-tapas\", \"api_call\": \"pipeline('table-question-answering', model='Meena/table-question-answering-tapas')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"This model can be loaded on the Inference API on-demand.\", \"performance\": {\"dataset\": [{\"name\": \"SQA (Sequential Question Answering by Microsoft)\", \"accuracy\": null}, {\"name\": \"WTQ (Wiki Table Questions by Stanford University)\", \"accuracy\": null}, {\"name\": \"WikiSQL (by Salesforce)\", \"accuracy\": null}]}, \"description\": \"TAPAS, the model learns an inner representation of the English language used in tables and associated texts, which can then be used to extract features useful for downstream tasks such as answering questions about a table, or determining whether a sentence is entailed or refuted by the contents of a table. It is a BERT-based model specifically designed (and pre-trained) for answering questions about tabular data. TAPAS uses relative position embeddings and has 7 token types that encode tabular structure. It is pre-trained on the masked language modeling (MLM) objective on a large dataset comprising millions of tables from English Wikipedia and corresponding texts.\"}}", "category": "generic"}
{"question_id": 131, "text": " I work for a financial company that stores all of its data in tables. We need a way to extract key information efficiently by asking natural language questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Table-based QA\", \"api_name\": \"neulab/omnitab-large-1024shot\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('neulab/omnitab-large-1024shot')\", \"api_arguments\": {\"table\": \"pd.DataFrame.from_dict(data)\", \"query\": \"str\"}, \"python_environment_requirements\": [\"transformers\", \"pandas\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nimport pandas as pd\\ntokenizer = AutoTokenizer.from_pretrained(neulab/omnitab-large-1024shot)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(neulab/omnitab-large-1024shot)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = In which year did beijing host the Olympic Games?\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": \"Not provided\"}, \"description\": \"OmniTab is a table-based QA model proposed in OmniTab: Pretraining with Natural and Synthetic Data for Few-shot Table-based Question Answering. neulab/omnitab-large-1024shot (based on BART architecture) is initialized with microsoft/tapex-large and continuously pretrained on natural and synthetic data (SQL2NL model trained in the 1024-shot setting).\"}}", "category": "generic"}
{"question_id": 132, "text": " We have a dataset related to coffee and tea prices. We need to answer a question on who sells hot chocolate and their prices.\\n###Input: {\\\"table\\\": [[\\\"Shop\\\", \\\"Drink\\\", \\\"Price\\\"], [\\\"Cafe A\\\", \\\"Coffee\\\", \\\"3.00\\\"], [\\\"Cafe B\\\", \\\"Tea\\\", \\\"2.50\\\"], [\\\"Cafe C\\\", \\\"Hot Chocolate\\\", \\\"4.50\\\"], [\\\"Cafe D\\\", \\\"Hot Chocolate\\\", \\\"3.75\\\"]], \\\"queries\\\": [\\\"Which shops sell hot chocolate and what are their prices?\\\"]}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-mini-finetuned-sqa\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-mini-finetuned-sqa')\", \"api_arguments\": [\"model_name\", \"table\", \"queries\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"msr_sqa\", \"accuracy\": 0.5148}, \"description\": \"TAPAS mini model fine-tuned on Sequential Question Answering (SQA)\"}}", "category": "generic"}
{"question_id": 133, "text": " A company is running a survey and they want to know how many respondents have given a specific answer for each question of the survey.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"navteca/tapas-large-finetuned-wtq\", \"api_call\": \"AutoModelForTableQuestionAnswering.from_pretrained('navteca/tapas-large-finetuned-wtq')\", \"api_arguments\": {\"table\": \"table_data\", \"query\": \"query\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTableQuestionAnswering, AutoTokenizer, pipeline\"}, \"example_code\": \"from transformers import AutoModelForTableQuestionAnswering, AutoTokenizer, pipeline\\n# Load model & tokenizer\\ntapas_model = AutoModelForTableQuestionAnswering.from_pretrained('navteca/tapas-large-finetuned-wtq')\\ntapas_tokenizer = AutoTokenizer.from_pretrained('navteca/tapas-large-finetuned-wtq')\\n# Get predictions\\nnlp = pipeline('table-question-answering', model=tapas_model, tokenizer=tapas_tokenizer)\\nresult = nlp({'table': {'Repository': ['Transformers', 'Datasets', 'Tokenizers'], 'Stars': ['36542', '4512', '3934'], 'Contributors': ['651', '77', '34'], 'Programming language': ['Python', 'Python', 'Rust, Python and NodeJS']}, 'query': 'How many stars does the transformers repository have?'})\\nprint(result)\", \"performance\": {\"dataset\": \"wikisql\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS large model fine-tuned on WikiTable Questions (WTQ). It is a BERT-like transformers model pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion. It can be used for answering questions related to a table.\"}}", "category": "generic"}
{"question_id": 134, "text": " Extract information about a non-compete clause from a legal document with a context related to data protection.\\n###Input: \\\"The data protection provisions set forth in this agreement shall be in effect for a period of 2 years after the termination of services. The non-compete clause states that the service provider is prohibited from providing similar services to any competitor within a 50-mile radius and during the 1-year period following termination of services.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"Rakib/roberta-base-on-cuad\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('Rakib/roberta-base-on-cuad')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained(Rakib/roberta-base-on-cuad)\"}, \"python_environment_requirements\": {\"transformers\": \"latest\"}, \"example_code\": {\"import\": \"from transformers import AutoTokenizer, AutoModelForQuestionAnswering\", \"tokenizer\": \"tokenizer = AutoTokenizer.from_pretrained(Rakib/roberta-base-on-cuad)\", \"model\": \"model = AutoModelForQuestionAnswering.from_pretrained(Rakib/roberta-base-on-cuad)\"}, \"performance\": {\"dataset\": \"cuad\", \"accuracy\": \"46.6%\"}, \"description\": \"This model is trained for the task of Question Answering on Legal Documents using the CUAD dataset. It is based on the RoBERTa architecture and can be used to extract answers from legal contracts and documents.\"}}", "category": "generic"}
{"question_id": 135, "text": " Tell me the day of the game when it was played given the following context: \\\"The game was played on February 7, 2016 at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California.\\\"\\n###Input: {'context': \\\"The game was played on February 7, 2016 at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California.\\\", 'question': \\\"What day was the game played on?\\\"}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"csarron/bert-base-uncased-squad-v1\", \"api_call\": \"pipeline('question-answering', model='csarron/bert-base-uncased-squad-v1', tokenizer='csarron/bert-base-uncased-squad-v1')\", \"api_arguments\": {\"model\": \"csarron/bert-base-uncased-squad-v1\", \"tokenizer\": \"csarron/bert-base-uncased-squad-v1\"}, \"python_environment_requirements\": \"Python 3.7.5\", \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline(\\n question-answering,\\n model=csarron/bert-base-uncased-squad-v1,\\n tokenizer=csarron/bert-base-uncased-squad-v1\\n)\\npredictions = qa_pipeline({\\n 'context': The game was played on February 7, 2016 at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California.,\\n 'question': What day was the game played on?\\n})\\nprint(predictions)\", \"performance\": {\"dataset\": \"SQuAD1.1\", \"accuracy\": {\"EM\": 80.9, \"F1\": 88.2}}, \"description\": \"BERT-base uncased model fine-tuned on SQuAD v1. This model is case-insensitive and does not make a difference between english and English.\"}}", "category": "generic"}
{"question_id": 136, "text": " We need to identify the relationship between two sentences whether they are contradictory, entail each other, or neutral.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"cross-encoder/nli-deberta-v3-small\", \"api_call\": \"CrossEncoder('cross-encoder/nli-deberta-v3-small')\", \"api_arguments\": [\"sentence1\", \"sentence2\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from sentence_transformers import CrossEncoder\\nmodel = CrossEncoder('cross-encoder/nli-deberta-v3-small')\\nscores = model.predict([('A man is eating pizza', 'A man eats something'), ('A black race car starts up in front of a crowd of people.', 'A man is driving down a lonely road.')])\", \"performance\": {\"dataset\": {\"SNLI-test\": \"91.65\", \"MNLI-mismatched\": \"87.55\"}, \"accuracy\": {\"SNLI-test\": \"91.65\", \"MNLI-mismatched\": \"87.55\"}}, \"description\": \"Cross-Encoder for Natural Language Inference based on microsoft/deberta-v3-small, trained on the SNLI and MultiNLI datasets. For a given sentence pair, it will output three scores corresponding to the labels: contradiction, entailment, neutral.\"}}", "category": "generic"}
{"question_id": 137, "text": " I am a climate change agency, looking to have my research summaries translated into Chinese for international audiences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": [\"Translation\", \"Summarization\", \"Question Answering\", \"Text Classification\", \"Text Regression\"], \"api_name\": \"t5-small\", \"api_call\": \"T5Model.from_pretrained('t5-small')\", \"api_arguments\": {\"input_ids\": \"input tokenized text\", \"decoder_input_ids\": \"input tokenized text for decoder\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import T5Tokenizer, T5Model\\ntokenizer = T5Tokenizer.from_pretrained('t5-small')\\nmodel = T5Model.from_pretrained('t5-small')\\ninput_ids = tokenizer('Studies have been shown that owning a dog is good for you', return_tensors='pt').input_ids\\ndecoder_input_ids = tokenizer('Studies show that', return_tensors='pt').input_ids\\noutputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"See research paper, Table 14 for full results\"}, \"description\": \"T5-Small is a Text-To-Text Transfer Transformer (T5) model with 60 million parameters. It is designed to perform a variety of NLP tasks, including machine translation, document summarization, question answering, and classification tasks. The model is pre-trained on the Colossal Clean Crawled Corpus (C4) and can be fine-tuned for specific tasks.\"}}", "category": "generic"}
{"question_id": 138, "text": " We are building an app to summarize long articles for users. We need a solution to create a condensed summary of the given text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"sshleifer/distilbart-cnn-12-6\", \"api_call\": \"BartForConditionalGeneration.from_pretrained('sshleifer/distilbart-cnn-12-6')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"huggingface/transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": [{\"name\": \"cnn_dailymail\", \"accuracy\": {\"Rouge 2\": \"22.12\", \"Rouge-L\": \"36.99\"}}]}, \"description\": \"DistilBART is a distilled version of BART, a model for text summarization. This specific checkpoint, 'sshleifer/distilbart-cnn-12-6', is trained on the cnn_dailymail dataset and provides a fast and effective way to generate summaries of text. The model can be loaded using the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 139, "text": " A news agency wants to summaries their international news articles daily.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"csebuetnlp/mT5_multilingual_XLSum\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('csebuetnlp/mT5_multilingual_XLSum')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers==4.11.0.dev0\"], \"example_code\": \"import re\\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nWHITESPACE_HANDLER = lambda k: re.sub('\\\\s+', ' ', re.sub('\\\\n+', ' ', k.strip()))\\narticle_text = Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said. The policy includes the termination of accounts of anti-vaccine influencers. Tech giants have been criticised for not doing more to counter false health information on their sites. In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue. YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines. In a blog post, the company said it had seen false claims about Covid jabs spill over into misinformation about vaccines in general. The new policy covers long-approved vaccines, such as those against measles or hepatitis B. We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO, the post said, referring to the World Health Organization.\\nmodel_name = csebuetnlp/mT5_multilingual_XLSum\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\\ninput_ids = tokenizer(\\n [WHITESPACE_HANDLER(article_text)],\\n return_tensors=pt,\\n padding=max_length,\\n truncation=True,\\n max_length=512\\n)[input_ids]\\noutput_ids = model.generate(\\n input_ids=input_ids,\\n max_length=84,\\n no_repeat_ngram_size=2,\\n num_beams=4\\n)[0]\\nsummary = tokenizer.decode(\\n output_ids,\\n skip_special_tokens=True,\\n clean_up_tokenization_spaces=False\\n)\\nprint(summary)\", \"performance\": {\"dataset\": \"xsum\", \"accuracy\": {\"ROUGE-1\": 36.5, \"ROUGE-2\": 13.934, \"ROUGE-L\": 28.988, \"ROUGE-LSUM\": 28.996, \"loss\": 2.067, \"gen_len\": 26.973}}, \"description\": \"This repository contains the mT5 checkpoint finetuned on the 45 languages of XL-Sum dataset. It is a multilingual abstractive summarization model that supports text-to-text generation for 43 languages.\"}}", "category": "generic"}
{"question_id": 140, "text": " Design a smart home system that can have conversations with the user for controlling the home appliances.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"facebook/blenderbot-90M\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('facebook/blenderbot-90M')\", \"api_arguments\": {\"input_message\": \"str\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\ntokenizer = AutoTokenizer.from_pretrained('facebook/blenderbot-90M')\\nmodel = AutoModelForCausalLM.from_pretrained('facebook/blenderbot-90M')\\n# Chat with the model\\ninput_message = 'What is your favorite color?'\\ntokenized_input = tokenizer.encode(input_message + tokenizer.eos_token, return_tensors='pt')\\noutput = model.generate(tokenized_input, max_length=1000, pad_token_id=tokenizer.eos_token_id)\\nresponse = tokenizer.decode(output[:, tokenized_input.shape[-1]:][0], skip_special_tokens=True)\\nprint(response)\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not provided\"}, \"description\": \"BlenderBot-90M is a conversational AI model developed by Facebook AI. It is trained on the Blended Skill Talk dataset and aims to provide engaging and human-like responses in a multi-turn dialogue setting. The model is deprecated, and it is recommended to use the identical model https://huggingface.co/facebook/blenderbot_small-90M instead.\"}}", "category": "generic"}
{"question_id": 141, "text": " An educational publishing company is developing a language comprehension program for elementary school students. They want a system that can generate a short story based on a given prompt.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"decapoda-research/llama-7b-hf\", \"api_call\": \"AutoModel.from_pretrained('decapoda-research/llama-7b-hf')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\ngen = pipeline('text-generation', model='decapoda-research/llama-7b-hf')\\nresult = gen('Once upon a time')\\nprint(result[0]['generated_text'])\", \"performance\": {\"dataset\": [{\"name\": \"BoolQ\", \"accuracy\": 76.5}, {\"name\": \"PIQA\", \"accuracy\": 79.8}, {\"name\": \"SIQA\", \"accuracy\": 48.9}, {\"name\": \"HellaSwag\", \"accuracy\": 76.1}, {\"name\": \"WinoGrande\", \"accuracy\": 70.1}, {\"name\": \"ARC-e\", \"accuracy\": 76.7}, {\"name\": \"ARC-c\", \"accuracy\": 47.6}, {\"name\": \"OBQAC\", \"accuracy\": 57.2}, {\"name\": \"COPA\", \"accuracy\": 93}]}, \"description\": \"LLaMA-7B is an auto-regressive language model based on the transformer architecture. It is designed for research on large language models, including question answering, natural language understanding, and reading comprehension. The model is trained on various sources, including CCNet, C4, GitHub, Wikipedia, Books, ArXiv, and Stack Exchange, with the majority of the dataset being in English.\"}}", "category": "generic"}
{"question_id": 142, "text": " Can you initiate a conversation with an AI model that plays the role of a friend who just got back from a conference?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"allenai/cosmo-xl\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('allenai/cosmo-xl')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"allenai/cosmo-xl\"}, \"python_environment_requirements\": {\"torch\": \"latest\", \"transformers\": \"latest\"}, \"example_code\": {\"import\": [\"import torch\", \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\"], \"initialize\": [\"device = torch.device(cuda if torch.cuda.is_available() else cpu)\", \"tokenizer = AutoTokenizer.from_pretrained(allenai/cosmo-xl)\", \"model = AutoModelForSeq2SeqLM.from_pretrained(allenai/cosmo-xl).to(device)\"], \"example\": [\"def set_input(situation_narrative, role_instruction, conversation_history):\", \" input_text =  <turn> .join(conversation_history)\", \"if role_instruction != :\", \" input_text = {} &lt;sep&gt; {}'.format(role_instruction, input_text)\", \"if situation_narrative != :\", \" input_text = {} &lt;sep&gt; {}'.format(situation_narrative, input_text)\", \"return input_text\", \"def generate(situation_narrative, role_instruction, conversation_history):\", \" input_text = set_input(situation_narrative, role_instruction, conversation_history)\", \" inputs = tokenizer([input_text], return_tensors=pt).to(device)\", \" outputs = model.generate(inputs[input_ids], max_new_tokens=128, temperature=1.0, top_p=.95, do_sample=True)\", \" response = tokenizer.decode(outputs[0], skip_special_tokens=True, clean_up_tokenization_spaces=False)\", \" return response\", \"situation = Cosmo had a really fun time participating in the EMNLP conference at Abu Dhabi.\", \"instruction = You are Cosmo and you are talking to a friend.\", \"conversation = [\", \" Hey, how was your trip to Abu Dhabi?\", \"]\", \"response = generate(situation, instruction, conversation)\", \"print(response)\"]}, \"performance\": {\"dataset\": {\"allenai/soda\": \"\", \"allenai/prosocial-dialog\": \"\"}, \"accuracy\": \"\"}, \"description\": \"COSMO is a conversation agent with greater generalizability on both in- and out-of-domain chitchat datasets (e.g., DailyDialog, BlendedSkillTalk). It is trained on two datasets: SODA and ProsocialDialog. COSMO is especially aiming to model natural human conversations. It can accept situation descriptions as well as instructions on what role it should play in the situation.\"}}", "category": "generic"}
{"question_id": 143, "text": " As a software developer, I want a program that can automatically generate code snippets for me based on natural language descriptions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Program Synthesis\", \"api_name\": \"Salesforce/codegen-2B-multi\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('Salesforce/codegen-2B-multi')\", \"api_arguments\": {\"input_ids\": \"input_ids\", \"max_length\": 128}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModelForCausalLM\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForCausalLM\\ntokenizer = AutoTokenizer.from_pretrained(Salesforce/codegen-2B-multi)\\nmodel = AutoModelForCausalLM.from_pretrained(Salesforce/codegen-2B-multi)\\ntext = def hello_world():\\ninput_ids = tokenizer(text, return_tensors=pt).input_ids\\ngenerated_ids = model.generate(input_ids, max_length=128)\\nprint(tokenizer.decode(generated_ids[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"HumanEval, MTPB\"}, \"description\": \"CodeGen is a family of autoregressive language models for program synthesis. The models are originally released in this repository, under 3 pre-training data variants (NL, Multi, Mono) and 4 model size variants (350M, 2B, 6B, 16B). The checkpoint included in this repository is denoted as CodeGen-Multi 2B, where Multi means the model is initialized with CodeGen-NL 2B and further pre-trained on a dataset of multiple programming languages, and 2B refers to the number of trainable parameters.\"}}", "category": "generic"}
{"question_id": 144, "text": " Provide a short summary of an article about cryptocurrency investment risks.\\n###Input: Cryptocurrencies have become exceedingly popular among investors seeking higher returns and diversification in their portfolios. However, investing in these digital currencies carries several inherent risks. Market volatility is a major factor \\u2013 cryptocurrencies can experience wild price swings, sometimes even within hours or minutes. This high volatility makes it difficult to predict the future value of the investments and can result in significant losses. Furthermore, the lack of regulatory oversight and security concerns may also lead to potential frauds and hacks, exposing investors to additional risk. Lastly, the environmental impact of mining digital currencies like Bitcoin has come under scrutiny, questioning the long-term sustainability of the cryptocurrency market.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"decapoda-research/llama-13b-hf\", \"api_call\": \"pipeline('text-generation', model='decapoda-research/llama-13b-hf')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"generator('Once upon a time')\", \"performance\": {\"dataset\": [{\"name\": \"BoolQ\", \"accuracy\": \"85.3\"}, {\"name\": \"PIQA\", \"accuracy\": \"82.8\"}, {\"name\": \"SIQA\", \"accuracy\": \"52.3\"}, {\"name\": \"HellaSwag\", \"accuracy\": \"84.2\"}, {\"name\": \"WinoGrande\", \"accuracy\": \"77\"}, {\"name\": \"ARC-e\", \"accuracy\": \"81.5\"}, {\"name\": \"ARC-c\", \"accuracy\": \"56\"}, {\"name\": \"OBQACOPA\", \"accuracy\": \"60.2\"}]}, \"description\": \"LLaMA-13B is an auto-regressive language model based on the transformer architecture developed by the FAIR team of Meta AI. It is designed for research purposes, such as question answering, natural language understanding, and reading comprehension. The model has been trained on a variety of sources, including web data, GitHub, Wikipedia, and books in 20 languages. It has been evaluated on several benchmarks, including BoolQ, PIQA, SIQA, HellaSwag, WinoGrande, ARC, and OpenBookQA.\"}}", "category": "generic"}
{"question_id": 145, "text": " You have just met a person that speaks French. As a hotel manager, you need to tell them, \\\"Welcome to our hotel, we hope you enjoy your stay.\\\" in French.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Multilingual Translation\", \"api_name\": \"facebook/m2m100_418M\", \"api_call\": \"M2M100ForConditionalGeneration.from_pretrained('facebook/m2m100_418M')\", \"api_arguments\": {\"encoded_input\": \"Encoded input text\", \"target_lang\": \"Target language code\"}, \"python_environment_requirements\": [\"transformers\", \"sentencepiece\"], \"example_code\": [\"from transformers import M2M100ForConditionalGeneration, M2M100Tokenizer\", \"hi_text = \", \"chinese_text = \", \"model = M2M100ForConditionalGeneration.from_pretrained(facebook/m2m100_418M)\", \"tokenizer = M2M100Tokenizer.from_pretrained(facebook/m2m100_418M)\", \"tokenizer.src_lang = hi\", \"encoded_hi = tokenizer(hi_text, return_tensors=pt)\", \"generated_tokens = model.generate(**encoded_hi, forced_bos_token_id=tokenizer.get_lang_id(fr))\", \"tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"WMT\", \"accuracy\": \"Not provided\"}, \"description\": \"M2M100 is a multilingual encoder-decoder (seq-to-seq) model trained for Many-to-Many multilingual translation. It can directly translate between the 9,900 directions of 100 languages. To translate into a target language, the target language id is forced as the first generated token.\"}}", "category": "generic"}
{"question_id": 146, "text": " They are planning a trip to Germany and want to spend some leisure time in the parks of Munich, find out how to ask a question about the location of parks in Munich in German.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Language model\", \"api_name\": \"google/flan-t5-large\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('google/flan-t5-large')\", \"api_arguments\": [\"input_text\", \"input_ids\", \"outputs\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import T5Tokenizer, T5ForConditionalGeneration\\ntokenizer = T5Tokenizer.from_pretrained(google/flan-t5-large)\\nmodel = T5ForConditionalGeneration.from_pretrained(google/flan-t5-large)\\ninput_text = translate English to German: How old are you?\\ninput_ids = tokenizer(input_text, return_tensors=pt).input_ids\\noutputs = model.generate(input_ids)\\nprint(tokenizer.decode(outputs[0]))\", \"performance\": {\"dataset\": [{\"name\": \"MMLU\", \"accuracy\": \"75.2%\"}]}, \"description\": \"FLAN-T5 large is a language model fine-tuned on over 1000 tasks and multiple languages. It achieves state-of-the-art performance on several benchmarks, including 75.2% on five-shot MMLU. The model is based on pretrained T5 and fine-tuned with instructions for better zero-shot and few-shot performance. It can be used for research on language models, zero-shot NLP tasks, in-context few-shot learning NLP tasks, reasoning, question answering, and advancing fairness and safety research.\"}}", "category": "generic"}
{"question_id": 147, "text": " We are a company offering speech to text services. We need to summarize the conversion and make it open-ended question.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"bart-large-cnn-samsum-ChatGPT_v3\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('Qiliang/bart-large-cnn-samsum-ChatGPT_v3')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"transformers==4.24.0\", \"torch==1.12.1\", \"datasets==2.6.1\", \"tokenizers==0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": \"unknown\"}, \"description\": \"This model is a fine-tuned version of philschmid/bart-large-cnn-samsum on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 148, "text": " To help me with my writing, I need an AI tool that can fill in the gaps for me when I get stuck. It should be able to complete phrases or sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"microsoft/deberta-v3-base\", \"api_call\": \"DebertaModel.from_pretrained('microsoft/deberta-v3-base')\", \"api_arguments\": [\"model_name_or_path\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline\\nfill_mask = pipeline('fill-mask', model='microsoft/deberta-v3-base')\\nresult = fill_mask('Hugging Face is a [MASK] company.')\", \"performance\": {\"dataset\": {\"SQuAD 2.0\": {\"F1\": 88.4, \"EM\": 85.4}, \"MNLI-m/mm\": {\"ACC\": \"90.6/90.7\"}}}, \"description\": \"DeBERTa V3 improves the BERT and RoBERTa models using disentangled attention and enhanced mask decoder. It further improves the efficiency of DeBERTa using ELECTRA-Style pre-training with Gradient Disentangled Embedding Sharing. The DeBERTa V3 base model comes with 12 layers and a hidden size of 768. It has only 86M backbone parameters with a vocabulary containing 128K tokens which introduces 98M parameters in the Embedding layer. This model was trained using the 160GB data as DeBERTa V2.\"}}", "category": "generic"}
{"question_id": 149, "text": " A writer needs help with generating the next word in the phrase \\\"The dog jumped over the\\\" __.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"microsoft/deberta-v2-xxlarge\", \"api_call\": \"DebertaV2ForMaskedLM.from_pretrained('microsoft/deberta-v2-xxlarge')\", \"api_arguments\": {\"model_name_or_path\": \"microsoft/deberta-v2-xxlarge\"}, \"python_environment_requirements\": {\"pip_install\": [\"datasets\", \"deepspeed\"]}, \"example_code\": \"python -m torch.distributed.launch --nproc_per_node=${num_gpus} run_glue.py --model_name_or_path microsoft/deberta-v2-xxlarge --task_name $TASK_NAME --do_train --do_eval --max_seq_length 256 --per_device_train_batch_size ${batch_size} --learning_rate 3e-6 --num_train_epochs 3 --output_dir $output_dir --overwrite_output_dir --logging_steps 10 --logging_dir $output_dir --deepspeed ds_config.json\", \"performance\": {\"dataset\": [{\"name\": \"SQuAD 1.1\", \"accuracy\": \"F1/EM: 96.1/91.4\"}, {\"name\": \"SQuAD 2.0\", \"accuracy\": \"F1/EM: 92.2/89.7\"}, {\"name\": \"MNLI-m/mm\", \"accuracy\": \"Acc: 91.7/91.9\"}, {\"name\": \"SST-2\", \"accuracy\": \"Acc: 97.2\"}, {\"name\": \"QNLI\", \"accuracy\": \"Acc: 96.0\"}, {\"name\": \"CoLA\", \"accuracy\": \"MCC: 72.0\"}, {\"name\": \"RTE\", \"accuracy\": \"Acc: 93.5\"}, {\"name\": \"MRPC\", \"accuracy\": \"Acc/F1: 93.1/94.9\"}, {\"name\": \"QQP\", \"accuracy\": \"Acc/F1: 92.7/90.3\"}, {\"name\": \"STS-B\", \"accuracy\": \"P/S: 93.2/93.1\"}]}, \"description\": \"DeBERTa improves the BERT and RoBERTa models using disentangled attention and enhanced mask decoder. It outperforms BERT and RoBERTa on majority of NLU tasks with 80GB training data. This is the DeBERTa V2 xxlarge model with 48 layers, 1536 hidden size. The total parameters are 1.5B and it is trained with 160GB raw data.\"}}", "category": "generic"}
{"question_id": 151, "text": " Help me find similarity scores for different restaurant reviews.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"flax-sentence-embeddings/all_datasets_v4_MiniLM-L6\", \"api_call\": \"SentenceTransformer('flax-sentence-embeddings/all_datasets_v4_MiniLM-L6')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"sentence-transformers library\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nmodel = SentenceTransformer('flax-sentence-embeddings/all_datasets_v4_MiniLM-L6')\\ntext = Replace me by any text you'd like.\\ntext_embbedding = model.encode(text)\", \"performance\": {\"dataset\": \"1,097,953,922\", \"accuracy\": \"N/A\"}, \"description\": \"The model is trained on very large sentence level datasets using a self-supervised contrastive learning objective. It is fine-tuned on a 1B sentence pairs dataset, and it aims to capture the semantic information of input sentences. The sentence vector can be used for information retrieval, clustering, or sentence similarity tasks.\"}}", "category": "generic"}
{"question_id": 152, "text": " Our company is building an automated assistance system for the visually impaired. We need a tool to convert text into spoken instructions.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_ljspeech_vits\", \"api_call\": \"pipeline('text-to-speech', model='espnet/kan-bayashi_ljspeech_vits')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline; tts = pipeline('text-to-speech', model='espnet/kan-bayashi_ljspeech_vits'); tts('Hello World')\", \"performance\": {\"dataset\": \"ljspeech\", \"accuracy\": \"Not mentioned\"}, \"description\": \"A Text-to-Speech model trained on the ljspeech dataset using the ESPnet toolkit. This model can be used to convert text input into synthesized speech.\"}}", "category": "generic"}
{"question_id": 153, "text": " I would like to create an application where users may listen to translations of English sentences. I need a Text-to-Speech model to support this functionality.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"mio/Artoria\", \"api_call\": \"pipeline('text-to-speech', model='mio/Artoria')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; tts = pipeline('text-to-speech', model='mio/Artoria'); tts('s')\", \"performance\": {\"dataset\": \"fate\", \"accuracy\": \"Not provided\"}, \"description\": \"This model was trained by mio using fate recipe in espnet. It is a text-to-speech model that can convert text input into speech output.\"}}", "category": "generic"}
{"question_id": 154, "text": " We are a language learning app platform. We need a text-to-speech tool to read a sentence in multiple languages for our users.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Speech-to-speech translation\", \"api_name\": \"facebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur')\", \"api_arguments\": {\"audio\": \"16000Hz mono channel audio\"}, \"python_environment_requirements\": [\"fairseq\", \"hub_utils\", \"huggingface_hub\", \"IPython.display\", \"torchaudio\"], \"example_code\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\", \"cache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub(\", \"facebook/xm_transformer_s2ut_800m-es-en-st-asr-bt_h1_2022,\", \"arg_overrides={config_yaml: config.yaml, task: speech_to_text},\", \"cache_dir=cache_dir,\", \")\", \"model = models[0].cpu()\", \"cfg[task].cpu = True\", \"generator = task.build_generator([model], cfg)\", \"# requires 16000Hz mono channel audio\", \"audio, _ = torchaudio.load(/Users/lpw/git/api-inference-community/docker_images/fairseq/tests/samples/sample2.flac)\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\", \"library_name = fairseq\", \"cache_dir = (\", \" cache_dir or (Path.home() / .cache / library_name).as_posix()\", \")\", \"cache_dir = snapshot_download(\", \" ffacebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur, cache_dir=cache_dir, library_name=library_name\", \")\", \"x = hub_utils.from_pretrained(\", \" cache_dir,\", \" model.pt,\", \" .,\", \" archive_map=CodeHiFiGANVocoder.hub_models(),\", \" config_yaml=config.json,\", \" fp16=False,\", \" is_vocoder=True,\", \")\", \"with open(f{x['args']['data']}/config.json) as f:\", \" vocoder_cfg = json.load(f)\", \"assert (\", \" len(x[args][model_path]) == 1\", \"), Too many vocoder models in the input\", \"vocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"], \"performance\": {\"dataset\": \"covost2\", \"accuracy\": null}, \"description\": \"Speech-to-speech translation model from fairseq S2UT (paper/code) for Spanish-English. Trained on mTEDx, CoVoST 2, Europarl-ST, and VoxPopuli.\"}}", "category": "generic"}
{"question_id": 155, "text": " I need to create an audio output that translates the given text to speech for a French audiobook assistant.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"facebook/tts_transformer-fr-cv7_css10\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/tts_transformer-fr-cv7_css10')\", \"api_arguments\": {\"text\": \"string\"}, \"python_environment_requirements\": [\"fairseq\"], \"example_code\": \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.text_to_speech.hub_interface import TTSHubInterface\\nimport IPython.display as ipd\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/tts_transformer-fr-cv7_css10,\\n arg_overrides={vocoder: hifigan, fp16: False}\\n)\\nmodel = models[0]\\nTTSHubInterface.update_cfg_with_data_cfg(cfg, task.data_cfg)\\ngenerator = task.build_generator(model, cfg)\\ntext = Bonjour, ceci est un test.\\nsample = TTSHubInterface.get_model_input(task, text)\\nwav, rate = TTSHubInterface.get_prediction(task, model, generator, sample)\\nipd.Audio(wav, rate=rate)\", \"performance\": {\"dataset\": \"common_voice\", \"accuracy\": \"N/A\"}, \"description\": \"Transformer text-to-speech model from fairseq S^2. French, single-speaker male voice. Pre-trained on Common Voice v7, fine-tuned on CSS10.\"}}", "category": "generic"}
{"question_id": 156, "text": " We are opening a platform where users can record their own podcast and host it on our platform, can you help us to convert the audio into text automatically?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Transformers\", \"functionality\": \"Transcription\", \"api_name\": \"facebook/wav2vec2-base-960h\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('facebook/wav2vec2-base-960h')\", \"api_arguments\": [\"input_values\"], \"python_environment_requirements\": [\"transformers\", \"datasets\", \"torch\", \"jiwer\"], \"example_code\": \"from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC\\nfrom datasets import load_dataset\\nimport torch\\nprocessor = Wav2Vec2Processor.from_pretrained('facebook/wav2vec2-base-960h')\\nmodel = Wav2Vec2ForCTC.from_pretrained('facebook/wav2vec2-base-960h')\\nds = load_dataset('patrickvonplaten/librispeech_asr_dummy', 'clean', split='validation')\\ninput_values = processor(ds[0]['audio']['array'], return_tensors='pt', padding='longest').input_values\\nlogits = model(input_values).logits\\npredicted_ids = torch.argmax(logits, dim=-1)\\ntranscription = processor.batch_decode(predicted_ids)\", \"performance\": {\"dataset\": \"LibriSpeech\", \"accuracy\": {\"clean\": 3.4, \"other\": 8.6}}, \"description\": \"Facebook's Wav2Vec2 base model pretrained and fine-tuned on 960 hours of Librispeech on 16kHz sampled speech audio. It is designed for automatic speech recognition and can transcribe audio files.\"}}", "category": "generic"}
{"question_id": 157, "text": " We are currently working on the development of a speech-to-text application for transcription purposes. Can you help generate the required transcription code?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription\", \"api_name\": \"openai/whisper-tiny.en\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny.en')\", \"api_arguments\": {\"model_name\": \"openai/whisper-tiny.en\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\", \"torch\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained(openai/whisper-tiny.en)\", \"model = WhisperForConditionalGeneration.from_pretrained(openai/whisper-tiny.en)\", \"ds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\", \"sample = ds[0][audio]\", \"input_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean)\", \"accuracy\": 8.437}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 158, "text": " We are building an app for tour guides to transcribe what they say during the tour. Then the transcript will be translated into sign language.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Automatic Speech Recognition and Speech Translation\", \"api_name\": \"openai/whisper-base\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-base')\", \"api_arguments\": {\"model_name\": \"openai/whisper-base\", \"input_features\": \"input_features\", \"forced_decoder_ids\": \"forced_decoder_ids\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained(openai/whisper-base)\", \"model = WhisperForConditionalGeneration.from_pretrained(openai/whisper-base)\", \"ds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\", \"sample = ds[0][audio]\", \"input_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean) test set\", \"accuracy\": \"5.009 WER\"}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 159, "text": " I am an English teacher. I have recently met a Hokkien speaker. I am looking to translate a conversational sentence from English to Hokkien to facilitate communication.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"xm_transformer_s2ut_en-hk\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')\", \"api_arguments\": {\"arg_overrides\": {\"config_yaml\": \"config.yaml\", \"task\": \"speech_to_text\"}, \"cache_dir\": \"cache_dir\"}, \"python_environment_requirements\": [\"fairseq\", \"huggingface_hub\", \"torchaudio\"], \"example_code\": {\"import_modules\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\"], \"load_model\": [\"cache_dir = os.getenv('HUGGINGFACE_HUB_CACHE')\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk', arg_overrides={'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, cache_dir=cache_dir)\", \"model = models[0].cpu()\", \"cfg['task'].cpu = True\"], \"generate_prediction\": [\"generator = task.build_generator([model], cfg)\", \"audio, _ = torchaudio.load('/path/to/an/audio/file')\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\"], \"speech_synthesis\": [\"library_name = 'fairseq'\", \"cache_dir = (cache_dir or (Path.home() / '.cache' / library_name).as_posix())\", \"cache_dir = snapshot_download('facebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS', cache_dir=cache_dir, library_name=library_name)\", \"x = hub_utils.from_pretrained(cache_dir, 'model.pt', '.', archive_map=CodeHiFiGANVocoder.hub_models(), config_yaml='config.json', fp16=False, is_vocoder=True)\", \"with open(f'{x['args']['data']}/config.json') as f:\", \"  vocoder_cfg = json.load(f)\", \"assert (len(x['args']['model_path']) == 1), 'Too many vocoder models in the input'\", \"vocoder = CodeHiFiGANVocoder(x['args']['model_path'][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"]}, \"performance\": {\"dataset\": \"MuST-C\", \"accuracy\": \"Not specified\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq: English-Hokkien. Trained with supervised data in TED domain, and weakly supervised data in TED and Audiobook domain.\"}}", "category": "generic"}
{"question_id": 160, "text": " Determine the keyword spoken in a recorded audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/hubert-base-superb-ks\", \"api_call\": \"pipeline('audio-classification', model='superb/hubert-base-superb-ks')\", \"api_arguments\": [\"file\", \"top_k\"], \"python_environment_requirements\": [\"datasets\", \"transformers\", \"torchaudio\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, ks, split=test)\\nclassifier = pipeline(audio-classification, model=superb/hubert-base-superb-ks)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"Speech Commands dataset v1.0\", \"accuracy\": 0.9672}, \"description\": \"This is a ported version of S3PRL's Hubert for the SUPERB Keyword Spotting task. The base model is hubert-base-ls960, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 161, "text": " Determine which speaker an audio segment belongs to using the provided audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speaker Verification\", \"api_name\": \"speechbrain/spkrec-xvect-voxceleb\", \"api_call\": \"EncoderClassifier.from_hparams(source='speechbrain/spkrec-xvect-voxceleb', savedir='pretrained_models/spkrec-xvect-voxceleb')\", \"api_arguments\": [\"source\", \"savedir\"], \"python_environment_requirements\": [\"pip install speechbrain\"], \"example_code\": \"import torchaudio\\nfrom speechbrain.pretrained import EncoderClassifier\\nclassifier = EncoderClassifier.from_hparams(source=speechbrain/spkrec-xvect-voxceleb, savedir=pretrained_models/spkrec-xvect-voxceleb)\\nsignal, fs =torchaudio.load('tests/samples/ASR/spk1_snt1.wav')\\nembeddings = classifier.encode_batch(signal)\", \"performance\": {\"dataset\": \"Voxceleb1-test set (Cleaned)\", \"accuracy\": \"EER(%) 3.2\"}, \"description\": \"This repository provides all the necessary tools to extract speaker embeddings with a pretrained TDNN model using SpeechBrain. The system is trained on Voxceleb 1+ Voxceleb2 training data.\"}}", "category": "generic"}
{"question_id": 162, "text": " We have a database of customer voices and are trying to build a voice recognition product so we can recognize customer voices when they call. How should we process and classify?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/hubert-large-superb-sid\", \"api_call\": \"pipeline('audio-classification', model='superb/hubert-large-superb-sid')\", \"api_arguments\": \"file, top_k\", \"python_environment_requirements\": \"datasets, transformers, librosa\", \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, si, split=test)\\nclassifier = pipeline(audio-classification, model=superb/hubert-large-superb-sid)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"VoxCeleb1\", \"accuracy\": 0.9035}, \"description\": \"Hubert-Large for Speaker Identification. This model is pretrained on 16kHz sampled speech audio and should be used with speech input also sampled at 16Khz. It is used for the SUPERB Speaker Identification task and can classify each utterance for its speaker identity as a multi-class classification.\"}}", "category": "generic"}
{"question_id": 163, "text": " We are developing a voice-controlled drone. Please identify the spoken command in the audio clip provided.\\n###Input: \\\"audio_clip.wav\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"mazkooleg/0-9up-unispeech-sat-base-ft\", \"api_call\": \"pipeline('audio-classification', model='mazkooleg/0-9up-unispeech-sat-base-ft')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.27.1, pytorch==1.11.0, datasets==2.10.1, tokenizers==0.12.1\", \"example_code\": \"\", \"performance\": {\"dataset\": \"mazkooleg/0-9up_google_speech_commands_augmented_raw\", \"accuracy\": 0.9979}, \"description\": \"This model is a fine-tuned version of microsoft/unispeech-sat-base on the None dataset. It achieves the following results on the evaluation set: Loss: 0.0123, Accuracy: 0.9979.\"}}", "category": "generic"}
{"question_id": 164, "text": " Make a summary video for our last team meeting. The audio from the video must identify who is speaking and when.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"pyannote.audio\", \"functionality\": \"Speaker diarization\", \"api_name\": \"johnislarry/cloned-pyannote-speaker-diarization-endpoint\", \"api_call\": \"Pipeline.from_pretrained('pyannote/speaker-diarization@2.1',use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": [\"num_speakers\", \"min_speakers\", \"max_speakers\", \"segmentation_onset\"], \"python_environment_requirements\": \"pyannote.audio 2.0\", \"example_code\": {\"load_pipeline\": \"from pyannote.audio import Pipeline\\npipeline = Pipeline.from_pretrained(pyannote/speaker-diarization@2022.07)\", \"apply_pipeline\": \"diarization = pipeline(audio.wav)\", \"save_output\": \"with open(audio.rttm, w) as rttm:\\n  diarization.write_rttm(rttm)\"}, \"performance\": {\"dataset\": [{\"name\": \"AISHELL-4\", \"accuracy\": {\"DER%\": 14.61, \"FA%\": 3.31, \"Miss%\": 4.35, \"Conf%\": 6.95}}, {\"name\": \"AMI Mix-Headset only_words\", \"accuracy\": {\"DER%\": 18.21, \"FA%\": 3.28, \"Miss%\": 11.07, \"Conf%\": 3.87}}, {\"name\": \"AMI Array1-01 only_words\", \"accuracy\": {\"DER%\": 29.0, \"FA%\": 2.71, \"Miss%\": 21.61, \"Conf%\": 4.68}}, {\"name\": \"CALLHOME Part2\", \"accuracy\": {\"DER%\": 30.24, \"FA%\": 3.71, \"Miss%\": 16.86, \"Conf%\": 9.66}}, {\"name\": \"DIHARD 3 Full\", \"accuracy\": {\"DER%\": 20.99, \"FA%\": 4.25, \"Miss%\": 10.74, \"Conf%\": 6.0}}, {\"name\": \"REPERE Phase 2\", \"accuracy\": {\"DER%\": 12.62, \"FA%\": 1.55, \"Miss%\": 3.3, \"Conf%\": 7.76}}, {\"name\": \"VoxConverse v0.0.2\", \"accuracy\": {\"DER%\": 12.76, \"FA%\": 3.45, \"Miss%\": 3.85, \"Conf%\": 5.46}}]}, \"description\": \"This API provides speaker diarization functionality using the pyannote.audio framework. It is capable of processing audio files and outputting speaker diarization results in RTTM format. The API supports providing the number of speakers, minimum and maximum number of speakers, and adjusting the segmentation onset threshold.\"}}", "category": "generic"}
{"question_id": 165, "text": " I want to estimate the price of a house based on its features using this API. Please provide the code.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Single Column Regression\", \"api_name\": \"jwan2021/autotrain-us-housing-prices-1771761513\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"jwan2021/autotrain-data-us-housing-prices\", \"accuracy\": {\"Loss\": 100581.032, \"R2\": 0.922, \"MSE\": 10116543945.03, \"MAE\": 81586.656, \"RMSLE\": 0.101}}, \"description\": \"A single column regression model for predicting US housing prices, trained with AutoTrain and using the Joblib framework.\"}}", "category": "generic"}
{"question_id": 166, "text": " Our company wants to predict housing prices in the US based on given features. Help us use the trained model to predict the prices.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Single Column Regression\", \"api_name\": \"jwan2021/autotrain-us-housing-prices-1771761511\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": {\"data\": \"pandas.DataFrame\"}, \"python_environment_requirements\": {\"joblib\": \"latest\", \"pandas\": \"latest\"}, \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"jwan2021/autotrain-data-us-housing-prices\", \"accuracy\": {\"Loss\": 134406.507, \"R2\": 0.861, \"MSE\": 18065109105.27, \"MAE\": 103271.843, \"RMSLE\": 0.139}}, \"description\": \"A model trained using AutoTrain for predicting US housing prices. The model is trained on the jwan2021/autotrain-data-us-housing-prices dataset and is a single column regression model with an ID of 1771761511.\"}}", "category": "generic"}
{"question_id": 167, "text": " An environmental organization would like to use our Carbon Emissions prediction model to estimate CO2 emissions of different configurations of vehicles.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"pcoloc/autotrain-600-dragino-1839063122\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"pcoloc/autotrain-data-600-dragino\", \"accuracy\": {\"Loss\": 93.595, \"R2\": 0.502, \"MSE\": 8760.052, \"MAE\": 77.527, \"RMSLE\": 0.445}}, \"description\": \"This model is trained to perform single column regression on carbon emissions data using the AutoTrain framework. It predicts CO2 emissions in grams given the input data.\"}}", "category": "generic"}
{"question_id": 168, "text": " I am a data analyst working in pollution detection, find a model and develop a piece of code for me for environment monitoring.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"pcoloc/autotrain-only-rssi-1813762559\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": {\"data\": \"data.csv\"}, \"python_environment_requirements\": {\"joblib\": \"latest\", \"pandas\": \"latest\"}, \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": {\"Loss\": 83.432, \"R2\": 0.312, \"MSE\": 6960.888, \"MAE\": 60.449, \"RMSLE\": 0.532}}, \"description\": \"A tabular regression model trained using AutoTrain for estimating carbon emissions from given features.\"}}", "category": "generic"}
{"question_id": 169, "text": " We want to develop an intelligent prosthetic leg that can improve walking. Use a decision transformer to predict actions to be taken.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"edbeeching/decision-transformer-gym-walker2d-expert\", \"api_call\": \"AutoModel.from_pretrained('edbeeching/decision-transformer-gym-walker2d-expert')\", \"api_arguments\": {\"mean\": [1.2384834, 0.19578537, -0.10475016, -0.18579608, 0.23003316, 0.022800924, -0.37383768, 0.337791, 3.925096, -0.0047428459, 0.025267061, -0.0039287535, -0.01736751, -0.48212224, 0.00035432147, -0.0037124525, 0.0026285544], \"std\": [0.06664903, 0.16980624, 0.17309439, 0.21843709, 0.74599105, 0.02410989, 0.3729872, 0.6226182, 0.9708009, 0.72936815, 1.504065, 2.495893, 3.511518, 5.3656907, 0.79503316, 4.317483, 6.1784487]}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"See our Blog Post, Colab notebook or Example Script for usage.\", \"performance\": {\"dataset\": \"Gym Walker2d environment\", \"accuracy\": \"Not provided\"}, \"description\": \"Decision Transformer model trained on expert trajectories sampled from the Gym Walker2d environment.\"}}", "category": "generic"}
{"question_id": 170, "text": " You want to create a bot that can play the Pong No Frameskip-v4 game with exceptional skill.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"deep-reinforcement-learning\", \"api_name\": \"ppo-PongNoFrameskip-v4\", \"api_call\": \"load_from_hub(repo_id='sb3/ppo-PongNoFrameskip-v4',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"RL Zoo\", \"SB3\", \"SB3 Contrib\"], \"example_code\": \"python -m rl_zoo3.load_from_hub --algo ppo --env PongNoFrameskip-v4 -orga sb3 -f logs/\", \"performance\": {\"dataset\": \"PongNoFrameskip-v4\", \"accuracy\": \"21.00 +/- 0.00\"}, \"description\": \"This is a trained model of a PPO agent playing PongNoFrameskip-v4 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 171, "text": " I am a game developer working on a game project involving moving carts. I need to use reinforcement learning to improve the game experience.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"CartPole-v1\", \"api_name\": \"sb3/ppo-CartPole-v1\", \"api_call\": \"load_from_hub(repo_id='sb3/ppo-CartPole-v1',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"rl_zoo3\", \"stable-baselines3\", \"stable-baselines3-contrib\"], \"example_code\": \"python -m rl_zoo3.load_from_hub --algo ppo --env CartPole-v1 -orga sb3 -f logs/\", \"performance\": {\"dataset\": \"CartPole-v1\", \"accuracy\": \"500.00 +/- 0.00\"}, \"description\": \"This is a trained model of a PPO agent playing CartPole-v1 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 172, "text": " Develop a soccer playing agent that can outperform its opponents in a 2v2 environment.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"ML-Agents\", \"functionality\": \"SoccerTwos\", \"api_name\": \"Raiden-1001/poca-Soccerv7\", \"api_call\": \"mlagents-load-from-hf --repo-id='Raiden-1001/poca-Soccerv7.1' --local-dir='./downloads'\", \"api_arguments\": [\"your_configuration_file_path.yaml\", \"run_id\"], \"python_environment_requirements\": [\"unity-ml-agents\", \"deep-reinforcement-learning\", \"ML-Agents-SoccerTwos\"], \"example_code\": \"Step 1: Write your model_id: Raiden-1001/poca-Soccerv7\\nStep 2: Select your .nn /.onnx file\\nClick on Watch the agent play \\ud83d\\udc40\", \"performance\": {\"dataset\": \"SoccerTwos\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library.\"}}", "category": "generic"}
{"question_id": 173, "text": " We are tasked to analyze text for a Russian newspaper to help understand general sentiment and trends in the text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"sberbank-ai/sbert_large_mt_nlu_ru\", \"api_call\": \"AutoModel.from_pretrained('sberbank-ai/sbert_large_mt_nlu_ru')\", \"api_arguments\": [\"sentences\", \"padding\", \"truncation\", \"max_length\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModel\\nimport torch\\n\\n# Mean Pooling - Take attention mask into account for correct averaging\\ndef mean_pooling(model_output, attention_mask):\\n    token_embeddings = model_output[0]  # First element of model_output contains all token embeddings\\n    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()\\n    sum_embeddings = torch.sum(token_embeddings * input_mask_expanded, 1)\\n    sum_mask = torch.clamp(input_mask_expanded.sum(1), min=1e-9)\\n    return sum_embeddings / sum_mask\\n\\n# Sentences we want sentence embeddings for sentences = ['?']\\n# Load AutoModel from huggingface model repository\\ntokenizer = AutoTokenizer.from_pretrained(sberbank-ai/sbert_large_mt_nlu_ru)\\nmodel = AutoModel.from_pretrained(sberbank-ai/sbert_large_mt_nlu_ru)\\n# Tokenize sentences\\nencoded_input = tokenizer(sentences, padding=True, truncation=True, max_length=24, return_tensors='pt')\\n# Compute token embeddings\\nwith torch.no_grad():\\n    model_output = model(**encoded_input)\\n# Perform pooling. In this case, mean pooling\\nsentence_embeddings = mean_pooling(model_output, encoded_input['attention_mask'])\", \"performance\": {\"dataset\": \"Russian SuperGLUE\", \"accuracy\": \"Not provided\"}, \"description\": \"BERT large model multitask (cased) for Sentence Embeddings in Russian language.\"}}", "category": "generic"}
{"question_id": 174, "text": " We want to generate an image from a textual description for our PowerPoint presentation.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"stabilityai/sd-vae-ft-ema\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('CompVis/stable-diffusion-v1-4', vae=AutoencoderKL.from_pretrained('stabilityai/sd-vae-ft-ema'))\", \"api_arguments\": {\"model\": \"CompVis/stable-diffusion-v1-4\", \"vae\": \"AutoencoderKL.from_pretrained(stabilityai/sd-vae-ft-ema)\"}, \"python_environment_requirements\": {\"diffusers\": \"diffusers library\"}, \"example_code\": \"from diffusers.models import AutoencoderKL\\nfrom diffusers import StableDiffusionPipeline\\nmodel = CompVis/stable-diffusion-v1-4\\nvae = AutoencoderKL.from_pretrained(stabilityai/sd-vae-ft-ema)\\npipe = StableDiffusionPipeline.from_pretrained(model, vae=vae)\", \"performance\": {\"dataset\": {\"COCO 2017 (256x256, val, 5000 images)\": {\"accuracy\": {\"rFID\": 4.42, \"PSNR\": \"23.8 +/- 3.9\", \"SSIM\": \"0.69 +/- 0.13\", \"PSIM\": \"0.96 +/- 0.27\"}}, \"LAION-Aesthetics 5+ (256x256, subset, 10000 images)\": {\"accuracy\": {\"rFID\": 1.77, \"PSNR\": \"26.7 +/- 4.8\", \"SSIM\": \"0.82 +/- 0.12\", \"PSIM\": \"0.67 +/- 0.34\"}}}}, \"description\": \"This is a fine-tuned VAE decoder for the Stable Diffusion Pipeline. It has been fine-tuned on a 1:1 ratio of LAION-Aesthetics and LAION-Humans datasets. The decoder can be used as a drop-in replacement for the existing autoencoder.\"}}", "category": "generic"}
{"question_id": 175, "text": " A new manga has been released and we would like to provide a manga reader app with translations. Get the text from the manga image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"kha-white/manga-ocr-base\", \"api_call\": \"pipeline('ocr', model='kha-white/manga-ocr-base')\", \"api_arguments\": \"image\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"manga109s\", \"accuracy\": \"\"}, \"description\": \"Optical character recognition for Japanese text, with the main focus being Japanese manga. It uses Vision Encoder Decoder framework. Manga OCR can be used as a general purpose printed Japanese OCR, but its main goal was to provide a high quality text recognition, robust against various scenarios specific to manga: both vertical and horizontal text, text with furigana, text overlaid on images, wide variety of fonts and font styles, and low quality images.\"}}", "category": "generic"}
{"question_id": 176, "text": " We are building a social media site which creates automatic captions for users when they post a picture\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Captioning\", \"api_name\": \"nlpconnect/vit-gpt2-image-captioning\", \"api_call\": \"VisionEncoderDecoderModel.from_pretrained('nlpconnect/vit-gpt2-image-captioning')\", \"api_arguments\": {\"model\": \"nlpconnect/vit-gpt2-image-captioning\"}, \"python_environment_requirements\": [\"transformers\", \"torch\", \"PIL\"], \"example_code\": \"from transformers import VisionEncoderDecoderModel, ViTImageProcessor, AutoTokenizer\\nimport torch\\nfrom PIL import Image\\nmodel = VisionEncoderDecoderModel.from_pretrained(nlpconnect/vit-gpt2-image-captioning)\\nfeature_extractor = ViTImageProcessor.from_pretrained(nlpconnect/vit-gpt2-image-captioning)\\ntokenizer = AutoTokenizer.from_pretrained(nlpconnect/vit-gpt2-image-captioning)\\ndevice = torch.device(cuda if torch.cuda.is_available() else cpu)\\nmodel.to(device)\\nmax_length = 16\\nnum_beams = 4\\ngen_kwargs = {max_length: max_length, num_beams: num_beams}\\ndef predict_step(image_paths):\\n images = []\\n for image_path in image_paths:\\n i_image = Image.open(image_path)\\n if i_image.mode != RGB:\\n i_image = i_image.convert(mode=RGB)\\nimages.append(i_image)\\npixel_values = feature_extractor(images=images, return_tensors=pt).pixel_values\\n pixel_values = pixel_values.to(device)\\noutput_ids = model.generate(pixel_values, **gen_kwargs)\\npreds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)\\n preds = [pred.strip() for pred in preds]\\n return preds\\npredict_step(['doctor.e16ba4e4.jpg']) # ['a woman in a hospital bed with a woman in a hospital bed']\", \"performance\": {\"dataset\": \"Not provided\", \"accuracy\": \"Not provided\"}, \"description\": \"An image captioning model that uses transformers to generate captions for input images. The model is based on the Illustrated Image Captioning using transformers approach.\"}}", "category": "generic"}
{"question_id": 177, "text": " There is robot in our factory which reads the image from the production line and then generate a text output based on the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-r-textcaps\", \"api_call\": \"pipeline('text-generation', model='microsoft/git-large-r-textcaps')\", \"api_arguments\": \"image\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"TextCaps\", \"accuracy\": \"\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextCaps. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).\"}}", "category": "generic"}
{"question_id": 178, "text": " I am a filmmaker, and I need to make a short video based on a scene description from a script.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video\", \"api_name\": \"ImRma/Brucelee\", \"api_call\": \"pipeline('text-to-video', model='ImRma/Brucelee')\", \"api_arguments\": [\"your_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Hugging Face model for converting Persian and English text into video.\"}}", "category": "generic"}
{"question_id": 179, "text": " I'm an author and want to create a short video based on a brief passage from my book. Can you generate a video based on this text?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video\", \"api_name\": \"camenduru/text2-video-zero\", \"api_call\": \"pipeline('text-to-video', model='camenduru/text2-video-zero')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"This model is used for generating videos from text inputs. It is based on the Hugging Face framework and can be used with the transformers library. The model is trained on a variety of text and video datasets, and can be used for tasks such as video summarization, video generation from text prompts, and more.\"}}", "category": "generic"}
{"question_id": 180, "text": " I want to build an AI model that can analyze images and answer questions about the content of the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-textvqa\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/git-large-textvqa')\", \"api_arguments\": \"image, question\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"TextVQA\", \"accuracy\": \"See table 11 in the paper for more details.\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextVQA. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like: image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).\"}}", "category": "generic"}
{"question_id": 181, "text": " We are trying to develop an application that helps tourists get information about attractions by analyzing images they take and responding to questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\", \"api_call\": \"pipeline('visual-question-answering', model='JosephusCheung/GuanacoVQAOnConsumerHardware')\", \"api_arguments\": {\"model\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\", \"tokenizer\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"torch\": \"latest\"}, \"example_code\": \"vqa(image_path, question)\", \"performance\": {\"dataset\": \"JosephusCheung/GuanacoVQADataset\", \"accuracy\": \"unknown\"}, \"description\": \"A Visual Question Answering model trained on the GuanacoVQADataset, designed to work on consumer hardware like Colab Free T4 GPU. The model can be used to answer questions about images.\"}}", "category": "generic"}
{"question_id": 182, "text": " We have the financial documents of a company and we want to extract information about the cash flow. Modify the model so it can answer the questions related to the cash flow.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"CZ_DVQA_layoutxlm-base\", \"api_call\": \"LayoutXLMForQuestionAnswering.from_pretrained('fimu-docproc-research/CZ_DVQA_layoutxlm-base')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Document Question Answering model based on LayoutXLM.\"}}", "category": "generic"}
{"question_id": 183, "text": " Please generate a correct building plan leveraging the data given.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"LayoutLMX_pt_question_answer_ocrazure_correct_V18_08_04_2023\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V18_08_04_2023')\", \"api_arguments\": {\"question\": \"string\", \"context\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A LayoutLM model for document question answering.\"}}", "category": "generic"}
{"question_id": 184, "text": " Help our drone video analyzing app estimate the depth in drone footage.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"tiny-random-DPTForDepthEstimation\", \"api_call\": \"DPTForDepthEstimation.from_pretrained('hf-tiny-model-private/tiny-random-DPTForDepthEstimation')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random DPT model for depth estimation using Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 185, "text": " As a salesperson, I need to analyze customer invoices to answer questions about the total amount, tax, and due date from an image file.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"CQI_Visual_Question_Awnser_PT_v0\", \"api_call\": \"pipeline('question-answering', model=LayoutLMForQuestionAnswering.from_pretrained('microsoft/layoutlm-base-uncased'))\", \"api_arguments\": [\"url\", \"question\"], \"python_environment_requirements\": [\"PIL\", \"pytesseract\", \"PyTorch\", \"transformers\"], \"example_code\": [\"nlp('https://templates.invoicehome.com/invoice-template-us-neat-750px.png', 'What is the invoice number?')\", \"nlp('https://miro.medium.com/max/787/1*iECQRIiOGTmEFLdWkVIH2g.jpeg', 'What is the purchase amount?')\", \"nlp('https://www.accountingcoach.com/wp-content/uploads/2013/10/income-statement-example@2x.png', 'What are the 2020 net sales?')\"], \"performance\": {\"dataset\": [{\"accuracy\": 0.9943977}, {\"accuracy\": 0.9912159}, {\"accuracy\": 0.59147286}]}, \"description\": \"A model for visual question answering in Portuguese and English, capable of processing PDFs and images to extract information and answer questions.\"}}", "category": "generic"}
{"question_id": 186, "text": " We need to find out the depth information of a room for monitoring purposes.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-nyu-finetuned-diode-221116-104421\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-104421')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.24.0, pytorch==1.12.1+cu113, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3736, \"Mae\": 0.3079, \"Rmse\": 0.4321, \"Abs Rel\": 0.3666, \"Log Mae\": 0.1288, \"Log Rmse\": 0.1794, \"Delta1\": 0.4929, \"Delta2\": 0.7934, \"Delta3\": 0.9234}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 187, "text": " We are creating an autonomous car and need to estimate the depth of objects in a given scene.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-044810\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode-221122-044810')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.24.0, torch==1.12.1, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.369, \"Mae\": 0.2909, \"Rmse\": 0.4208, \"Abs Rel\": 0.3635, \"Log Mae\": 0.1224, \"Log Rmse\": 0.1793, \"Delta1\": 0.5323, \"Delta2\": 0.8179, \"Delta3\": 0.9258}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 188, "text": " Help us create an AI solution to automatically label images taken by a security camera.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"facebook/regnet-y-008\", \"api_call\": \"RegNetForImageClassification.from_pretrained('zuppif/regnet-y-040')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"zuppif/regnet-y-040\"}, \"python_environment_requirements\": {\"transformers\": \"AutoFeatureExtractor, RegNetForImageClassification\", \"torch\": \"torch\", \"datasets\": \"load_dataset\"}, \"example_code\": \"from transformers import AutoFeatureExtractor, RegNetForImageClassification\\nimport torch\\nfrom datasets import load_dataset\\ndataset = load_dataset(huggingface/cats-image)\\nimage = dataset[test][image][0]\\nfeature_extractor = AutoFeatureExtractor.from_pretrained(zuppif/regnet-y-040)\\nmodel = RegNetForImageClassification.from_pretrained(zuppif/regnet-y-040)\\ninputs = feature_extractor(image, return_tensors=pt)\\nwith torch.no_grad():\\n... logits = model(**inputs).logits\\npredicted_label = logits.argmax(-1).item()\\nprint(model.config.id2label[predicted_label])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"RegNet model trained on imagenet-1k. It was introduced in the paper Designing Network Design Spaces and first released in this repository.\"}}", "category": "generic"}
{"question_id": 189, "text": " Develop a software to classify an image from a URL into a thousand categories.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification, Feature Map Extraction, Image Embeddings\", \"api_name\": \"convnext_base.fb_in1k\", \"api_call\": \"timm.create_model('convnext_base.fb_in1k', pretrained=True)\", \"api_arguments\": {\"pretrained\": \"True\", \"features_only\": \"True\", \"num_classes\": \"0\"}, \"python_environment_requirements\": [\"timm\"], \"example_code\": [\"from urllib.request import urlopen\", \"from PIL import Image\", \"import timm\", \"img = Image.open(urlopen('https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'))\", \"model = timm.create_model('convnext_base.fb_in1k', pretrained=True)\", \"model = model.eval()\", \"data_config = timm.data.resolve_model_data_config(model)\", \"transforms = timm.data.create_transform(**data_config, is_training=False)\", \"output = model(transforms(img).unsqueeze(0))\"], \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"83.82%\"}, \"description\": \"A ConvNeXt image classification model pretrained on ImageNet-1k by paper authors. It can be used for image classification, feature map extraction, and image embeddings.\"}}", "category": "generic"}
{"question_id": 190, "text": " Our delivery drones need to detect and avoid obstacles while flying. Develop a solution for them to detect objects in their path.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"hustvl/yolos-small\", \"api_call\": \"YolosForObjectDetection.from_pretrained('hustvl/yolos-small')\", \"api_arguments\": {\"model_name\": \"hustvl/yolos-small\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": {\"import\": [\"from transformers import YolosFeatureExtractor, YolosForObjectDetection\", \"from PIL import Image\", \"import requests\"], \"url\": \"http://images.cocodataset.org/val2017/000000039769.jpg\", \"image\": \"Image.open(requests.get(url, stream=True).raw)\", \"feature_extractor\": \"YolosFeatureExtractor.from_pretrained('hustvl/yolos-small')\", \"model\": \"YolosForObjectDetection.from_pretrained('hustvl/yolos-small')\", \"inputs\": \"feature_extractor(images=image, return_tensors='pt')\", \"outputs\": \"model(**inputs)\", \"logits\": \"outputs.logits\", \"bboxes\": \"outputs.pred_boxes\"}, \"performance\": {\"dataset\": \"COCO 2017 validation\", \"accuracy\": \"36.1 AP\"}, \"description\": \"YOLOS model fine-tuned on COCO 2017 object detection (118k annotated images). It was introduced in the paper You Only Look at One Sequence: Rethinking Transformer in Vision through Object Detection by Fang et al. and first released in this repository. YOLOS is a Vision Transformer (ViT) trained using the DETR loss. Despite its simplicity, a base-sized YOLOS model is able to achieve 42 AP on COCO validation 2017 (similar to DETR and more complex frameworks such as Faster R-CNN).\"}}", "category": "generic"}
{"question_id": 191, "text": " Develop a code to recognize objects in images using deformable-detr model.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"deformable-detr\", \"api_call\": \"DeformableDetrForObjectDetection.from_pretrained('SenseTime/deformable-detr')\", \"api_arguments\": [\"images\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"torch\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import AutoImageProcessor, DeformableDetrForObjectDetection\\nimport torch\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = AutoImageProcessor.from_pretrained('SenseTime/deformable-detr')\\nmodel = DeformableDetrForObjectDetection.from_pretrained('SenseTime/deformable-detr')\\ninputs = processor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"COCO 2017\", \"accuracy\": \"Not provided\"}, \"description\": \"Deformable DETR model with ResNet-50 backbone trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paper Deformable DETR: Deformable Transformers for End-to-End Object Detection by Zhu et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 192, "text": " I need to extract tables from a set of scanned document images to simplify data analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Detect Bordered and Borderless tables in documents\", \"api_name\": \"TahaDouaji/detr-doc-table-detection\", \"api_call\": \"DetrForObjectDetection.from_pretrained('TahaDouaji/detr-doc-table-detection')\", \"api_arguments\": [\"images\", \"return_tensors\", \"threshold\"], \"python_environment_requirements\": [\"transformers\", \"torch\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import DetrImageProcessor, DetrForObjectDetection\\nimport torch\\nfrom PIL import Image\\nimport requests\\nimage = Image.open(IMAGE_PATH)\\nprocessor = DetrImageProcessor.from_pretrained(TahaDouaji/detr-doc-table-detection)\\nmodel = DetrForObjectDetection.from_pretrained(TahaDouaji/detr-doc-table-detection)\\ninputs = processor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\ntarget_sizes = torch.tensor([image.size[::-1]])\\nresults = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]\\nfor score, label, box in zip(results[scores], results[labels], results[boxes]):\\n box = [round(i, 2) for i in box.tolist()]\\n print(\\n fDetected {model.config.id2label[label.item()]} with confidence \\n f{round(score.item(), 3)} at location {box}\\n )\", \"performance\": {\"dataset\": \"ICDAR2019 Table Dataset\", \"accuracy\": \"Not provided\"}, \"description\": \"detr-doc-table-detection is a model trained to detect both Bordered and Borderless tables in documents, based on facebook/detr-resnet-50.\"}}", "category": "generic"}
{"question_id": 193, "text": " Our customers wish to automatically detect shoplifters in the store using a surveillance camera. Help them to implement object detection and identify potential thieves.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"fcakyon/yolov5s-v7.0\", \"api_call\": \"yolov5.load('fcakyon/yolov5s-v7.0')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic\": false, \"multi_label\": false, \"max_det\": 1000, \"img\": \"https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg\", \"size\": 640, \"augment\": true}, \"python_environment_requirements\": \"pip install -U yolov5\", \"example_code\": \"import yolov5\\nmodel = yolov5.load('fcakyon/yolov5s-v7.0')\\nmodel.conf = 0.25\\nmodel.iou = 0.45\\nmodel.agnostic = False\\nmodel.multi_label = False\\nmodel.max_det = 1000\\nimg = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model(img)\\nresults = model(img, size=640)\\nresults = model(img, augment=True)\\npredictions = results.pred[0]\\nboxes = predictions[:, :4]\\nscores = predictions[:, 4]\\ncategories = predictions[:, 5]\\nresults.show()\\nresults.save(save_dir='results/')\", \"performance\": {\"dataset\": \"detection-datasets/coco\", \"accuracy\": null}, \"description\": \"Yolov5s-v7.0 is an object detection model trained on the COCO dataset. It can detect objects in images and return their bounding boxes, scores, and categories.\"}}", "category": "generic"}
{"question_id": 194, "text": " Create an object detector that can detect blood cells in an image, such as platelets, red blood cells, and white blood cells.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Blood Cell Detection\", \"api_name\": \"keremberke/yolov8n-blood-cell-detection\", \"api_call\": \"YOLO('keremberke/yolov8n-blood-cell-detection')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic_nms\": false, \"max_det\": 1000}, \"python_environment_requirements\": \"ultralyticsplus==0.0.23 ultralytics==8.0.21\", \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8n-blood-cell-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"blood-cell-object-detection\", \"accuracy\": 0.893}, \"description\": \"This model detects blood cells in images, specifically Platelets, RBC, and WBC. It is based on the YOLOv8 architecture and trained on the blood-cell-object-detection dataset.\"}}", "category": "generic"}
{"question_id": 195, "text": " I am a real-estate agent working on a project where I need to convert images of room plans to a better visual representation.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image-to-Image\", \"api_name\": \"lllyasviel/sd-controlnet-canny\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-canny')\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": {\"opencv\": \"pip install opencv-contrib-python\", \"diffusers\": \"pip install diffusers transformers accelerate\"}, \"example_code\": \"import cv2\\nfrom PIL import Image\\nfrom diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\\nimport torch\\nimport numpy as np\\nfrom diffusers.utils import load_image\\nimage = load_image(https://huggingface.co/lllyasviel/sd-controlnet-hed/resolve/main/images/bird.png)\\nimage = np.array(image)\\nlow_threshold = 100\\nhigh_threshold = 200\\nimage = cv2.Canny(image, low_threshold, high_threshold)\\nimage = image[:, :, None]\\nimage = np.concatenate([image, image, image], axis=2)\\nimage = Image.fromarray(image)\\ncontrolnet = ControlNetModel.from_pretrained(\\n lllyasviel/sd-controlnet-canny, torch_dtype=torch.float16\\n)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_xformers_memory_efficient_attention()\\npipe.enable_model_cpu_offload()\\nimage = pipe(bird, image, num_inference_steps=20).images[0]\\nimage.save('images/bird_canny_out.png')\", \"performance\": {\"dataset\": \"3M edge-image, caption pairs\", \"accuracy\": \"600 GPU-hours with Nvidia A100 80G\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Canny edges. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 196, "text": " We recently received low resolution images of newly released products and need to upscale them for better quality.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"swin2SR-lightweight-x2-64\", \"api_call\": \"Swin2SRForConditionalGeneration.from_pretrained('condef/Swin2SR-lightweight-x2-64').\", \"api_arguments\": \"feature_extractor, model\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"Swin2SR model that upscales images x2. It was introduced in the paper Swin2SR: SwinV2 Transformer for Compressed Image Super-Resolution and Restoration by Conde et al. and first released in this repository. This model is intended for lightweight image super resolution.\"}}", "category": "generic"}
{"question_id": 197, "text": " As a toy company, we are designing a new toy line. We'd like you to create an image of a toy robot using relevant text prompts as control input.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Diffusion Models\", \"api_name\": \"lllyasviel/control_v11p_sd15_mlsd\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_mlsd')\", \"api_arguments\": [\"checkpoint\", \"torch_dtype\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom controlnet_aux import MLSDdetector\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11p_sd15_mlsd\\nimage = load_image(\\n https://huggingface.co/lllyasviel/control_v11p_sd15_mlsd/resolve/main/images/input.png\\n)\\nprompt = royal chamber with fancy bed\\nprocessor = MLSDdetector.from_pretrained('lllyasviel/ControlNet')\\ncontrol_image = processor(image)\\ncontrol_image.save(./images/control.png)\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(0)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"MLSD\", \"accuracy\": \"Not provided\"}, \"description\": \"Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5. This checkpoint corresponds to the ControlNet conditioned on MLSD images.\"}}", "category": "generic"}
{"question_id": 198, "text": " I'm developing a game that needs more Minecraft skins for some characters. How can I generete them with this model?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Diffusers\", \"api_name\": \"WiNE-iNEFF/Minecraft-Skin-Diffusion-V2\", \"api_call\": \"DDPMPipeline.from_pretrained('WiNE-iNEFF/Minecraft-Skin-Diffusion-V2')\", \"api_arguments\": [], \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('WiNE-iNEFF/Minecraft-Skin-Diffusion-V2')\\nimage = pipeline().images[0].convert('RGBA')\\nimage\", \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"An unconditional image generation model for generating Minecraft skin images using the diffusion model.\"}}", "category": "generic"}
{"question_id": 199, "text": " Find me a generative model to create cat images in 256x256 resolution.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Denoising Diffusion Probabilistic Models (DDPM)\", \"api_name\": \"google/ddpm-ema-cat-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-ema-cat-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"!pip install diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-ema-cat-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. It can generate high-quality images, and supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm. On the unconditional CIFAR10 dataset, it achieves an Inception score of 9.46 and a state-of-the-art FID score of 3.17.\"}}", "category": "generic"}
{"question_id": 200, "text": " Our organization works with video surveillance. We need a system to analyze the videos and classify various events happening inside the video.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base')\", \"api_arguments\": [\"video\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-base)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base)\\npixel_values = processor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": \"To be provided\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches.\"}}", "category": "generic"}
{"question_id": 201, "text": " People in my company need an automatic solution to categorize videos based on their content. The system should be able to recognize the main theme of a video with high accuracy.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base-short-finetuned-kinetics\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-base-short-finetuned-kinetics')\", \"api_arguments\": [\"video\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained('MCG-NJU/videomae-base-short-finetuned-kinetics')\\nmodel = VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-base-short-finetuned-kinetics')\\ninputs = processor(video, return_tensors='pt')\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint('Predicted class:', model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": {\"top-1\": 79.4, \"top-5\": 94.1}}, \"description\": \"VideoMAE model pre-trained for 800 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 202, "text": " We want to build a product to classify images of pets into different categories.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"openai/clip-vit-large-patch14\", \"api_call\": \"CLIPModel.from_pretrained('openai/clip-vit-large-patch14')\", \"api_arguments\": {\"text\": [\"a photo of a cat\", \"a photo of a dog\"], \"images\": \"image\", \"return_tensors\": \"pt\", \"padding\": \"True\"}, \"python_environment_requirements\": {\"packages\": [\"PIL\", \"requests\", \"transformers\"]}, \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(openai/clip-vit-large-patch14)\\nprocessor = CLIPProcessor.from_pretrained(openai/clip-vit-large-patch14)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(text=[a photo of a cat, a photo of a dog], images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [\"Food101\", \"CIFAR10\", \"CIFAR100\", \"Birdsnap\", \"SUN397\", \"Stanford Cars\", \"FGVC Aircraft\", \"VOC2007\", \"DTD\", \"Oxford-IIIT Pet dataset\", \"Caltech101\", \"Flowers102\", \"MNIST\", \"SVHN\", \"IIIT5K\", \"Hateful Memes\", \"SST-2\", \"UCF101\", \"Kinetics700\", \"Country211\", \"CLEVR Counting\", \"KITTI Distance\", \"STL-10\", \"RareAct\", \"Flickr30\", \"MSCOCO\", \"ImageNet\", \"ImageNet-A\", \"ImageNet-R\", \"ImageNet Sketch\", \"ObjectNet (ImageNet Overlap)\", \"Youtube-BB\", \"ImageNet-Vid\"], \"accuracy\": \"varies depending on the dataset\"}, \"description\": \"The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.\"}}", "category": "generic"}
{"question_id": 203, "text": " We are developing an app to classify food images. We have a set of images and want to use a pre-trained model for classification.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-ViT-bigG-14-laion2B-39B-b160k\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-ViT-bigG-14-laion2B-39B-b160k')\", \"api_arguments\": [\"image\", \"possible_class_names\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; classifier = pipeline('image-classification', model='laion/CLIP-ViT-bigG-14-laion2B-39B-b160k'); classifier(image, possible_class_names=['cat', 'dog'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"80.1\"}, \"description\": \"A CLIP ViT-bigG/14 model trained with the LAION-2B English subset of LAION-5B using OpenCLIP. The model is intended for research purposes and enables researchers to better understand and explore zero-shot, arbitrary image classification. It can be used for interdisciplinary studies of the potential impact of such models. The model achieves a 80.1 zero-shot top-1 accuracy on ImageNet-1k.\"}}", "category": "generic"}
{"question_id": 205, "text": " The company wants to use geolocalization techniques to identify the location of a given image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Geolocalization\", \"api_name\": \"geolocal/StreetCLIP\", \"api_call\": \"CLIPModel.from_pretrained('geolocal/StreetCLIP')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"geolocal/StreetCLIP\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(geolocal/StreetCLIP)\\nprocessor = CLIPProcessor.from_pretrained(geolocal/StreetCLIP)\\nurl = https://huggingface.co/geolocal/StreetCLIP/resolve/main/sanfrancisco.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nchoices = [San Jose, San Diego, Los Angeles, Las Vegas, San Francisco]\\ninputs = processor(text=choices, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [{\"name\": \"IM2GPS\", \"accuracy\": {\"25km\": 28.3, \"200km\": 45.1, \"750km\": 74.7, \"2500km\": 88.2}}, {\"name\": \"IM2GPS3K\", \"accuracy\": {\"25km\": 22.4, \"200km\": 37.4, \"750km\": 61.3, \"2500km\": 80.4}}]}, \"description\": \"StreetCLIP is a robust foundation model for open-domain image geolocalization and other geographic and climate-related tasks. Trained on an original dataset of 1.1 million street-level urban and rural geo-tagged images, it achieves state-of-the-art performance on multiple open-domain image geolocalization benchmarks in zero-shot, outperforming supervised models trained on millions of images.\"}}", "category": "generic"}
{"question_id": 206, "text": " To improve customer service, the company is developing an AI-based chatbot that can help generate multiple paraphrases of a given customer query. We want to know if the generated paraphrases are adequate.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"prithivida/parrot_adequacy_model\", \"api_call\": \"pipeline('text-classification', model='prithivida/parrot_adequacy_model')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"Parrot is a paraphrase-based utterance augmentation framework purpose-built to accelerate training NLU models. This model is an ancillary model for Parrot paraphraser.\"}}", "category": "generic"}
{"question_id": 207, "text": " We need to analyze user reviews for our app to determine whether they are positive, negative, or neutral.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"finiteautomata/beto-sentiment-analysis\", \"api_call\": \"pipeline('sentiment-analysis', model='finiteautomata/beto-sentiment-analysis')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"Hugging Face Transformers library\", \"example_code\": \"\", \"performance\": {\"dataset\": \"TASS 2020 corpus\", \"accuracy\": \"\"}, \"description\": \"Model trained with TASS 2020 corpus (around ~5k tweets) of several dialects of Spanish. Base model is BETO, a BERT model trained in Spanish. Uses POS, NEG, NEU labels.\"}}", "category": "generic"}
{"question_id": 208, "text": " Give me a tool to detect named entities in multiple languages for my news portal analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"distilbert-base-multilingual-cased-ner-hrl\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\", \"api_arguments\": {\"model\": \"Davlan/distilbert-base-multilingual-cased-ner-hrl\", \"tokenizer\": \"Davlan/distilbert-base-multilingual-cased-ner-hrl\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\nfrom transformers import pipeline\\ntokenizer = AutoTokenizer.from_pretrained(Davlan/distilbert-base-multilingual-cased-ner-hrl)\\nmodel = AutoModelForTokenClassification.from_pretrained(Davlan/distilbert-base-multilingual-cased-ner-hrl)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": [{\"name\": \"ANERcorp\", \"language\": \"Arabic\"}, {\"name\": \"conll 2003\", \"language\": \"German\"}, {\"name\": \"conll 2003\", \"language\": \"English\"}, {\"name\": \"conll 2002\", \"language\": \"Spanish\"}, {\"name\": \"Europeana Newspapers\", \"language\": \"French\"}, {\"name\": \"Italian I-CAB\", \"language\": \"Italian\"}, {\"name\": \"Latvian NER\", \"language\": \"Latvian\"}, {\"name\": \"conll 2002\", \"language\": \"Dutch\"}, {\"name\": \"Paramopama + Second Harem\", \"language\": \"Portuguese\"}, {\"name\": \"MSRA\", \"language\": \"Chinese\"}], \"accuracy\": \"Not specified\"}, \"description\": \"distilbert-base-multilingual-cased-ner-hrl is a Named Entity Recognition model for 10 high resourced languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese) based on a fine-tuned Distiled BERT base model. It has been trained to recognize three types of entities: location (LOC), organizations (ORG), and person (PER).\"}}", "category": "generic"}
{"question_id": 209, "text": " We are building a fiction-sharing platform for multiple languages. Extract named entities from the given text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Babelscape/wikineural-multilingual-ner\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Babelscape/wikineural-multilingual-ner')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained(Babelscape/wikineural-multilingual-ner)\", \"tokenizer\": \"AutoTokenizer.from_pretrained(Babelscape/wikineural-multilingual-ner)\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(Babelscape/wikineural-multilingual-ner)\\nmodel = AutoModelForTokenClassification.from_pretrained(Babelscape/wikineural-multilingual-ner)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = My name is Wolfgang and I live in Berlin\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": \"Babelscape/wikineural-multilingual-ner\", \"accuracy\": \"span-based F1-score up to 6 points over previous state-of-the-art systems for data creation\"}, \"description\": \"A multilingual Named Entity Recognition (NER) model fine-tuned on the WikiNEuRal dataset, supporting 9 languages (de, en, es, fr, it, nl, pl, pt, ru). It is based on the mBERT architecture and trained on all 9 languages jointly. The model can be used with the Hugging Face Transformers pipeline for NER tasks.\"}}", "category": "generic"}
{"question_id": 210, "text": " Someone asked the question \\\"What is the capital of Sweden?\\\" in the context \\\"Stockholm is the beautiful capital of Sweden, which is known for its high living standards and great attractions.\\\"\\n###Input: {\\\"question\\\": \\\"What is the capital of Sweden?\\\", \\\"context\\\": \\\"Stockholm is the beautiful capital of Sweden, which is known for its high living standards and great attractions.\\\"}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bert-large-uncased-whole-word-masking-finetuned-squad\", \"api_call\": \"AutoModel.from_pretrained('bert-large-uncased-whole-word-masking-finetuned-squad')\", \"api_arguments\": {\"model_name_or_path\": \"bert-large-uncased-whole-word-masking\", \"dataset_name\": \"squad\", \"do_train\": true, \"do_eval\": true, \"learning_rate\": 3e-05, \"num_train_epochs\": 2, \"max_seq_length\": 384, \"doc_stride\": 128, \"output_dir\": \"./examples/models/wwm_uncased_finetuned_squad/\", \"per_device_eval_batch_size\": 3, \"per_device_train_batch_size\": 3}, \"python_environment_requirements\": {\"torch\": \"1.9.0\", \"transformers\": \"4.9.2\"}, \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='bert-large-uncased-whole-word-masking-finetuned-squad')\\nresult = qa_pipeline({'question': 'What is the capital of France?', 'context': 'Paris is the capital of France.'})\\nprint(result)\", \"performance\": {\"dataset\": \"SQuAD\", \"accuracy\": {\"f1\": 93.15, \"exact_match\": 86.91}}, \"description\": \"BERT large model (uncased) whole word masking finetuned on SQuAD. The model was pretrained on BookCorpus and English Wikipedia. It was trained with two objectives: Masked language modeling (MLM) and Next sentence prediction (NSP). This model should be used as a question-answering model.\"}}", "category": "generic"}
{"question_id": 211, "text": " Write an overview for astronomers about how Jupiter became the largest planet in our solar system.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"valhalla/longformer-base-4096-finetuned-squadv1\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('valhalla/longformer-base-4096-finetuned-squadv1')\", \"api_arguments\": {\"input_ids\": \"encoding['input_ids']\", \"attention_mask\": \"encoding['attention_mask']\"}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"import torch\\nfrom transformers import AutoTokenizer, AutoModelForQuestionAnswering\\ntokenizer = AutoTokenizer.from_pretrained('valhalla/longformer-base-4096-finetuned-squadv1')\\nmodel = AutoModelForQuestionAnswering.from_pretrained('valhalla/longformer-base-4096-finetuned-squadv1')\\ntext = 'Huggingface has democratized NLP. Huge thanks to Huggingface for this.'\\nquestion = 'What has Huggingface done ?'\\nencoding = tokenizer(question, text, return_tensors='pt')\\ninput_ids = encoding['input_ids']\\nattention_mask = encoding['attention_mask']\\nstart_scores, end_scores = model(input_ids, attention_mask=attention_mask)\\nall_tokens = tokenizer.convert_ids_to_tokens(input_ids[0].tolist())\\nanswer_tokens = all_tokens[torch.argmax(start_scores) :torch.argmax(end_scores)+1]\\nanswer = tokenizer.decode(tokenizer.convert_tokens_to_ids(answer_tokens))\", \"performance\": {\"dataset\": \"squad_v1\", \"accuracy\": {\"Exact Match\": 85.1466, \"F1\": 91.5415}}, \"description\": \"This is longformer-base-4096 model fine-tuned on SQuAD v1 dataset for question answering task. Longformer model created by Iz Beltagy, Matthew E. Peters, Arman Coha from AllenAI. As the paper explains it, Longformer is a BERT-like model for long documents. The pre-trained model can handle sequences with up to 4096 tokens.\"}}", "category": "generic"}
{"question_id": 212, "text": " Create a virtual assistant that can provide answers to trivia questions about history.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"philschmid/distilbert-onnx\", \"api_call\": \"pipeline('question-answering', model='philschmid/distilbert-onnx')\", \"api_arguments\": {\"model\": \"philschmid/distilbert-onnx\"}, \"python_environment_requirements\": [\"transformers\", \"onnx\"], \"example_code\": {\"Compute\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='philschmid/distilbert-onnx')\\nqa_pipeline({'context': 'This is a context', 'question': 'What is this?'})\"}, \"performance\": {\"dataset\": \"squad\", \"accuracy\": \"F1 score: 87.1\"}, \"description\": \"This model is a fine-tune checkpoint of DistilBERT-base-cased, fine-tuned using (a second step of) knowledge distillation on SQuAD v1.1.\"}}", "category": "generic"}
{"question_id": 213, "text": " I want to build a system that can answer questions from users reading a book.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-base-squad2-distilled\", \"api_call\": \"AutoModel.from_pretrained('deepset/roberta-base-squad2-distilled')\", \"api_arguments\": {\"context\": \"string\", \"question\": \"string\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='deepset/roberta-base-squad2-distilled')\\nresult = qa_pipeline({'context': 'This is a context.', 'question': 'What is this?'})\\nprint(result)\", \"performance\": {\"dataset\": \"squad_v2\", \"exact\": 79.8366040596311, \"f1\": 83.916407079888}, \"description\": \"This model is a distilled version of deepset/roberta-large-squad2, trained on SQuAD 2.0 dataset for question answering tasks. It is based on the Roberta architecture and has been fine-tuned using Haystack's distillation feature.\"}}", "category": "generic"}
{"question_id": 214, "text": " Our customer support team needs an AI assistant to handle customer inquiries. It should be able to understand and evaluate if the answer provided by the assistant is contradictory, neutral or entails the customer's question.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"cross-encoder/nli-deberta-v3-small\", \"api_call\": \"CrossEncoder('cross-encoder/nli-deberta-v3-small')\", \"api_arguments\": [\"sentence1\", \"sentence2\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from sentence_transformers import CrossEncoder\\nmodel = CrossEncoder('cross-encoder/nli-deberta-v3-small')\\nscores = model.predict([('A man is eating pizza', 'A man eats something'), ('A black race car starts up in front of a crowd of people.', 'A man is driving down a lonely road.')])\", \"performance\": {\"dataset\": {\"SNLI-test\": \"91.65\", \"MNLI-mismatched\": \"87.55\"}, \"accuracy\": {\"SNLI-test\": \"91.65\", \"MNLI-mismatched\": \"87.55\"}}, \"description\": \"Cross-Encoder for Natural Language Inference based on microsoft/deberta-v3-small, trained on the SNLI and MultiNLI datasets. For a given sentence pair, it will output three scores corresponding to the labels: contradiction, entailment, neutral.\"}}", "category": "generic"}
{"question_id": 215, "text": " Use a zero-shot classifier to classify news headlines into three categories: sports, technology, and politics.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"cross-encoder/nli-deberta-v3-xsmall\", \"api_call\": \"pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\", \"api_arguments\": [\"sent\", \"candidate_labels\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\\nsent = 'Apple just announced the newest iPhone X'\\ncandidate_labels = ['technology', 'sports', 'politics']\\nres = classifier(sent, candidate_labels)\\nprint(res)\", \"performance\": {\"dataset\": {\"SNLI-test\": \"91.64\", \"MNLI_mismatched\": \"87.77\"}}, \"description\": \"This model is a Cross-Encoder for Natural Language Inference, trained on the SNLI and MultiNLI datasets. It can be used for zero-shot classification tasks.\"}}", "category": "generic"}
{"question_id": 216, "text": " Analyze a German text and classify it into different categories like crime, tragedy, or theft.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"AutoModelForSequenceClassification.from_pretrained('Sahajtomar/German_Zeroshot')\", \"api_call\": \"classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"api_arguments\": {\"sequence\": \"string\", \"candidate_labels\": \"list of strings\", \"hypothesis_template\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model=Sahajtomar/German_Zeroshot)\\nsequence = Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie\\ncandidate_labels = [Verbrechen,Trag\\u00f6die,Stehlen]\\nhypothesis_template = In deisem geht es um {}. ## Since monolingual model,its sensitive to hypothesis template. This can be experimented\\nclassifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"performance\": {\"dataset\": {\"XNLI DEV (german)\": {\"accuracy\": 85.5}, \"XNLI TEST (german)\": {\"accuracy\": 83.6}}}, \"description\": \"This model has GBERT Large as base model and fine-tuned it on xnli de dataset. The default hypothesis template is in English: This text is {}. While using this model, change it to In deisem geht es um {}. or something different. While inferencing through huggingface api may give poor results as it uses by default english template. Since model is monolingual and not multilingual, hypothesis template needs to be changed accordingly.\"}}", "category": "generic"}
{"question_id": 217, "text": " Create a tool to determine the logical relationship between two given sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Natural Language Inference\", \"api_name\": \"cointegrated/rubert-base-cased-nli-threeway\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cointegrated/rubert-base-cased-nli-threeway')\", \"api_arguments\": [\"text1\", \"text2\"], \"python_environment_requirements\": [\"transformers\", \"sentencepiece\"], \"example_code\": \"import torch\\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\\nmodel_checkpoint = 'cointegrated/rubert-base-cased-nli-threeway'\\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\\nmodel = AutoModelForSequenceClassification.from_pretrained(model_checkpoint)\\nif torch.cuda.is_available():\\n model.cuda()\\ntext1 = '.'\\ntext2 = '.'\\nwith torch.inference_mode():\\n out = model(**tokenizer(text1, text2, return_tensors='pt').to(model.device))\\n proba = torch.softmax(out.logits, -1).cpu().numpy()[0]\\nprint({v: proba[k] for k, v in model.config.id2label.items()})\", \"performance\": {\"dataset\": [\"JOCI\", \"MNLI\", \"MPE\", \"SICK\", \"SNLI\", \"ANLI\", \"NLI-style FEVER\", \"IMPPRES\"], \"accuracy\": {\"ROC AUC\": {\"entailment\": 0.91, \"contradiction\": 0.71, \"neutral\": 0.79}}}, \"description\": \"This is the DeepPavlov/rubert-base-cased fine-tuned to predict the logical relationship between two short texts: entailment, contradiction, or neutral.\"}}", "category": "generic"}
{"question_id": 218, "text": " A media company needs to summarize a news article in order to make it easy for their audience to understand the main points quickly.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"csebuetnlp/mT5_multilingual_XLSum\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('csebuetnlp/mT5_multilingual_XLSum')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers==4.11.0.dev0\"], \"example_code\": \"import re\\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nWHITESPACE_HANDLER = lambda k: re.sub('\\\\s+', ' ', re.sub('\\\\n+', ' ', k.strip()))\\narticle_text = Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said. The policy includes the termination of accounts of anti-vaccine influencers. Tech giants have been criticised for not doing more to counter false health information on their sites. In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue. YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines. In a blog post, the company said it had seen false claims about Covid jabs spill over into misinformation about vaccines in general. The new policy covers long-approved vaccines, such as those against measles or hepatitis B. We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO, the post said, referring to the World Health Organization.\\nmodel_name = csebuetnlp/mT5_multilingual_XLSum\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\\ninput_ids = tokenizer(\\n [WHITESPACE_HANDLER(article_text)],\\n return_tensors=pt,\\n padding=max_length,\\n truncation=True,\\n max_length=512\\n)[input_ids]\\noutput_ids = model.generate(\\n input_ids=input_ids,\\n max_length=84,\\n no_repeat_ngram_size=2,\\n num_beams=4\\n)[0]\\nsummary = tokenizer.decode(\\n output_ids,\\n skip_special_tokens=True,\\n clean_up_tokenization_spaces=False\\n)\\nprint(summary)\", \"performance\": {\"dataset\": \"xsum\", \"accuracy\": {\"ROUGE-1\": 36.5, \"ROUGE-2\": 13.934, \"ROUGE-L\": 28.988, \"ROUGE-LSUM\": 28.996, \"loss\": 2.067, \"gen_len\": 26.973}}, \"description\": \"This repository contains the mT5 checkpoint finetuned on the 45 languages of XL-Sum dataset. It is a multilingual abstractive summarization model that supports text-to-text generation for 43 languages.\"}}", "category": "generic"}
{"question_id": 219, "text": " We want to implement a customer service chatbot to engage with website visitors and provide support.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"facebook/blenderbot-400M-distill\", \"api_call\": \"BlenderbotForConditionalGeneration.from_pretrained('facebook/blenderbot-400M-distill')\", \"api_arguments\": \"['message']\", \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"Input a message to start chatting with facebook/blenderbot-400M-distill.\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not specified\"}, \"description\": \"BlenderBot-400M-distill is a distilled version of the BlenderBot model, trained on the Blended Skill Talk dataset. It is designed for open-domain chatbot tasks and can generate text-to-text responses in a conversational manner. The model is based on the Transformers library and can be used with PyTorch, TensorFlow, and JAX.\"}}", "category": "generic"}
{"question_id": 220, "text": " As the project manager of a company who receives long emails, my goal is to summarize them and extract the most important information.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"tuner007/pegasus_summarizer\", \"api_call\": \"PegasusForConditionalGeneration.from_pretrained('tuner007/pegasus_summarizer')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"pip install sentencepiece\"], \"example_code\": \"context = \\nIndia wicket-keeper batsman Rishabh Pant has said someone from the crowd threw a ball on pacer Mohammed Siraj while he was fielding in the ongoing third Test against England on Wednesday. Pant revealed the incident made India skipper Virat Kohli upset. I think, somebody threw a ball inside, at Siraj, so he [Kohli] was upset, said Pant in a virtual press conference after the close of the first day's play.You can say whatever you want to chant, but don't throw things at the fielders and all those things. It is not good for cricket, I guess, he added.In the third session of the opening day of the third Test, a section of spectators seemed to have asked Siraj the score of the match to tease the pacer. The India pacer however came with a brilliant reply as he gestured 1-0 (India leading the Test series) towards the crowd.Earlier this month, during the second Test match, there was some bad crowd behaviour on a show as some unruly fans threw champagne corks at India batsman KL Rahul.Kohli also intervened and he was seen gesturing towards the opening batsman to know more about the incident. An over later, the TV visuals showed that many champagne corks were thrown inside the playing field, and the Indian players were visibly left frustrated.Coming back to the game, after bundling out India for 78, openers Rory Burns and Haseeb Hameed ensured that England took the honours on the opening day of the ongoing third Test.At stumps, England's score reads 120/0 and the hosts have extended their lead to 42 runs. For the Three Lions, Burns (52) and Hameed (60) are currently unbeaten at the crease.Talking about the pitch on opening day, Pant said, They took the heavy roller, the wicket was much more settled down, and they batted nicely also, he said. But when we batted, the wicket was slightly soft, and they bowled in good areas, but we could have applied [ourselves] much better.Both England batsmen managed to see off the final session and the hosts concluded the opening day with all ten wickets intact, extending the lead to 42.(ANI)\\nget_response(context)\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": {\"ROUGE-1\": 36.604, \"ROUGE-2\": 14.64, \"ROUGE-L\": 23.884, \"ROUGE-LSUM\": 32.902, \"loss\": 2.576, \"gen_len\": 76.398}}, \"description\": \"PEGASUS fine-tuned for summarization\"}}", "category": "generic"}
{"question_id": 221, "text": " I am the user and I want to start a multi-turn conversation with this model.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"microsoft/DialoGPT-medium\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('microsoft/DialoGPT-medium')\", \"api_arguments\": [\"bot_input_ids\", \"max_length\", \"pad_token_id\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\nimport torch\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/DialoGPT-medium)\\nmodel = AutoModelForCausalLM.from_pretrained(microsoft/DialoGPT-medium)\", \"performance\": {\"dataset\": \"Reddit\", \"accuracy\": \"Comparable to human response quality under a single-turn conversation Turing test\"}, \"description\": \"DialoGPT is a SOTA large-scale pretrained dialogue response generation model for multiturn conversations. The model is trained on 147M multi-turn dialogue from Reddit discussion thread.\"}}", "category": "generic"}
{"question_id": 222, "text": " Create a Python function named \\\"summarize_russian_text\\\" that accepts a Russian text as input and returns a brief summary of the text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Abstractive Russian Summarization\", \"api_name\": \"cointegrated/rut5-base-absum\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('cointegrated/rut5-base-absum')\", \"api_arguments\": {\"n_words\": \"int\", \"compression\": \"float\", \"max_length\": \"int\", \"num_beams\": \"int\", \"do_sample\": \"bool\", \"repetition_penalty\": \"float\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"torch\": \"latest\"}, \"example_code\": \"import torch\\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\\nMODEL_NAME = 'cointegrated/rut5-base-absum'\\nmodel = T5ForConditionalGeneration.from_pretrained(MODEL_NAME)\\ntokenizer = T5Tokenizer.from_pretrained(MODEL_NAME)\\nmodel.cuda();\\nmodel.eval();\\ndef summarize(\\n text, n_words=None, compression=None,\\n max_length=1000, num_beams=3, do_sample=False, repetition_penalty=10.0, \\n <strong>kwargs\\n):\\n \\n Summarize the text\\n The following parameters are mutually exclusive:\\n - n_words (int) is an approximate number of words to generate.\\n - compression (float) is an approximate length ratio of summary and original text.\\n \\n if n_words:\\n text = '[{}] '.format(n_words) + text\\n elif compression:\\n text = '[{0:.1g}] '.format(compression) + text\\n x = tokenizer(text, return_tensors='pt', padding=True).to(model.device)\\n with torch.inference_mode():\\n out = model.generate(\\n </strong>x, \\n max_length=max_length, num_beams=num_beams, \\n do_sample=do_sample, repetition_penalty=repetition_penalty, \\n **kwargs\\n )\\n return tokenizer.decode(out[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": [\"csebuetnlp/xlsum\", \"IlyaGusev/gazeta\", \"mlsum\"], \"accuracy\": \"Not provided\"}, \"description\": \"This is a model for abstractive Russian summarization, based on cointegrated/rut5-base-multitask and fine-tuned on 4 datasets.\"}}", "category": "generic"}
{"question_id": 223, "text": " We want to implement a chatbot on our website to provide quick responses to customer inquiries.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face\", \"functionality\": \"Dialogue Response Generation\", \"api_name\": \"microsoft/DialoGPT-small\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('microsoft/DialoGPT-small')\", \"api_arguments\": [\"bot_input_ids\", \"max_length\", \"pad_token_id\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\nimport torch\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/DialoGPT-small)\\nmodel = AutoModelForCausalLM.from_pretrained(microsoft/DialoGPT-small)\\nfor step in range(5):\\n new_user_input_ids = tokenizer.encode(input(>> User:) + tokenizer.eos_token, return_tensors='pt')\\n bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids], dim=-1) if step > 0 else new_user_input_ids\\n chat_history_ids = model.generate(bot_input_ids, max_length=1000, pad_token_id=tokenizer.eos_token_id)\\n print(DialoGPT: {}.format(tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)))\", \"performance\": {\"dataset\": \"Reddit discussion thread\", \"accuracy\": \"Comparable to human response quality under a single-turn conversation Turing test\"}, \"description\": \"DialoGPT is a state-of-the-art large-scale pretrained dialogue response generation model for multiturn conversations. The model is trained on 147M multi-turn dialogue from Reddit discussion thread.\"}}", "category": "generic"}
{"question_id": 224, "text": " We want the AI to have an interesting conversation and ask it general knowledge questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"pygmalion-350m\", \"api_call\": \"pipeline('conversational', model='PygmalionAI/pygmalion-350m')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"The Pile\", \"accuracy\": \"N/A\"}, \"description\": \"This is a proof-of-concept fine-tune of Facebook's OPT-350M model optimized for dialogue, to be used as a stepping stone to higher parameter models. Disclaimer: NSFW data was included in the fine-tuning of this model. Although SFW inputs will usually result in SFW outputs, you are advised to chat at your own risk. This model is not suitable for use by minors.\"}}", "category": "generic"}
{"question_id": 225, "text": " We need to create a dialogue in Russian for our educational app. It should cover a general greeting and asking about the users' well-being.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"tinkoff-ai/ruDialoGPT-medium\", \"api_call\": \"AutoModelWithLMHead.from_pretrained('tinkoff-ai/ruDialoGPT-medium')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"tinkoff-ai/ruDialoGPT-medium\"}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"import torch\\nfrom transformers import AutoTokenizer, AutoModelWithLMHead\\ntokenizer = AutoTokenizer.from_pretrained('tinkoff-ai/ruDialoGPT-medium')\\nmodel = AutoModelWithLMHead.from_pretrained('tinkoff-ai/ruDialoGPT-medium')\\ninputs = tokenizer('@@\\u041f\\u0415\\u0420\\u0412\\u042b\\u0419@@ \\u043f\\u0440\\u0438\\u0432\\u0435\\u0442 @@\\u0412\\u0422\\u041e\\u0420\\u041e\\u0419@@ \\u043f\\u0440\\u0438\\u0432\\u0435\\u0442 @@\\u041f\\u0415\\u0420\\u0412\\u042b\\u0419@@ \\u043a\\u0430\\u043a \\u0434\\u0435\\u043b\\u0430? @@\\u0412\\u0422\\u041e\\u0420\\u041e\\u0419@@', return_tensors='pt')\\ngenerated_token_ids = model.generate(\\n **inputs,\\n top_k=10,\\n top_p=0.95,\\n num_beams=3,\\n num_return_sequences=3,\\n do_sample=True,\\n no_repeat_ngram_size=2,\\n temperature=1.2,\\n repetition_penalty=1.2,\\n length_penalty=1.0,\\n eos_token_id=50257,\\n max_new_tokens=40\\n)\\ncontext_with_response = [tokenizer.decode(sample_token_ids) for sample_token_ids in generated_token_ids]\\ncontext_with_response\", \"performance\": {\"dataset\": \"Private Validation Set\", \"sensibleness\": 0.78, \"specificity\": 0.69, \"SSA\": 0.735}, \"description\": \"This generation model is based on sberbank-ai/rugpt3medium_based_on_gpt2. It's trained on large corpus of dialog data and can be used for buildning generative conversational agents. The model was trained with context size 3.\"}}", "category": "generic"}
{"question_id": 226, "text": " The company wants to create a chatbot to help answer customer questions regarding the chatbot's consciousness. We need to be able to generate sensible responses.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"facebook/opt-66b\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('facebook/opt-66b', torch_dtype=torch.float16)\", \"api_arguments\": [\"input_ids\", \"do_sample\", \"num_return_sequences\", \"max_length\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer, set_seed\\nimport torch\\nmodel = AutoModelForCausalLM.from_pretrained(facebook/opt-66b, torch_dtype=torch.float16).cuda()\\ntokenizer = AutoTokenizer.from_pretrained(facebook/opt-66b, use_fast=False)\\nprompt = Hello, I am conscious and\\ninput_ids = tokenizer(prompt, return_tensors=pt).input_ids.cuda()\\nset_seed(32)\\ngenerated_ids = model.generate(input_ids, do_sample=True, num_return_sequences=5, max_length=10)\\ntokenizer.batch_decode(generated_ids, skip_special_tokens=True)\", \"performance\": {\"dataset\": \"GPT-3\", \"accuracy\": \"roughly matched\"}, \"description\": \"OPT (Open Pre-trained Transformer) is a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, designed to enable reproducible and responsible research at scale. OPT models are trained to roughly match the performance and sizes of the GPT-3 class of models, while also applying the latest best practices in data collection and efficient training. The pretrained-only model can be used for prompting for evaluation of downstream tasks as well as text generation.\"}}", "category": "generic"}
{"question_id": 227, "text": " Create interesting variations of the given phrase 'How can I improve my time management skills?'.\\n###Input: How can I improve my time management skills?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Paraphrasing\", \"api_name\": \"prithivida/parrot_paraphraser_on_T5\", \"api_call\": \"Parrot(model_tag='prithivida/parrot_paraphraser_on_T5', use_gpu=False)\", \"api_arguments\": [\"input_phrase\", \"diversity_ranker\", \"do_diverse\", \"max_return_phrases\", \"max_length\", \"adequacy_threshold\", \"fluency_threshold\"], \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"from parrot import Parrot\\nimport torch\\nimport warnings\\nwarnings.filterwarnings(ignore)\\nparrot = Parrot(model_tag=prithivida/parrot_paraphraser_on_T5, use_gpu=False)\\nphrases = [Can you recommed some upscale restaurants in Newyork?,\\n What are the famous places we should not miss in Russia?\\n]\\nfor phrase in phrases:\\n print(-*100)\\n print(Input_phrase: , phrase)\\n print(-*100)\\n para_phrases = parrot.augment(input_phrase=phrase)\\n for para_phrase in para_phrases:\\n  print(para_phrase)\", \"performance\": {\"dataset\": \"Not mentioned\", \"accuracy\": \"Not mentioned\"}, \"description\": \"Parrot is a paraphrase based utterance augmentation framework purpose built to accelerate training NLU models. It offers knobs to control Adequacy, Fluency, and Diversity as per your needs. It mainly focuses on augmenting texts typed-into or spoken-to conversational interfaces for building robust NLU models.\"}}", "category": "generic"}
{"question_id": 228, "text": " A customer wants to convert an input Korean text into a summary. Provide a solution for it.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"kykim/bertshared-kor-base\", \"api_call\": \"EncoderDecoderModel.from_pretrained('kykim/bertshared-kor-base')\", \"api_arguments\": {\"tokenizer\": \"BertTokenizerFast.from_pretrained(kykim/bertshared-kor-base)\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import BertTokenizerFast, EncoderDecoderModel\\ntokenizer = BertTokenizerFast.from_pretrained(kykim/bertshared-kor-base)\\nmodel = EncoderDecoderModel.from_pretrained(kykim/bertshared-kor-base)\", \"performance\": {\"dataset\": \"70GB Korean text dataset\", \"accuracy\": \"42000 lower-cased subwords\"}, \"description\": \"Bert base model for Korean, trained on a 70GB Korean text dataset and 42000 lower-cased subwords. Can be used for Text2Text Generation tasks.\"}}", "category": "generic"}
{"question_id": 229, "text": " Our company is providing translation services for business clients. We need to translate English contracts to French.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text-to-Text Transfer Transformer\", \"api_name\": \"google/mt5-base\", \"api_call\": \"MT5ForConditionalGeneration.from_pretrained('google/mt5-base')\", \"api_arguments\": [\"model_name\", \"input_text\", \"generated_text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"model = MT5ForConditionalGeneration.from_pretrained('google/mt5-base')\\ntokenizer = MT5Tokenizer.from_pretrained('google/mt5-base')\\ninputs = tokenizer.encode('translate English to German: The house is wonderful.', return_tensors='pt')\\noutputs = model.generate(inputs, max_length=40, num_return_sequences=1)\\ndecoded_output = tokenizer.decode(outputs[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"mc4\", \"accuracy\": \"Not provided\"}, \"description\": \"mT5 is a multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. It leverages a unified text-to-text format and scale to attain state-of-the-art results on a wide variety of multilingual NLP tasks.\"}}", "category": "generic"}
{"question_id": 230, "text": " We are an online platform that offers various Chinese language courses for students. Now we need to autoplay a fill-in-the-blank video game for our users.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"bert-base-chinese\", \"api_call\": \"AutoModelForMaskedLM.from_pretrained('bert-base-chinese')\", \"api_arguments\": {\"pretrained_model_name\": \"bert-base-chinese\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForMaskedLM\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(bert-base-chinese)\\nmodel = AutoModelForMaskedLM.from_pretrained(bert-base-chinese)\", \"performance\": {\"dataset\": \"[More Information Needed]\", \"accuracy\": \"[More Information Needed]\"}, \"description\": \"This model has been pre-trained for Chinese, training and random input masking has been applied independently to word pieces (as in the original BERT paper). It can be used for masked language modeling.\"}}", "category": "generic"}
{"question_id": 231, "text": " We want to determine the similarity between two sentences, \\\"I love going to the park\\\" and \\\"My favorite activity is visiting the park\\\".\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-MiniLM-L6-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L6-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": [\"sentence-transformers\"], \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L6-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 232, "text": " We have an audiobook app in the Chinese language, and we want to convert the Chinese text to speech.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best\", \"api_call\": \"Text2Speech.from_pretrained('espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"torch\", \"espnet_model_zoo\"], \"example_code\": \"import soundfile\\nfrom espnet2.bin.tts_inference import Text2Speech\\ntext2speech = Text2Speech.from_pretrained(espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best)\\ntext = \\u6625\\u6c5f\\u6f6e\\u6c34\\u8fde\\u6d77\\u5e73\\uff0c\\u6d77\\u4e0a\\u660e\\u6708\\u5171\\u6f6e\\u751f\\nspeech = text2speech(text)[wav]\\nsoundfile.write(out.wav, speech.numpy(), text2speech.fs, PCM_16)\", \"performance\": {\"dataset\": \"csmsc\", \"accuracy\": \"Not specified\"}, \"description\": \"A pre-trained Text-to-Speech model for Chinese language using ESPnet framework. It can be used to convert text input into speech output in Chinese.\"}}", "category": "generic"}
{"question_id": 233, "text": " We want to build an audiobook service. We need to convert text to speech for the user to listen.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_ljspeech_joint_finetune_conformer_fastspeech2_hifigan\", \"api_call\": \"Text2Speech.from_pretrained('espnet/kan-bayashi_ljspeech_joint_finetune_conformer_fastspeech2_hifigan')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"LJSpeech\", \"accuracy\": \"\"}, \"description\": \"A pretrained Text-to-Speech model based on the ESPnet framework, fine-tuned on the LJSpeech dataset. This model is capable of converting text input into synthesized speech.\"}}", "category": "generic"}
{"question_id": 234, "text": " I want to convert English speech into different language speech. I have some audio in English language and I would like to convert that into Spanish.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Speech-to-speech translation\", \"api_name\": \"facebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur')\", \"api_arguments\": {\"audio\": \"16000Hz mono channel audio\"}, \"python_environment_requirements\": [\"fairseq\", \"hub_utils\", \"huggingface_hub\", \"IPython.display\", \"torchaudio\"], \"example_code\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\", \"cache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub(\", \"facebook/xm_transformer_s2ut_800m-es-en-st-asr-bt_h1_2022,\", \"arg_overrides={config_yaml: config.yaml, task: speech_to_text},\", \"cache_dir=cache_dir,\", \")\", \"model = models[0].cpu()\", \"cfg[task].cpu = True\", \"generator = task.build_generator([model], cfg)\", \"# requires 16000Hz mono channel audio\", \"audio, _ = torchaudio.load(/Users/lpw/git/api-inference-community/docker_images/fairseq/tests/samples/sample2.flac)\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\", \"library_name = fairseq\", \"cache_dir = (\", \" cache_dir or (Path.home() / .cache / library_name).as_posix()\", \")\", \"cache_dir = snapshot_download(\", \" ffacebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur, cache_dir=cache_dir, library_name=library_name\", \")\", \"x = hub_utils.from_pretrained(\", \" cache_dir,\", \" model.pt,\", \" .,\", \" archive_map=CodeHiFiGANVocoder.hub_models(),\", \" config_yaml=config.json,\", \" fp16=False,\", \" is_vocoder=True,\", \")\", \"with open(f{x['args']['data']}/config.json) as f:\", \" vocoder_cfg = json.load(f)\", \"assert (\", \" len(x[args][model_path]) == 1\", \"), Too many vocoder models in the input\", \"vocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"], \"performance\": {\"dataset\": \"covost2\", \"accuracy\": null}, \"description\": \"Speech-to-speech translation model from fairseq S2UT (paper/code) for Spanish-English. Trained on mTEDx, CoVoST 2, Europarl-ST, and VoxPopuli.\"}}", "category": "generic"}
{"question_id": 235, "text": " We are trying to transcribe audios. Can you help with giving us an ASR model?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Automatic Speech Recognition and Speech Translation\", \"api_name\": \"openai/whisper-base\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-base')\", \"api_arguments\": {\"model_name\": \"openai/whisper-base\", \"input_features\": \"input_features\", \"forced_decoder_ids\": \"forced_decoder_ids\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained(openai/whisper-base)\", \"model = WhisperForConditionalGeneration.from_pretrained(openai/whisper-base)\", \"ds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\", \"sample = ds[0][audio]\", \"input_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean) test set\", \"accuracy\": \"5.009 WER\"}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 236, "text": " Our blog platform accepts voice notes, and we want to transcribe these notes to text.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Automatic Speech Recognition and Speech Translation\", \"api_name\": \"openai/whisper-large\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-large')\", \"api_arguments\": [\"audio\", \"sampling_rate\"], \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": \"from transformers import WhisperProcessor, WhisperForConditionalGeneration\\nfrom datasets import load_dataset\\nprocessor = WhisperProcessor.from_pretrained(openai/whisper-large)\\nmodel = WhisperForConditionalGeneration.from_pretrained(openai/whisper-large)\\nmodel.config.forced_decoder_ids = None\\nds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\\nsample = ds[0][audio]\\ninput_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\\npredicted_ids = model.generate(input_features)\\ntranscription = processor.batch_decode(predicted_ids, skip_special_tokens=False)\", \"performance\": {\"dataset\": [{\"name\": \"LibriSpeech (clean)\", \"accuracy\": 3.0}, {\"name\": \"LibriSpeech (other)\", \"accuracy\": 5.4}, {\"name\": \"Common Voice 11.0\", \"accuracy\": 54.8}]}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 237, "text": " Create a program to separate music and vocals from an audio file using a pretrained model.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"mpariente/DPRNNTasNet-ks2_WHAM_sepclean\", \"api_call\": \"pipeline('audio-source-separation', model='mpariente/DPRNNTasNet-ks2_WHAM_sepclean')\", \"api_arguments\": \"audio_file\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"WHAM!\", \"si_sdr\": 19.316743490695334, \"si_sdr_imp\": 19.317895273889842, \"sdr\": 19.68085347190952, \"sdr_imp\": 19.5298092932871, \"sir\": 30.362213998701232, \"sir_imp\": 30.21116982007881, \"sar\": 20.15553251343315, \"sar_imp\": -129.02091762351188, \"stoi\": 0.97772664309074, \"stoi_imp\": 0.23968091518217424}, \"description\": \"This model was trained by Manuel Pariente using the wham/DPRNN recipe in Asteroid. It was trained on the sep_clean task of the WHAM! dataset.\"}}", "category": "generic"}
{"question_id": 238, "text": " \\nCreate an application that automatically separates vocals from a song for karaoke nights.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"Awais/Audio_Source_Separation\", \"api_call\": \"pipeline('audio-source-separation', model='Awais/Audio_Source_Separation')\", \"api_arguments\": \"audio\", \"python_environment_requirements\": \"Asteroid\", \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 14.764543634468069, \"si_sdr_imp\": 14.764029375607246, \"sdr\": 15.29337970745095, \"sdr_imp\": 15.114146605113111, \"sir\": 24.092904661115366, \"sir_imp\": 23.913669683141528, \"sar\": 16.06055906916849, \"sar_imp\": -51.980784441287454, \"stoi\": 0.9311142440593033, \"stoi_imp\": 0.21817376142710482}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 239, "text": " One of our clients need high recognition capability of denoising audio streams for improving sound quality.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"DCUNet_Libri1Mix_enhsingle_16k\", \"api_call\": \"BaseModel.from_pretrained('JorisCos/DCUNet_Libri1Mix_enhsingle_16k')\", \"api_arguments\": \"audio\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri1Mix\", \"accuracy\": {\"si_sdr\": 13.154035391645971, \"si_sdr_imp\": 9.704254085786271, \"sdr\": 13.568058873121435, \"sdr_imp\": 10.065396073908367, \"sar\": 13.568058873121435, \"sar_imp\": 10.065396073908367, \"stoi\": 0.9199373340235417, \"stoi_imp\": 0.12401751048300132}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the enh_single task of the Libri1Mix dataset.\"}}", "category": "generic"}
{"question_id": 240, "text": " A podcast company reached out to us wanting to change their speaker's voice in a recorded podcast.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/speecht5_vc\", \"api_call\": \"SpeechT5ForSpeechToSpeech.from_pretrained('microsoft/speecht5_vc')\", \"api_arguments\": {\"audio\": \"example_speech\", \"sampling_rate\": \"sampling_rate\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\", \"numpy\", \"torch\", \"soundfile\"], \"example_code\": \"from transformers import SpeechT5Processor, SpeechT5ForSpeechToSpeech, SpeechT5HifiGan\\nfrom datasets import load_dataset\\ndataset = load_dataset('hf-internal-testing/librispeech_asr_demo', 'clean', split='validation')\\ndataset = dataset.sort('id')\\nsampling_rate = dataset.features['audio'].sampling_rate\\nexample_speech = dataset[0]['audio']['array']\\nprocessor = SpeechT5Processor.from_pretrained('microsoft/speecht5_vc')\\nmodel = SpeechT5ForSpeechToSpeech.from_pretrained('microsoft/speecht5_vc')\\nvocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\\ninputs = processor(audio=example_speech, sampling_rate=sampling_rate, return_tensors='pt')\\nimport numpy as np\\nimport torch\\nspeaker_embeddings = np.load('xvector_speaker_embedding.npy')\\nspeaker_embeddings = torch.tensor(speaker_embeddings).unsqueeze(0)\\nspeech = model.generate_speech(inputs['input_values'], speaker_embeddings, vocoder=vocoder)\\nimport soundfile as sf\\nsf.write('speech.wav', speech.numpy(), samplerate=16000)\", \"performance\": {\"dataset\": \"CMU ARCTIC\", \"accuracy\": \"Not specified\"}, \"description\": \"SpeechT5 model fine-tuned for voice conversion (speech-to-speech) on CMU ARCTIC. The SpeechT5 framework consists of a shared encoder-decoder network and six modal-specific (speech/text) pre/post-nets. It is designed to improve the modeling capability for both speech and text. This model can be used for speech conversion tasks.\"}}", "category": "generic"}
{"question_id": 241, "text": " Our research team is focused on the analysis and separation of complex audio recordings. We need a model to be able to separate speaker voices from mixed sound.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri3Mix_sepclean_8k\", \"api_call\": \"ConvTasNet_Libri3Mix_sepclean_8k()\", \"api_arguments\": {\"n_src\": 3, \"sample_rate\": 8000, \"segment\": 3, \"task\": \"sep_clean\", \"train_dir\": \"data/wav8k/min/train-360\", \"valid_dir\": \"data/wav8k/min/dev\", \"kernel_size\": 16, \"n_filters\": 512, \"stride\": 8, \"bn_chan\": 128, \"hid_chan\": 512, \"mask_act\": \"relu\", \"n_blocks\": 8, \"n_repeats\": 3, \"skip_chan\": 128, \"lr\": 0.001, \"optimizer\": \"adam\", \"weight_decay\": 0.0, \"batch_size\": 24, \"early_stop\": true, \"epochs\": 200, \"half_lr\": true, \"num_workers\": 4}, \"python_environment_requirements\": \"Asteroid\", \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri3Mix\", \"accuracy\": {\"si_sdr\": 8.581797049575108, \"si_sdr_imp\": 11.977037288467368, \"sdr\": 9.305885208641385, \"sdr_imp\": 12.3943409734845, \"sir\": 16.42030534048559, \"sir_imp\": 19.508759460400984, \"sar\": 10.641943911079238, \"sar_imp\": -56.4345187842095, \"stoi\": 0.8365148408724333, \"stoi_imp\": 0.24401766199806396}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri3Mix dataset.\"}}", "category": "generic"}
{"question_id": 242, "text": " A Romanian-speaking person wants to communicate with an English-speaking friend over the phone using our platform. Please provide a method to translate their speech in real-time.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"facebook/textless_sm_ro_en\", \"api_call\": \"pipeline('audio-to-audio', model='facebook/textless_sm_ro_en')\", \"api_arguments\": \"audio file or recording\", \"python_environment_requirements\": \"fairseq, huggingface_hub\", \"example_code\": \"https://huggingface.co/facebook/textless_sm_cs_en\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": \"unknown\"}, \"description\": \"A speech-to-speech translation model for Romanian to English developed by Facebook AI\"}}", "category": "generic"}
{"question_id": 243, "text": " Implement an application that recognizes languages by analyzing an online audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Language Identification\", \"api_name\": \"lang-id-voxlingua107-ecapa\", \"api_call\": \"EncoderClassifier.from_hparams(source='speechbrain/lang-id-voxlingua107-ecapa', savedir='/tmp')\", \"api_arguments\": [\"source\", \"savedir\"], \"python_environment_requirements\": [\"speechbrain\", \"torchaudio\"], \"example_code\": \"signal = language_id.load_audio(https://omniglot.com/soundfiles/udhr/udhr_th.mp3)\\nprediction = language_id.classify_batch(signal)\\nprint(prediction)\", \"performance\": {\"dataset\": \"VoxLingua107 development dataset\", \"accuracy\": \"93.3%\"}, \"description\": \"This is a spoken language recognition model trained on the VoxLingua107 dataset using SpeechBrain. The model uses the ECAPA-TDNN architecture that has previously been used for speaker recognition. It covers 107 different languages.\"}}", "category": "generic"}
{"question_id": 244, "text": " A toy company wants to use your software to recognize spoken numbers (0-9) in English by young children for an interactive game. Please create an identifier.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"mazkooleg/0-9up-wavlm-base-plus-ft\", \"api_call\": \"pipeline('audio-classification', model='mazkooleg/0-9up-wavlm-base-plus-ft')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.27.3, torch==1.11.0, datasets==2.10.1, tokenizers==0.12.1\", \"example_code\": \"\", \"performance\": {\"dataset\": \"mazkooleg/0-9up_google_speech_commands_augmented_raw\", \"accuracy\": 0.9973}, \"description\": \"This model is a fine-tuned version of microsoft/wavlm-base-plus on the None dataset. It achieves the following results on the evaluation set: Loss: 0.0093, Accuracy: 0.9973.\"}}", "category": "generic"}
{"question_id": 245, "text": " Develop an automated podcast recommender system to suggest content that matches user's taste based on their favorite podcast speakers.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speaker Verification\", \"api_name\": \"speechbrain/spkrec-xvect-voxceleb\", \"api_call\": \"EncoderClassifier.from_hparams(source='speechbrain/spkrec-xvect-voxceleb', savedir='pretrained_models/spkrec-xvect-voxceleb')\", \"api_arguments\": [\"source\", \"savedir\"], \"python_environment_requirements\": [\"pip install speechbrain\"], \"example_code\": \"import torchaudio\\nfrom speechbrain.pretrained import EncoderClassifier\\nclassifier = EncoderClassifier.from_hparams(source=speechbrain/spkrec-xvect-voxceleb, savedir=pretrained_models/spkrec-xvect-voxceleb)\\nsignal, fs =torchaudio.load('tests/samples/ASR/spk1_snt1.wav')\\nembeddings = classifier.encode_batch(signal)\", \"performance\": {\"dataset\": \"Voxceleb1-test set (Cleaned)\", \"accuracy\": \"EER(%) 3.2\"}, \"description\": \"This repository provides all the necessary tools to extract speaker embeddings with a pretrained TDNN model using SpeechBrain. The system is trained on Voxceleb 1+ Voxceleb2 training data.\"}}", "category": "generic"}
{"question_id": 246, "text": " We are developing an app that can help mediate virtual therapy sessions. We need a feature that can detect emotions in the voice of the user.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"Rajaram1996/Hubert_emotion\", \"api_call\": \"HubertForSpeechClassification.from_pretrained('Rajaram1996/Hubert_emotion')\", \"api_arguments\": {\"audio_file\": \"string\"}, \"python_environment_requirements\": [\"audio_models\", \"transformers\", \"torch\", \"numpy\", \"pydub\"], \"example_code\": \"def predict_emotion_hubert(audio_file):\\n from audio_models import HubertForSpeechClassification\\n from transformers import Wav2Vec2FeatureExtractor, AutoConfig\\n import torch.nn.functional as F\\n import torch\\n import numpy as np\\n from pydub import AudioSegment\\nmodel = HubertForSpeechClassification.from_pretrained(Rajaram1996/Hubert_emotion)\\nfeature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(facebook/hubert-base-ls960)\\nsampling_rate=16000\\nconfig = AutoConfig.from_pretrained(Rajaram1996/Hubert_emotion)\\ndef speech_file_to_array(path, sampling_rate):\\n sound = AudioSegment.from_file(path)\\n sound = sound.set_frame_rate(sampling_rate)\\n sound_array = np.array(sound.get_array_of_samples())\\n return sound_array\\nsound_array = speech_file_to_array(audio_file, sampling_rate)\\ninputs = feature_extractor(sound_array, sampling_rate=sampling_rate, return_tensors=pt, padding=True)\\ninputs = {key: inputs[key].to(cpu).float() for key in inputs}\\nwith torch.no_grad():\\n logits = model(**inputs).logits\\nscores = F.softmax(logits, dim=1).detach().cpu().numpy()[0]\\noutputs = [{\\n emo: config.id2label[i],\\n score: round(score * 100, 1)}\\n for i, score in enumerate(scores)\\n]\\nreturn [row for row in sorted(outputs, key=lambda x:x[score], reverse=True) if row['score'] != '0.0%'][:2]\\nresult = predict_emotion_hubert(male-crying.mp3)\\nresult\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": \"unknown\"}, \"description\": \"A pretrained model for predicting emotion in local audio files using Hubert.\"}}", "category": "generic"}
{"question_id": 247, "text": " We are engineering a green consulting firm. We need to predict carbon emissions with input features from customer's dataset.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"Xinhhd/autotrain-zhongxin-contest-49402119333\", \"api_call\": \"AutoModel.from_pretrained('Xinhhd/autotrain-zhongxin-contest-49402119333')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"Xinhhd/autotrain-data-zhongxin-contest\", \"accuracy\": 0.889}, \"description\": \"A multi-class classification model trained with AutoTrain to predict carbon emissions based on input features.\"}}", "category": "generic"}
{"question_id": 248, "text": " Develop a system that can detect voices in a podcast to find out if guests are speaking or not. \\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speaker segmentation, Voice activity detection, Overlapped speech detection, Resegmentation, Raw scores\", \"api_name\": \"pyannote/segmentation\", \"api_call\": \"Model.from_pretrained('pyannote/segmentation', use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": {\"use_auth_token\": \"ACCESS_TOKEN_GOES_HERE\"}, \"python_environment_requirements\": \"pyannote.audio 2.1.1\", \"example_code\": {\"voice_activity_detection\": \"from pyannote.audio.pipelines import VoiceActivityDetection\\npipeline = VoiceActivityDetection(segmentation=model)\\nHYPER_PARAMETERS = {\\n onset: 0.5, offset: 0.5,\\n min_duration_on: 0.0,\\n min_duration_off: 0.0\\n}\\npipeline.instantiate(HYPER_PARAMETERS)\\nvad = pipeline(audio.wav)\", \"overlapped_speech_detection\": \"from pyannote.audio.pipelines import OverlappedSpeechDetection\\npipeline = OverlappedSpeechDetection(segmentation=model)\\npipeline.instantiate(HYPER_PARAMETERS)\\nosd = pipeline(audio.wav)\", \"resegmentation\": \"from pyannote.audio.pipelines import Resegmentation\\npipeline = Resegmentation(segmentation=model, diarization=baseline)\\npipeline.instantiate(HYPER_PARAMETERS)\\nresegmented_baseline = pipeline({audio: audio.wav, baseline: baseline})\"}, \"performance\": {\"dataset\": {\"AMI Mix-Headset\": {\"voice_activity_detection_accuracy\": {\"onset\": 0.684, \"offset\": 0.577, \"min_duration_on\": 0.181, \"min_duration_off\": 0.037}, \"overlapped_speech_detection_accuracy\": {\"onset\": 0.448, \"offset\": 0.362, \"min_duration_on\": 0.116, \"min_duration_off\": 0.187}, \"resegmentation_accuracy\": {\"onset\": 0.542, \"offset\": 0.527, \"min_duration_on\": 0.044, \"min_duration_off\": 0.705}}, \"DIHARD3\": {\"voice_activity_detection_accuracy\": {\"onset\": 0.767, \"offset\": 0.377, \"min_duration_on\": 0.136, \"min_duration_off\": 0.067}, \"overlapped_speech_detection_accuracy\": {\"onset\": 0.43, \"offset\": 0.32, \"min_duration_on\": 0.091, \"min_duration_off\": 0.144}, \"resegmentation_accuracy\": {\"onset\": 0.592, \"offset\": 0.489, \"min_duration_on\": 0.163, \"min_duration_off\": 0.182}}, \"VoxConverse\": {\"voice_activity_detection_accuracy\": {\"onset\": 0.767, \"offset\": 0.713, \"min_duration_on\": 0.182, \"min_duration_off\": 0.501}, \"overlapped_speech_detection_accuracy\": {\"onset\": 0.587, \"offset\": 0.426, \"min_duration_on\": 0.337, \"min_duration_off\": 0.112}, \"resegmentation_accuracy\": {\"onset\": 0.537, \"offset\": 0.724, \"min_duration_on\": 0.41, \"min_duration_off\": 0.563}}}}, \"description\": \"A pre-trained model for speaker segmentation, voice activity detection, overlapped speech detection, and resegmentation using the pyannote.audio framework.\"}}", "category": "generic"}
{"question_id": 249, "text": " Develop a machine learning product to help home buyers predict house prices in the US.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Single Column Regression\", \"api_name\": \"jwan2021/autotrain-us-housing-prices-1771761512\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\", \"json\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"jwan2021/autotrain-data-us-housing-prices\", \"accuracy\": {\"Loss\": 122809.223, \"R2\": 0.884, \"MSE\": 15082105200.447, \"MAE\": 95586.887, \"RMSLE\": 0.13}}, \"description\": \"A model trained using AutoTrain for predicting US housing prices with single column regression. The model is based on the jwan2021/autotrain-data-us-housing-prices dataset and has a CO2 Emissions of 50.5369 grams.\"}}", "category": "generic"}
{"question_id": 250, "text": " A game developer needs to predict the HP of a new Pokemon character based on several attributes. Provide the code to make that prediction.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Hugging Face\", \"functionality\": \"Predicting Pokemon HP\", \"api_name\": \"julien-c/pokemon-predict-hp\", \"api_call\": \"pipeline('regression', model='julien-c/pokemon-predict-hp')\", \"api_arguments\": \"input_data\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"julien-c/kaggle-rounakbanik-pokemon\", \"accuracy\": {\"mean_absolute_error\": 15.909, \"model_loss\": 647.605}}, \"description\": \"A tabular regression model trained on the julien-c/kaggle-rounakbanik-pokemon dataset to predict the HP of Pokemon.\"}}", "category": "generic"}
{"question_id": 251, "text": " Let's create a smart agent that can learn to play CartPole-v0 using reinforcement learning.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"deep-reinforcement-learning\", \"api_name\": \"ppo-seals-CartPole-v0\", \"api_call\": \"load_from_hub(repo_id='HumanCompatibleAI/ppo-seals-CartPole-v0',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"rl_zoo3\", \"stable-baselines3\", \"stable-baselines3-contrib\"], \"example_code\": \"python -m rl_zoo3.load_from_hub --algo ppo --env seals/CartPole-v0 -orga HumanCompatibleAI -f logs/\", \"performance\": {\"dataset\": \"seals/CartPole-v0\", \"accuracy\": \"500.00 +/- 0.00\"}, \"description\": \"This is a trained model of a PPO agent playing seals/CartPole-v0 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 252, "text": " The sports equipment company I work for wants to build a virtual soccer training game. The agent must be able to effectively play soccer against another team.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"ML-Agents\", \"functionality\": \"SoccerTwos\", \"api_name\": \"0xid/poca-SoccerTwos\", \"api_call\": \"mlagents-load-from-hf --repo-id='0xid/poca-SoccerTwos' --local-dir='./downloads'\", \"api_arguments\": [\"your_configuration_file_path.yaml\", \"run_id\"], \"python_environment_requirements\": [\"unity-ml-agents\", \"deep-reinforcement-learning\"], \"example_code\": \"mlagents-learn <your_configuration_file_path.yaml> --run-id=<run_id> --resume\", \"performance\": {\"dataset\": \"SoccerTwos\", \"accuracy\": \"N/A\"}, \"description\": \"A trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library.\"}}", "category": "generic"}
{"question_id": 253, "text": " We want to build a smart-cars training system for our team. I need you to solve the gym environment 'MountainCar-v0'.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"MountainCar-v0\", \"api_name\": \"sb3/dqn-MountainCar-v0\", \"api_call\": \"load_from_hub(repo_id='sb3/dqn-MountainCar-v0',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"RL Zoo\", \"SB3\", \"SB3 Contrib\"], \"example_code\": [\"python -m rl_zoo3.load_from_hub --algo dqn --env MountainCar-v0 -orga sb3 -f logs/\", \"python train.py --algo dqn --env MountainCar-v0 -f logs/\", \"python -m rl_zoo3.push_to_hub --algo dqn --env MountainCar-v0 -f logs/ -orga sb3\"], \"performance\": {\"dataset\": \"MountainCar-v0\", \"accuracy\": \"-103.40 +/- 7.49\"}, \"description\": \"This is a trained model of a DQN agent playing MountainCar-v0 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 254, "text": " We are a group of teachers looking to create an automated summary based on the student's essays.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"facebook/bart-base\", \"api_call\": \"BartModel.from_pretrained('facebook/bart-base')\", \"api_arguments\": [\"inputs\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import BartTokenizer, BartModel\\ntokenizer = BartTokenizer.from_pretrained('facebook/bart-base')\\nmodel = BartModel.from_pretrained('facebook/bart-base')\\ninputs = tokenizer(Hello, my dog is cute, return_tensors=pt)\\noutputs = model(**inputs)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"arxiv\", \"accuracy\": \"Not provided\"}, \"description\": \"BART is a transformer encoder-decoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder. BART is pre-trained by (1) corrupting text with an arbitrary noising function, and (2) learning a model to reconstruct the original text. BART is particularly effective when fine-tuned for text generation (e.g. summarization, translation) but also works well for comprehension tasks (e.g. text classification, question answering).\"}}", "category": "generic"}
{"question_id": 255, "text": " An important project is under development, and we need to know the positional relations between various keywords of a given medical text.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"cambridgeltl/SapBERT-from-PubMedBERT-fulltext\", \"api_call\": \"AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\", \"api_arguments\": \"input_ids, attention_mask\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"inputs = tokenizer('covid infection', return_tensors='pt'); outputs = model(**inputs); cls_embedding = outputs.last_hidden_state[:, 0, :]\", \"performance\": {\"dataset\": \"UMLS\", \"accuracy\": \"N/A\"}, \"description\": \"SapBERT is a pretraining scheme that self-aligns the representation space of biomedical entities. It is trained with UMLS 2020AA (English only) and uses microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext as the base model. The input should be a string of biomedical entity names, and the [CLS] embedding of the last layer is regarded as the output.\"}}", "category": "generic"}
{"question_id": 256, "text": " Build a system for detecting hate speech from social media comments in Korean.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Feature Extraction\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"kobart-base-v2\", \"api_call\": \"BartModel.from_pretrained('gogamza/kobart-base-v2')\", \"api_arguments\": {\"tokenizer\": \"PreTrainedTokenizerFast.from_pretrained('gogamza/kobart-base-v2')\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"tokenizers\": \"latest\"}, \"example_code\": \"from transformers import PreTrainedTokenizerFast, BartModel\\ntokenizer = PreTrainedTokenizerFast.from_pretrained('gogamza/kobart-base-v2')\\nmodel = BartModel.from_pretrained('gogamza/kobart-base-v2')\", \"performance\": {\"dataset\": \"NSMC\", \"accuracy\": 0.901}, \"description\": \"KoBART is a Korean encoder-decoder language model trained on over 40GB of Korean text using the BART architecture. It can be used for feature extraction and has been trained on a variety of data sources, including Korean Wiki, news, books, and more.\"}}", "category": "generic"}
{"question_id": 257, "text": " Our team is working on a recommendation system for a news article app. We should understand the semantic similarity of various texts.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"sup-simcse-roberta-large\", \"api_call\": \"AutoModel.from_pretrained('princeton-nlp/sup-simcse-roberta-large')\", \"api_arguments\": [\"AutoTokenizer\", \"AutoModel\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModel\\ntokenizer = AutoTokenizer.from_pretrained(princeton-nlp/sup-simcse-roberta-large)\\nmodel = AutoModel.from_pretrained(princeton-nlp/sup-simcse-roberta-large)\", \"performance\": {\"dataset\": \"STS tasks\", \"accuracy\": \"Spearman's correlation (See associated paper Appendix B)\"}, \"description\": \"A pretrained RoBERTa-large model for simple contrastive learning of sentence embeddings. It can be used for feature extraction and has been evaluated on semantic textual similarity (STS) tasks and downstream transfer tasks.\"}}", "category": "generic"}
{"question_id": 258, "text": " We are developing an AI chatbot for a Russian company. I want to extract features from the clients' text messages in Russian language.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"DeepPavlov/rubert-base-cased\", \"api_call\": \"AutoModel.from_pretrained('DeepPavlov/rubert-base-cased')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Russian part of Wikipedia and news data\", \"accuracy\": \"\"}, \"description\": \"RuBERT (Russian, cased, 12\\u2011layer, 768\\u2011hidden, 12\\u2011heads, 180M parameters) was trained on the Russian part of Wikipedia and news data. We used this training data to build a vocabulary of Russian subtokens and took a multilingual version of BERT\\u2011base as an initialization for RuBERT[1].\"}}", "category": "generic"}
{"question_id": 259, "text": " I am an artist who wants to create a new piece of artwork based on the prompt \\\"A futuristic city under the ocean\\\".\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Generation\", \"api_name\": \"CompVis/stable-diffusion-v1-4\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('CompVis/stable-diffusion-v1-4')\", \"api_arguments\": [\"prompt\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"scipy\"], \"example_code\": \"import torch\\nfrom diffusers import StableDiffusionPipeline\\nmodel_id = CompVis/stable-diffusion-v1-4\\ndevice = cuda\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe = pipe.to(device)\\nprompt = a photo of an astronaut riding a horse on mars\\nimage = pipe(prompt).images[0]\\nimage.save(astronaut_rides_horse.png)\", \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion is a latent text-to-image diffusion model capable of generating photo-realistic images given any text input. The Stable-Diffusion-v1-4 checkpoint was fine-tuned on 225k steps at resolution 512x512 on laion-aesthetics v2 5+ and 10% dropping of the text-conditioning to improve classifier-free guidance sampling. This model is intended for research purposes and can be used for generating artworks, design, educational or creative tools, and research on generative models.\"}}", "category": "generic"}
{"question_id": 260, "text": " Create a character-like artwork image based on the phrase 'anime-style girl with a guitar'.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"andite/anything-v4.0\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('andite/anything-v4.0', torch_dtype=torch.float16)\", \"api_arguments\": {\"model_id\": \"andite/anything-v4.0\", \"torch_dtype\": \"torch.float16\", \"device\": \"cuda\", \"prompt\": \"hatsune_miku\"}, \"python_environment_requirements\": {\"diffusers\": \"StableDiffusionPipeline\", \"torch\": \"torch\"}, \"example_code\": {\"from diffusers import StableDiffusionPipeline\": \"\", \"import torch\": \"\", \"model_id = andite/anything-v4.0\": \"\", \"pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\": \"\", \"pipe = pipe.to(cuda)\": \"\", \"prompt = hatsune_miku\": \"\", \"image = pipe(prompt).images[0]\": \"\", \"image.save(./hatsune_miku.png)\": \"\"}, \"performance\": {\"dataset\": \"Not specified\", \"accuracy\": \"Not specified\"}, \"description\": \"Anything V4 is a latent diffusion model for generating high-quality, highly detailed anime-style images with just a few prompts. It supports danbooru tags to generate images and can be used just like any other Stable Diffusion model.\"}}", "category": "generic"}
{"question_id": 261, "text": " We are designing an application that can generate images based on textual descriptions. We need to load a model capable of performing text-to-image conversion.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"stabilityai/sd-vae-ft-ema\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('CompVis/stable-diffusion-v1-4', vae=AutoencoderKL.from_pretrained('stabilityai/sd-vae-ft-ema'))\", \"api_arguments\": {\"model\": \"CompVis/stable-diffusion-v1-4\", \"vae\": \"AutoencoderKL.from_pretrained(stabilityai/sd-vae-ft-ema)\"}, \"python_environment_requirements\": {\"diffusers\": \"diffusers library\"}, \"example_code\": \"from diffusers.models import AutoencoderKL\\nfrom diffusers import StableDiffusionPipeline\\nmodel = CompVis/stable-diffusion-v1-4\\nvae = AutoencoderKL.from_pretrained(stabilityai/sd-vae-ft-ema)\\npipe = StableDiffusionPipeline.from_pretrained(model, vae=vae)\", \"performance\": {\"dataset\": {\"COCO 2017 (256x256, val, 5000 images)\": {\"accuracy\": {\"rFID\": 4.42, \"PSNR\": \"23.8 +/- 3.9\", \"SSIM\": \"0.69 +/- 0.13\", \"PSIM\": \"0.96 +/- 0.27\"}}, \"LAION-Aesthetics 5+ (256x256, subset, 10000 images)\": {\"accuracy\": {\"rFID\": 1.77, \"PSNR\": \"26.7 +/- 4.8\", \"SSIM\": \"0.82 +/- 0.12\", \"PSIM\": \"0.67 +/- 0.34\"}}}}, \"description\": \"This is a fine-tuned VAE decoder for the Stable Diffusion Pipeline. It has been fine-tuned on a 1:1 ratio of LAION-Aesthetics and LAION-Humans datasets. The decoder can be used as a drop-in replacement for the existing autoencoder.\"}}", "category": "generic"}
{"question_id": 262, "text": " A food delivery app wants to help users understand ingredients in the food item by analyzing the images. We need a solution to process the food images and give textual information about the items.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"blip2-opt-2.7b\", \"api_call\": \"Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"api_arguments\": {\"img_url\": \"https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg\", \"question\": \"how many dogs are in the picture?\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": {\"import_requests\": \"import requests\", \"import_PIL\": \"from PIL import Image\", \"import_transformers\": \"from transformers import BlipProcessor, Blip2ForConditionalGeneration\", \"load_processor\": \"processor = BlipProcessor.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_model\": \"model = Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_image\": \"raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\", \"process_inputs\": \"inputs = processor(raw_image, question, return_tensors='pt')\", \"generate_output\": \"out = model.generate(**inputs)\", \"decode_output\": \"print(processor.decode(out[0], skip_special_tokens=True))\"}, \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not specified\"}, \"description\": \"BLIP-2 model, leveraging OPT-2.7b (a large language model with 2.7 billion parameters). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, given the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 263, "text": " The company wants to create a social media application like Pinterest that generates captions for users' images. Show us how to create this functionality.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"blip2-opt-6.7b\", \"api_call\": \"pipeline('text2text-generation', model='salesforce/blip2-opt-6.7b')\", \"api_arguments\": \"image, optional text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"Refer to the documentation\", \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not specified\"}, \"description\": \"BLIP-2 model, leveraging OPT-6.7b (a large language model with 6.7 billion parameters). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, giving the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 264, "text": " We are an analytics company that needs help in extracting data tables from plots and charts efficiently.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"google/deplot\", \"api_call\": \"Pix2StructForConditionalGeneration.from_pretrained('google/deplot')\", \"api_arguments\": {\"images\": \"image\", \"text\": \"question\", \"return_tensors\": \"pt\", \"max_new_tokens\": 512}, \"python_environment_requirements\": {\"transformers\": \"Pix2StructForConditionalGeneration, Pix2StructProcessor\", \"requests\": \"requests\", \"PIL\": \"Image\"}, \"example_code\": \"from transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\\nimport requests\\nfrom PIL import Image\\nmodel = Pix2StructForConditionalGeneration.from_pretrained('google/deplot')\\nprocessor = Pix2StructProcessor.from_pretrained('google/deplot')\\nurl = https://raw.githubusercontent.com/vis-nlp/ChartQA/main/ChartQA%20Dataset/val/png/5090.png\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(images=image, text=Generate underlying data table of the figure below:, return_tensors=pt)\\npredictions = model.generate(**inputs, max_new_tokens=512)\\nprint(processor.decode(predictions[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"ChartQA\", \"accuracy\": \"24.0% improvement over finetuned SOTA\"}, \"description\": \"DePlot is a model that translates the image of a plot or chart to a linearized table. It decomposes the challenge of visual language reasoning into two steps: (1) plot-to-text translation, and (2) reasoning over the translated text. The output of DePlot can then be directly used to prompt a pretrained large language model (LLM), exploiting the few-shot reasoning capabilities of LLMs.\"}}", "category": "generic"}
{"question_id": 265, "text": " Our marketing team wants a video commercial for our product. They are looking for a video with a couple sitting in a cafe and laughing while using our product.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-video synthesis\", \"api_name\": \"damo-vilab/text-to-video-ms-1.7b\", \"api_call\": \"DiffusionPipeline.from_pretrained('damo-vilab/text-to-video-ms-1.7b', torch_dtype=torch.float16, variant=fp16)\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\", \"variant\": \"fp16\"}, \"python_environment_requirements\": \"pip install diffusers transformers accelerate\", \"example_code\": \"import torch\\nfrom diffusers import DiffusionPipeline, DPMSolverMultistepScheduler\\nfrom diffusers.utils import export_to_video\\npipe = DiffusionPipeline.from_pretrained(damo-vilab/text-to-video-ms-1.7b, torch_dtype=torch.float16, variant=fp16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\nprompt = Spiderman is surfing\\nvideo_frames = pipe(prompt, num_inference_steps=25).frames\\nvideo_path = export_to_video(video_frames)\", \"performance\": {\"dataset\": \"Webvid, ImageNet, LAION5B\", \"accuracy\": \"N/A\"}, \"description\": \"This model is based on a multi-stage text-to-video generation diffusion model, which inputs a description text and returns a video that matches the text description. The model consists of three sub-networks: text feature extraction model, text feature-to-video latent space diffusion model, and video latent space to video visual space model. The overall model parameters are about 1.7 billion. Currently, it only supports English input.\"}}", "category": "generic"}
{"question_id": 266, "text": " A company is having an ad campaign with a superhero theme. They want to generate a video of Spiderman surfing to showcase as a social media ad.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video Synthesis\", \"api_name\": \"damo-vilab/text-to-video-ms-1.7b-legacy\", \"api_call\": \"DiffusionPipeline.from_pretrained('damo-vilab/text-to-video-ms-1.7b-legacy', torch_dtype=torch.float16)\", \"api_arguments\": [\"prompt\", \"num_inference_steps\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\"], \"example_code\": \"import torch\\nfrom diffusers import DiffusionPipeline, DPMSolverMultistepScheduler\\nfrom diffusers.utils import export_to_video\\npipe = DiffusionPipeline.from_pretrained(damo-vilab/text-to-video-ms-1.7b-legacy, torch_dtype=torch.float16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\nprompt = Spiderman is surfing\\nvideo_frames = pipe(prompt, num_inference_steps=25).frames\\nvideo_path = export_to_video(video_frames)\", \"performance\": {\"dataset\": [\"LAION5B\", \"ImageNet\", \"Webvid\"], \"accuracy\": \"Not provided\"}, \"description\": \"This model is based on a multi-stage text-to-video generation diffusion model, which inputs a description text and returns a video that matches the text description. Only English input is supported.\"}}", "category": "generic"}
{"question_id": 267, "text": " We are developing a solution where we can visually detect the medical conditions of patients. Can you write code to determine the condition based on the image provided?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"git-large-textvqa\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/git-large-textvqa')\", \"api_arguments\": \"image, question\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"TextVQA\", \"accuracy\": \"See table 11 in the paper for more details.\"}, \"description\": \"GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextVQA. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like: image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).\"}}", "category": "generic"}
{"question_id": 268, "text": " Help me to build a visual-question-answering model that takes a question and an image as input and returns an answer based on the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"temp_vilt_vqa\", \"api_call\": \"pipeline('visual-question-answering', model='Bingsu/temp_vilt_vqa', tokenizer='Bingsu/temp_vilt_vqa')\", \"api_arguments\": {\"model\": \"Bingsu/temp_vilt_vqa\", \"tokenizer\": \"Bingsu/temp_vilt_vqa\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A visual question answering model for answering questions related to images using the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 269, "text": " Implement an optical text recognition system for documents that can answer a simple question about the document's content.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"DataIntelligenceTeam/eurocorpV4\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('DataIntelligenceTeam/eurocorpV4')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers>=4.26.0.dev0, torch>=1.12.1+cu113, datasets>=2.2.2, tokenizers>=0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"sroie\", \"accuracy\": 0.982}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv3-large on the sroie dataset. It achieves the following results on the evaluation set: Loss: 0.1239, Precision: 0.9548, Recall: 0.9602, F1: 0.9575, Accuracy: 0.9819\"}}", "category": "generic"}
{"question_id": 270, "text": " Our company deals with insurance claims. We need a smart assistant who can retrieve information from documents, especially invoices, such as total amount, date of invoice, and name of the service provider.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"vision-encoder-decoder\", \"api_name\": \"jinhybr/OCR-DocVQA-Donut\", \"api_call\": \"pipeline('document-question-answering', model='jinhybr/OCR-DocVQA-Donut')\", \"api_arguments\": \"image_path, question\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"doc_vqa(image_path='path/to/image.jpg', question='What is the title?')\", \"performance\": {\"dataset\": \"DocVQA\", \"accuracy\": \"Not provided\"}, \"description\": \"Donut model fine-tuned on DocVQA. It consists of a vision encoder (Swin Transformer) and a text decoder (BART). Given an image, the encoder first encodes the image into a tensor of embeddings, after which the decoder autoregressively generates text, conditioned on the encoding of the encoder.\"}}", "category": "generic"}
{"question_id": 271, "text": " We have an AI-powered document management system that needs to answer questions based on the content of a given document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased-finetuned-infovqa\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('tiennvcs/layoutlmv2-base-uncased-finetuned-infovqa')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \"4.12.2\", \"pytorch\": \"1.8.0+cu101\", \"datasets\": \"1.14.0\", \"tokenizers\": \"0.10.3\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 2.087}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-base-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 272, "text": " Take a look at this document image and tell me the answer to my question: \\\"What is the total amount due?\\\".\\n###Input: {\\\"image_url\\\": \\\"https://example.com/document_invoice.jpg\\\", \\\"question\\\": \\\"What is the total amount due?\\\"}\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.11.0\"}, \"example_code\": {}, \"performance\": {\"dataset\": {}, \"accuracy\": {}}, \"description\": \"A document question answering model based on LayoutLMv2, which can be used to extract answers from images with text and layout information.\"}}", "category": "generic"}
{"question_id": 273, "text": " I am designing a parking spot detector for a car parking management solution. I want the model to estimage the depth of the car park.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-044810\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode-221122-044810')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.24.0, torch==1.12.1, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.369, \"Mae\": 0.2909, \"Rmse\": 0.4208, \"Abs Rel\": 0.3635, \"Log Mae\": 0.1224, \"Log Rmse\": 0.1793, \"Delta1\": 0.5323, \"Delta2\": 0.8179, \"Delta3\": 0.9258}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 274, "text": " We are researching multi-view 3D scanning, and we would like to improve our depth estimation with a pretrained model.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-082237\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221122-082237')\", \"api_arguments\": \"pretrained_model_name\", \"python_environment_requirements\": \"transformers>=4.24.0, pytorch>=1.12.1, tokenizers>=0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3421, \"Mae\": 0.27, \"Rmse\": 0.4042, \"Abs Rel\": 0.3279, \"Log Mae\": 0.1132, \"Log Rmse\": 0.1688, \"Delta1\": 0.5839, \"Delta2\": 0.8408, \"Delta3\": 0.9309}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset. It is used for depth estimation tasks.\"}}", "category": "generic"}
{"question_id": 275, "text": " I am building an app to detect objects in an image from a URL. How can I experiment with object detection models using transformers?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"facebook/detr-resnet-101\", \"api_call\": \"DetrForObjectDetection.from_pretrained('facebook/detr-resnet-101')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"transformers\", \"torch\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import DetrImageProcessor, DetrForObjectDetection\\nimport torch\\nfrom PIL import Image\\nimport requests\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = DetrImageProcessor.from_pretrained(facebook/detr-resnet-101)\\nmodel = DetrForObjectDetection.from_pretrained(facebook/detr-resnet-101)\\ninputs = processor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"COCO 2017\", \"accuracy\": \"43.5 AP\"}, \"description\": \"DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paper End-to-End Object Detection with Transformers by Carion et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 276, "text": " I have a picture of my backyard, but I am not sure if a cat sneaked in. Can you help me find out if it is a cat in the picture?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"hustvl/yolos-small\", \"api_call\": \"YolosForObjectDetection.from_pretrained('hustvl/yolos-small')\", \"api_arguments\": {\"model_name\": \"hustvl/yolos-small\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": {\"import\": [\"from transformers import YolosFeatureExtractor, YolosForObjectDetection\", \"from PIL import Image\", \"import requests\"], \"url\": \"http://images.cocodataset.org/val2017/000000039769.jpg\", \"image\": \"Image.open(requests.get(url, stream=True).raw)\", \"feature_extractor\": \"YolosFeatureExtractor.from_pretrained('hustvl/yolos-small')\", \"model\": \"YolosForObjectDetection.from_pretrained('hustvl/yolos-small')\", \"inputs\": \"feature_extractor(images=image, return_tensors='pt')\", \"outputs\": \"model(**inputs)\", \"logits\": \"outputs.logits\", \"bboxes\": \"outputs.pred_boxes\"}, \"performance\": {\"dataset\": \"COCO 2017 validation\", \"accuracy\": \"36.1 AP\"}, \"description\": \"YOLOS model fine-tuned on COCO 2017 object detection (118k annotated images). It was introduced in the paper You Only Look at One Sequence: Rethinking Transformer in Vision through Object Detection by Fang et al. and first released in this repository. YOLOS is a Vision Transformer (ViT) trained using the DETR loss. Despite its simplicity, a base-sized YOLOS model is able to achieve 42 AP on COCO validation 2017 (similar to DETR and more complex frameworks such as Faster R-CNN).\"}}", "category": "generic"}
{"question_id": 277, "text": " Our hospital needs to analyze digital blood samples in order to detect and count platelets, red blood cells, and white blood cells.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-blood-cell-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-blood-cell-detection')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic_nms\": false, \"max_det\": 1000}, \"python_environment_requirements\": [\"ultralyticsplus==0.0.24\", \"ultralytics==8.0.23\"], \"example_code\": [\"from ultralyticsplus import YOLO, render_result\", \"model = YOLO('keremberke/yolov8m-blood-cell-detection')\", \"model.overrides['conf'] = 0.25\", \"model.overrides['iou'] = 0.45\", \"model.overrides['agnostic_nms'] = False\", \"model.overrides['max_det'] = 1000\", \"image = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model.predict(image)\", \"print(results[0].boxes)\", \"render = render_result(model=model, image=image, result=results[0])\", \"render.show()\"], \"performance\": {\"dataset\": \"blood-cell-object-detection\", \"accuracy\": 0.927}, \"description\": \"A YOLOv8 model for blood cell detection, including Platelets, RBC, and WBC. Trained on the blood-cell-object-detection dataset.\"}}", "category": "generic"}
{"question_id": 278, "text": " Develop a script that extracts a table from a given document and then visualize the results.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Table Extraction\", \"api_name\": \"keremberke/yolov8n-table-extraction\", \"api_call\": \"YOLO('keremberke/yolov8n-table-extraction')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic_nms\": false, \"max_det\": 1000}, \"python_environment_requirements\": [\"ultralyticsplus==0.0.23\", \"ultralytics==8.0.21\"], \"example_code\": [\"from ultralyticsplus import YOLO, render_result\", \"model = YOLO('keremberke/yolov8n-table-extraction')\", \"model.overrides['conf'] = 0.25\", \"model.overrides['iou'] = 0.45\", \"model.overrides['agnostic_nms'] = False\", \"model.overrides['max_det'] = 1000\", \"image = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model.predict(image)\", \"print(results[0].boxes)\", \"render = render_result(model=model, image=image, result=results[0])\", \"render.show()\"], \"performance\": {\"dataset\": \"table-extraction\", \"accuracy\": 0.967}, \"description\": \"An object detection model for extracting tables from documents. Supports two label types: 'bordered' and 'borderless'.\"}}", "category": "generic"}
{"question_id": 279, "text": " We are now working on an architectural image generation project to generate different images of architecture.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"ControlNet - M-LSD Straight Line Version\", \"api_name\": \"lllyasviel/sd-controlnet-mlsd\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd')\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": {\"diffusers\": \"pip install diffusers\", \"transformers\": \"pip install transformers\", \"accelerate\": \"pip install accelerate\", \"controlnet_aux\": \"pip install controlnet_aux\"}, \"example_code\": {\"import\": [\"from PIL import Image\", \"from diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\", \"import torch\", \"from controlnet_aux import MLSDdetector\", \"from diffusers.utils import load_image\"], \"setup\": [\"mlsd = MLSDdetector.from_pretrained('lllyasviel/ControlNet')\", \"image = load_image(https://huggingface.co/lllyasviel/sd-controlnet-mlsd/resolve/main/images/room.png)\", \"image = mlsd(image)\", \"controlnet = ControlNetModel.from_pretrained(lllyasviel/sd-controlnet-mlsd, torch_dtype=torch.float16)\", \"pipe = StableDiffusionControlNetPipeline.from_pretrained(runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)\", \"pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\"], \"execution\": [\"pipe.enable_xformers_memory_efficient_attention()\", \"pipe.enable_model_cpu_offload()\", \"image = pipe(room, image, num_inference_steps=20).images[0]\", \"image.save('images/room_mlsd_out.png')\"]}, \"performance\": {\"dataset\": \"600k edge-image, caption pairs generated from Places2\", \"accuracy\": \"Not specified\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on M-LSD straight line detection. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 280, "text": " We are designing a book cover where the book is about love and roses. We have the idea of \\\"A head full of roses.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Diffusion-based text-to-image generation model\", \"api_name\": \"lllyasviel/control_v11p_sd15_normalbae\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_normalbae')\", \"api_arguments\": [\"checkpoint\", \"torch_dtype\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom controlnet_aux import NormalBaeDetector\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11p_sd15_normalbae\\nimage = load_image(\\n https://huggingface.co/lllyasviel/control_v11p_sd15_normalbae/resolve/main/images/input.png\\n)\\nprompt = A head full of roses\\nprocessor = NormalBaeDetector.from_pretrained(lllyasviel/Annotators)\\ncontrol_image = processor(image)\\ncontrol_image.save(./images/control.png)\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(33)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"ControlNet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on normalbae images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.\"}}", "category": "generic"}
{"question_id": 281, "text": " Help me generate a realistic bedroom interior image that can be used as reference for a 3D model being created for a virtual reality game.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Denoising Diffusion Probabilistic Models (DDPM)\", \"api_name\": \"google/ddpm-bedroom-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-bedroom-256')\", \"api_arguments\": \"None\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-bedroom-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception score\": 9.46, \"FID score\": 3.17}}, \"description\": \"We present high quality image synthesis results using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. Our best results are obtained by training on a weighted variational bound designed according to a novel connection between diffusion probabilistic models and denoising score matching with Langevin dynamics, and our models naturally admit a progressive lossy decompression scheme that can be interpreted as a generalization of autoregressive decoding. On the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. On 256x256 LSUN, we obtain sample quality similar to ProgressiveGAN.\"}}", "category": "generic"}
{"question_id": 282, "text": " You feel lonely and need to generate a picture of a butterfly. How would you proceed?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"utyug1/sd-class-butterflies-32\", \"api_call\": \"DDPMPipeline.from_pretrained('utyug1/sd-class-butterflies-32')\", \"api_arguments\": {\"pretrained_model\": \"utyug1/sd-class-butterflies-32\"}, \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('utyug1/sd-class-butterflies-32')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"Not specified\", \"accuracy\": \"Not specified\"}, \"description\": \"This model is a diffusion model for unconditional image generation of cute butterflies.\"}}", "category": "generic"}
{"question_id": 283, "text": " We need an AI-generated insect image for our biology article about African habitats.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"sd-class-pandas-32\", \"api_call\": \"DDPMPipeline.from_pretrained('schdoel/sd-class-AFHQ-32')\", \"api_arguments\": {\"pretrained_model\": \"schdoel/sd-class-AFHQ-32\"}, \"python_environment_requirements\": {\"package\": \"diffusers\", \"import\": \"from diffusers import DDPMPipeline\"}, \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('schdoel/sd-class-AFHQ-32')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"AFHQ\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a diffusion model for unconditional image generation of cute \\ud83e\\udd8b.\"}}", "category": "generic"}
{"question_id": 284, "text": " Our client is involved in a sports organization, and they require a solution to classify sports videos efficiently.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"facebook/timesformer-hr-finetuned-k600\", \"api_call\": \"TimesformerForVideoClassification.from_pretrained('facebook/timesformer-hr-finetuned-k600')\", \"api_arguments\": {\"images\": \"video\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"numpy\", \"torch\"], \"example_code\": \"from transformers import AutoImageProcessor, TimesformerForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 448, 448))\\nprocessor = AutoImageProcessor.from_pretrained(facebook/timesformer-hr-finetuned-k600)\\nmodel = TimesformerForVideoClassification.from_pretrained(facebook/timesformer-hr-finetuned-k600)\\ninputs = processor(images=video, return_tensors=pt)\\nwith torch.no_grad():\\n  outputs = model(**inputs)\\n  logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-600\", \"accuracy\": \"Not provided\"}, \"description\": \"TimeSformer model pre-trained on Kinetics-600. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository. The model can be used for video classification into one of the 600 possible Kinetics-600 labels.\"}}", "category": "generic"}
{"question_id": 285, "text": " We need to create a content filter for images submitted by users in our online community. We want to detect and filter out adult content and offensive images.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-ViT-B-32-laion2B-s34B-b79K\", \"api_call\": \"pipeline('zero-shot-classification', model='laion/CLIP-ViT-B-32-laion2B-s34B-b79K')\", \"api_arguments\": {\"image\": \"path/to/image\", \"class_names\": [\"class1\", \"class2\", \"class3\"]}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"from transformers import pipeline; classifier = pipeline('zero-shot-classification', model='laion/CLIP-ViT-B-32-laion2B-s34B-b79K'); classifier(image='path/to/image', class_names=['class1', 'class2', 'class3'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": 66.6}, \"description\": \"A CLIP ViT-B/32 model trained with the LAION-2B English subset of LAION-5B using OpenCLIP. It enables researchers to better understand and explore zero-shot, arbitrary image classification. The model can be used for zero-shot image classification, image and text retrieval, among others.\"}}", "category": "generic"}
{"question_id": 286, "text": " We are an animal rescue organization, and we are looking for a way to automatically identify if images uploaded to our site contain cats, dogs, or birds.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft-soup\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft-soup')\", \"api_arguments\": \"image_path, class_names\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"results = model(image_path, class_names='cat, dog, bird')\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"76.9\"}, \"description\": \"A series of CLIP ConvNeXt-Large (w/ extra text depth, vision MLP head) models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models utilize the timm ConvNeXt-Large model (convnext_large) as the image tower, a MLP (fc - gelu - drop - fc) head in vision tower instead of the single projection of other CLIP models, and a text tower with same width but 4 layers more depth than ViT-L / RN50x16 models (depth 16, embed dim 768).\"}}", "category": "generic"}
{"question_id": 287, "text": " Create a machine learning-based image recognition tool that can identify whether an animal in an image is a cat or a dog.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')\", \"api_arguments\": {\"image_path\": \"Path to the image file\", \"class_names\": \"List of comma-separated class names\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; classifier = pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft'); classifier('path/to/image.jpg', ['class1', 'class2'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"75.9-76.9%\"}, \"description\": \"A series of CLIP ConvNeXt-Large models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models achieve between 75.9 and 76.9 top-1 zero-shot accuracy on ImageNet-1k.\"}}", "category": "generic"}
{"question_id": 288, "text": " I want to find out whether a given review is positive or negative. I need an API that can help me with sentiment analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"sentiment_analysis_generic_dataset\", \"api_call\": \"pipeline('text-classification', model='Seethal/sentiment_analysis_generic_dataset')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"sentiment_analysis('I love this product!')\", \"performance\": {\"dataset\": \"generic_dataset\", \"accuracy\": \"Not specified\"}, \"description\": \"This is a fine-tuned downstream version of the bert-base-uncased model for sentiment analysis, this model is not intended for further downstream fine-tuning for any other tasks. This model is trained on a classified dataset for text classification.\"}}", "category": "generic"}
{"question_id": 289, "text": " I am a traveler and I want to know the best time to visit a Chinese historical site. Take a look at an image and tell me whether it is a good time to visit the site or not.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"OFA-Sys/chinese-clip-vit-base-patch16\", \"api_call\": \"ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-base-patch16')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"OFA-Sys/chinese-clip-vit-base-patch16\"}, \"python_environment_requirements\": {\"transformers\": \"ChineseCLIPProcessor, ChineseCLIPModel\"}, \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\\nmodel = ChineseCLIPModel.from_pretrained(OFA-Sys/chinese-clip-vit-base-patch16)\\nprocessor = ChineseCLIPProcessor.from_pretrained(OFA-Sys/chinese-clip-vit-base-patch16)\\nurl = https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/pokemon.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [, , , ]\\ninputs = processor(images=image, return_tensors=pt)\\nimage_features = model.get_image_features(**inputs)\\nimage_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, padding=True, return_tensors=pt)\\ntext_features = model.get_text_features(**inputs)\\ntext_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": {\"MUGE Text-to-Image Retrieval\": {\"accuracy\": {\"Zero-shot R@1\": 63.0, \"Zero-shot R@5\": 84.1, \"Zero-shot R@10\": 89.2, \"Finetune R@1\": 68.9, \"Finetune R@5\": 88.7, \"Finetune R@10\": 93.1}}, \"Flickr30K-CN Retrieval\": {\"accuracy\": {\"Zero-shot Text-to-Image R@1\": 71.2, \"Zero-shot Text-to-Image R@5\": 91.4, \"Zero-shot Text-to-Image R@10\": 95.5, \"Finetune Text-to-Image R@1\": 83.8, \"Finetune Text-to-Image R@5\": 96.9, \"Finetune Text-to-Image R@10\": 98.6, \"Zero-shot Image-to-Text R@1\": 81.6, \"Zero-shot Image-to-Text R@5\": 97.5, \"Zero-shot Image-to-Text R@10\": 98.8, \"Finetune Image-to-Text R@1\": 95.3, \"Finetune Image-to-Text R@5\": 99.7, \"Finetune Image-to-Text R@10\": 100.0}}, \"COCO-CN Retrieval\": {\"accuracy\": {\"Zero-shot Text-to-Image R@1\": 69.2, \"Zero-shot Text-to-Image R@5\": 89.9, \"Zero-shot Text-to-Image R@10\": 96.1, \"Finetune Text-to-Image R@1\": 81.5, \"Finetune Text-to-Image R@5\": 96.9, \"Finetune Text-to-Image R@10\": 99.1, \"Zero-shot Image-to-Text R@1\": 63.0, \"Zero-shot Image-to-Text R@5\": 86.6, \"Zero-shot Image-to-Text R@10\": 92.9, \"Finetune Image-to-Text R@1\": 83.5, \"Finetune Image-to-Text R@5\": 97.3, \"Finetune Image-to-Text R@10\": 99.2}}, \"Zero-shot Image Classification\": {\"accuracy\": {\"CIFAR10\": 96.0, \"CIFAR100\": 79.7, \"DTD\": 51.2, \"EuroSAT\": 52.0, \"FER\": 55.1, \"FGVC\": 26.2, \"KITTI\": 49.9, \"MNIST\": 79.4, \"PC\": 63.5, \"VOC\": 84.9}}}}, \"description\": \"Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It uses ViT-B/16 as the image encoder and RoBERTa-wwm-base as the text encoder.\"}}", "category": "generic"}
{"question_id": 290, "text": " Organizing a special event and want to identify the place where street pictures were taken for invitations.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Geolocalization\", \"api_name\": \"geolocal/StreetCLIP\", \"api_call\": \"CLIPModel.from_pretrained('geolocal/StreetCLIP')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"geolocal/StreetCLIP\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(geolocal/StreetCLIP)\\nprocessor = CLIPProcessor.from_pretrained(geolocal/StreetCLIP)\\nurl = https://huggingface.co/geolocal/StreetCLIP/resolve/main/sanfrancisco.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nchoices = [San Jose, San Diego, Los Angeles, Las Vegas, San Francisco]\\ninputs = processor(text=choices, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [{\"name\": \"IM2GPS\", \"accuracy\": {\"25km\": 28.3, \"200km\": 45.1, \"750km\": 74.7, \"2500km\": 88.2}}, {\"name\": \"IM2GPS3K\", \"accuracy\": {\"25km\": 22.4, \"200km\": 37.4, \"750km\": 61.3, \"2500km\": 80.4}}]}, \"description\": \"StreetCLIP is a robust foundation model for open-domain image geolocalization and other geographic and climate-related tasks. Trained on an original dataset of 1.1 million street-level urban and rural geo-tagged images, it achieves state-of-the-art performance on multiple open-domain image geolocalization benchmarks in zero-shot, outperforming supervised models trained on millions of images.\"}}", "category": "generic"}
{"question_id": 291, "text": " Our client wants us to monitor consumer sentiment on their e-commerce platform. We must identify low-rated product reviews in six languages: English, Dutch, German, French, Italian, and Spanish.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"bert-base-multilingual-uncased-sentiment\", \"api_call\": \"pipeline('sentiment-analysis', model='nlptown/bert-base-multilingual-uncased-sentiment')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"result = sentiment_pipeline('I love this product!')\", \"performance\": {\"dataset\": [{\"language\": \"English\", \"accuracy\": {\"exact\": \"67%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Dutch\", \"accuracy\": {\"exact\": \"57%\", \"off-by-1\": \"93%\"}}, {\"language\": \"German\", \"accuracy\": {\"exact\": \"61%\", \"off-by-1\": \"94%\"}}, {\"language\": \"French\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"94%\"}}, {\"language\": \"Italian\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Spanish\", \"accuracy\": {\"exact\": \"58%\", \"off-by-1\": \"95%\"}}]}, \"description\": \"This a bert-base-multilingual-uncased model finetuned for sentiment analysis on product reviews in six languages: English, Dutch, German, French, Spanish and Italian. It predicts the sentiment of the review as a number of stars (between 1 and 5).\"}}", "category": "generic"}
{"question_id": 292, "text": " Write a script for an online forum moderator that will help them to detect gibberish text in a post.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"madhurjindal/autonlp-Gibberish-Detector-492513457\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('madhurjindal/autonlp-Gibberish-Detector-492513457')\", \"api_arguments\": {\"inputs\": \"I love AutoNLP\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForSequenceClassification\", \"AutoTokenizer\": \"from_pretrained\"}, \"example_code\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer\\nmodel = AutoModelForSequenceClassification.from_pretrained(madhurjindal/autonlp-Gibberish-Detector-492513457, use_auth_token=True)\\ntokenizer = AutoTokenizer.from_pretrained(madhurjindal/autonlp-Gibberish-Detector-492513457, use_auth_token=True)\\ninputs = tokenizer(I love AutoNLP, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"madhurjindal/autonlp-data-Gibberish-Detector\", \"accuracy\": 0.9735624586913417}, \"description\": \"A multi-class text classification model for detecting gibberish text. Trained using AutoNLP and DistilBERT.\"}}", "category": "generic"}
{"question_id": 293, "text": " As a restaurant owner, I want to know if the total revenue for last week met our target revenue.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-small-finetuned-wtq\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-small-finetuned-wtq'), TapasTokenizer.from_pretrained('google/tapas-small-finetuned-wtq')\", \"api_arguments\": \"model_name_or_path, table, query\", \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import TapasForQuestionAnswering, TapasTokenizer\\nmodel = TapasForQuestionAnswering.from_pretrained('google/tapas-small-finetuned-wtq')\\ntokenizer = TapasTokenizer.from_pretrained('google/tapas-small-finetuned-wtq')\\ninputs = tokenizer(table=table, queries=query, return_tensors='pt')\\noutputs = model(**inputs)\\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": 0.3762}, \"description\": \"TAPAS small model fine-tuned on WikiTable Questions (WTQ). This model was pre-trained on MLM and an additional step which the authors call intermediate pre-training, and then fine-tuned in a chain on SQA, WikiSQL and finally WTQ. It uses relative position embeddings (i.e. resetting the position index at every cell of the table).\"}}", "category": "generic"}
{"question_id": 294, "text": " We are a sports analysis company that processes data from spreadsheets with game statistics. We need to identify the player who has scored the maximum goals in a given match.\\n###Input: \\\"What player scored the most goals?\\\", \\\"Player,Goals\\\\nA,2\\\\nB,3\\\\nC,1\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-large-finetuned-sqa\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-large-finetuned-sqa')\", \"api_arguments\": [\"question\", \"table\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"https://huggingface.co/google/tapas-large-finetuned-sqa\", \"performance\": {\"dataset\": \"msr_sqa\", \"accuracy\": 0.7289}, \"description\": \"TAPAS large model fine-tuned on Sequential Question Answering (SQA). This model was pre-trained on MLM and an additional step which the authors call intermediate pre-training, and then fine-tuned on SQA. It uses relative position embeddings (i.e. resetting the position index at every cell of the table).\"}}", "category": "generic"}
{"question_id": 295, "text": " A manager in our company requires an aggregated answer of the highest and lowest sales numbers for a given period to evaluate the perfomance.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"lysandre/tapas-temporary-repo\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\", \"api_arguments\": [\"model_name\", \"question\", \"table\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"tokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\\ninputs = tokenizer(table=table, queries=question, return_tensors='pt')\\noutputs = model(**inputs)\\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())\", \"performance\": {\"dataset\": \"SQA\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS base model fine-tuned on Sequential Question Answering (SQA). This model is pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion and can be used for answering questions related to a table in a conversational set-up.\"}}", "category": "generic"}
{"question_id": 296, "text": " A doctor needs to find medical information in a large document. We are building an AI model to help them extract answers to their questions. \\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bigwiz83/sapbert-from-pubmedbert-squad2\", \"api_call\": \"pipeline('question-answering', model='bigwiz83/sapbert-from-pubmedbert-squad2')\", \"api_arguments\": [\"context\", \"question\"], \"python_environment_requirements\": [\"transformers==4.7.0\", \"torch==1.8.0\", \"datasets==1.4.1\", \"tokenizers==0.10.2\"], \"example_code\": \"qa_pipeline({'context': 'This model can be loaded on the Inference API on-demand.', 'question': 'Where can the model be loaded?'})\", \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": \"1.2582\"}, \"description\": \"This model is a fine-tuned version of cambridgeltl/SapBERT-from-PubMedBERT-fulltext on the squad_v2 dataset.\"}}", "category": "generic"}
{"question_id": 297, "text": " We are building a news classification system, and for Spanish articles, we have to categorize them into different sections.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"Recognai/bert-base-spanish-wwm-cased-xnli\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('Recognai/bert-base-spanish-wwm-cased-xnli')\", \"api_arguments\": [\"sequence\", \"candidate_labels\", \"hypothesis_template\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model=Recognai/bert-base-spanish-wwm-cased-xnli)\\nclassifier(\\nEl autor se perfila, a los 50 a\\u00f1os de su muerte, como uno de los grandes de su siglo,\\ncandidate_labels=[cultura, sociedad, economia, salud, deportes],\\nhypothesis_template=Este ejemplo es {}. \\n)\", \"performance\": {\"dataset\": \"XNLI-es\", \"accuracy\": \"79.9%\"}, \"description\": \"This model is a fine-tuned version of the spanish BERT model with the Spanish portion of the XNLI dataset. You can have a look at the training script for details of the training.\"}}", "category": "generic"}
{"question_id": 298, "text": " In my project, I need to classify news articles into their respective categories, such as technology, sports, and politics, without providing any labeled training data.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"cross-encoder/nli-roberta-base\", \"api_call\": \"CrossEncoder('cross-encoder/nli-roberta-base')\", \"api_arguments\": [\"sentence1\", \"sentence2\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model='cross-encoder/nli-roberta-base')\\nsent = Apple just announced the newest iPhone X\\ncandidate_labels = [technology, sports, politics]\\nres = classifier(sent, candidate_labels)\\nprint(res)\", \"performance\": {\"dataset\": [\"SNLI\", \"MultiNLI\"], \"accuracy\": \"See SBERT.net - Pretrained Cross-Encoder\"}, \"description\": \"Cross-Encoder for Natural Language Inference trained on the SNLI and MultiNLI datasets. Outputs three scores corresponding to the labels: contradiction, entailment, neutral.\"}}", "category": "generic"}
{"question_id": 299, "text": " I have a Catalan language text and I need to publish it as a blog article in Spanish, so I want to translate my Catalan text into Spanish.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-ca-es\", \"api_call\": \"MarianMTModel.from_pretrained('Helsinki-NLP/opus-mt-ca-es') , MarianTokenizer.from_pretrained('Helsinki-NLP/opus-mt-ca-es')\", \"api_arguments\": [\"source_languages\", \"target_languages\", \"dataset\", \"model\", \"pre-processing\", \"download_original_weights\", \"test_set_translations\", \"test_set_scores\"], \"python_environment_requirements\": [\"PyTorch\", \"TensorFlow\", \"Transformers\"], \"example_code\": \"from transformers import MarianMTModel, MarianTokenizer\", \"performance\": {\"dataset\": \"Tatoeba.ca.es\", \"accuracy\": {\"BLEU\": 74.9, \"chr-F\": 0.863}}, \"description\": \"A Hugging Face model for translation between Catalan (ca) and Spanish (es) languages, based on the OPUS dataset and using the transformer-align architecture. The model has been pre-processed with normalization and SentencePiece.\"}}", "category": "generic"}
{"question_id": 300, "text": " Generate an automatic summarization of an executive's meeting notes without sharing too much details.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"google/pegasus-cnn_dailymail\", \"api_call\": \"PegasusForConditionalGeneration.from_pretrained('google/pegasus-cnn_dailymail')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import PegasusForConditionalGeneration, PegasusTokenizer\\nmodel_name = 'google/pegasus-cnn_dailymail'\\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name)\\ninputs = tokenizer.encode('input_text', return_tensors='pt')\\nsummary_ids = model.generate(inputs)\\nsummary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": \"44.16/21.56/41.30\"}, \"description\": \"PEGASUS model for abstractive summarization, pretrained on the CNN/DailyMail dataset.\"}}", "category": "generic"}
{"question_id": 301, "text": " A customer needs to translate a French email they received into Spanish.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-fr-es\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('Helsinki-NLP/opus-mt-fr-es')\", \"api_arguments\": {\"source_languages\": \"fr\", \"target_languages\": \"es\"}, \"python_environment_requirements\": {\"PyTorch\": \"1.0.0\", \"TensorFlow\": \"2.0\", \"Transformers\": \"4.0.0\"}, \"example_code\": \"translation('Bonjour, comment \\u00e7a va?')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newssyscomb2009.fr.es\": 34.3, \"news-test2008.fr.es\": 32.5, \"newstest2009.fr.es\": 31.6, \"newstest2010.fr.es\": 36.5, \"newstest2011.fr.es\": 38.3, \"newstest2012.fr.es\": 38.1, \"newstest2013.fr.es\": 34.0, \"Tatoeba.fr.es\": 53.2}, \"chr-F\": {\"newssyscomb2009.fr.es\": 0.601, \"news-test2008.fr.es\": 0.583, \"newstest2009.fr.es\": 0.586, \"newstest2010.fr.es\": 0.616, \"newstest2011.fr.es\": 0.622, \"newstest2012.fr.es\": 0.619, \"newstest2013.fr.es\": 0.587, \"Tatoeba.fr.es\": 0.709}}}, \"description\": \"A French to Spanish translation model trained on the OPUS dataset using the Hugging Face Transformers library. The model is based on the transformer-align architecture and uses normalization and SentencePiece for pre-processing.\"}}", "category": "generic"}
{"question_id": 302, "text": " I am a writer, and I have written a long article, but I need to come up with a summary for my article to publish.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"google/pegasus-xsum\", \"api_call\": \"pipeline('summarization', model='google/pegasus-xsum')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": [{\"name\": \"xsum\", \"accuracy\": {\"ROUGE-1\": 46.862, \"ROUGE-2\": 24.453, \"ROUGE-L\": 39.055, \"ROUGE-LSUM\": 39.099}}, {\"name\": \"cnn_dailymail\", \"accuracy\": {\"ROUGE-1\": 22.206, \"ROUGE-2\": 7.67, \"ROUGE-L\": 15.405, \"ROUGE-LSUM\": 19.218}}, {\"name\": \"samsum\", \"accuracy\": {\"ROUGE-1\": 21.81, \"ROUGE-2\": 4.253, \"ROUGE-L\": 17.447, \"ROUGE-LSUM\": 18.891}}]}, \"description\": \"PEGASUS is a pre-trained model for abstractive summarization, developed by Google. It is based on the Transformer architecture and trained on both C4 and HugeNews datasets. The model is designed to extract gap sentences and generate summaries by stochastically sampling important sentences.\"}}", "category": "generic"}
{"question_id": 303, "text": " Your company has launched a new chatbot service. We need to create conversations with the customers to provide information about our products and answer their queries.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text-generation\", \"api_name\": \"pygmalion-1.3b\", \"api_call\": \"pipeline('text-generation', 'PygmalionAI/pygmalion-1.3b')\", \"api_arguments\": \"input_prompt\", \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"[CHARACTER]'s Persona: [A few sentences about the character you want the model to play]\\n[DIALOGUE HISTORY]\\nYou: [Your input message here]\\n[CHARACTER]:\", \"performance\": {\"dataset\": \"56MB of dialogue data\", \"accuracy\": \"Not provided\"}, \"description\": \"Pygmalion 1.3B is a proof-of-concept dialogue model based on EleutherAI's pythia-1.3b-deduped. It is designed for generating conversational responses and can be used with a specific input format that includes character persona, dialogue history, and user input message.\"}}", "category": "generic"}
{"question_id": 304, "text": " We are a travel company trying to offer personalized experiences to our customers. We want to implement a conversational AI to help users get information about travel destinations.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"hyunwoongko/blenderbot-9B\", \"api_call\": \"pipeline('conversational', model='hyunwoongko/blenderbot-9B')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"Input a message to start chatting with hyunwoongko/blenderbot-9B.\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not provided\"}, \"description\": \"Building open-domain chatbots is a challenging area for machine learning research. While prior work has shown that scaling neural models in the number of parameters and the size of the data they are trained on gives improved results, we show that other ingredients are important for a high-performing chatbot. Good conversation requires a number of skills that an expert conversationalist blends in a seamless way: providing engaging talking points and listening to their partners, both asking and answering questions, and displaying knowledge, empathy and personality appropriately, depending on the situation. We show that large scale models can learn these skills when given appropriate training data and choice of generation strategy. We build variants of these recipes with 90M, 2.7B and 9.4B parameter neural models, and make our models and code publicly available. Human evaluations show our best models are superior to existing approaches in multi-turn dialogue in terms of engagingness and humanness measurements. We then discuss the limitations of this work by analyzing failure cases of our models.\"}}", "category": "generic"}
{"question_id": 305, "text": " Write a tweet on the topic of \\\"The Future of AI in Education\\\".\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"bigscience/bloom-560m\", \"api_call\": \"pipeline('text-generation', model='bigscience/bloom-560m')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline\\nmodel_name = 'bigscience/bloom-560m'\\napi = pipeline('text-generation', model=model_name)\\ntext = 'The history of artificial intelligence began in the '\\noutput = api(text)\\nprint(output[0]['generated_text'])\", \"performance\": {\"dataset\": \"Validation\", \"accuracy\": {\"Training Loss\": 2.0, \"Validation Loss\": 2.2, \"Perplexity\": 8.9}}, \"description\": \"BLOOM LM is a large open-science, open-access multilingual language model developed by BigScience. It is a transformer-based language model trained on 45 natural languages and 12 programming languages. The model has 559,214,592 parameters, 24 layers, and 16 attention heads.\"}}", "category": "generic"}
{"question_id": 306, "text": " Create a poem about nature for a school assignment.\\n###Input: Once upon a time, in a land of greenery and beauty,\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"sshleifer/tiny-gpt2\", \"api_call\": \"TinyGPT2LMHeadModel.from_pretrained('sshleifer/tiny-gpt2')\", \"api_arguments\": {\"model\": \"sshleifer/tiny-gpt2\"}, \"python_environment_requirements\": {\"huggingface_transformers\": \">=4.0.0\"}, \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('text-generation', model='sshleifer/tiny-gpt2')\\nresult = nlp('Once upon a time')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"A tiny GPT-2 model for text generation, suitable for low-resource environments and faster inference. This model is part of the Hugging Face Transformers library and can be used for generating text given a prompt.\"}}", "category": "generic"}
{"question_id": 307, "text": " We want to code a loading spinner to display when our system is undergoing maintenance. Can you generate the code for us?\\n###Input: <noinput>\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Program Synthesis\", \"api_name\": \"Salesforce/codegen-350M-multi\", \"api_call\": \"AutoTokenizer.from_pretrained('Salesforce/codegen-350M-multi')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForCausalLM\\ntokenizer = AutoTokenizer.from_pretrained(Salesforce/codegen-350M-multi)\\nmodel = AutoModelForCausalLM.from_pretrained(Salesforce/codegen-350M-multi)\\ntext = def hello_world():\\ninput_ids = tokenizer(text, return_tensors=pt).input_ids\\ngenerated_ids = model.generate(input_ids, max_length=128)\\nprint(tokenizer.decode(generated_ids[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"HumanEval and MTPB\", \"accuracy\": \"Refer to the paper for accuracy details\"}, \"description\": \"CodeGen is a family of autoregressive language models for program synthesis. The checkpoint included in this repository is denoted as CodeGen-Multi 350M, where Multi means the model is initialized with CodeGen-NL 350M and further pre-trained on a dataset of multiple programming languages, and 350M refers to the number of trainable parameters. The model is capable of extracting features from given natural language and programming language texts, and calculating the likelihood of them. It is best at program synthesis, generating executable code given English prompts, and can complete partially-generated code as well.\"}}", "category": "generic"}
{"question_id": 308, "text": " I am an English teacher. What kind of creative writing exercise could I give to my students that they could write a story using the words \\\"moon\\\", \\\"rabbit\\\", \\\"forest\\\", and \\\"magic\\\"?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Generative Commonsense Reasoning\", \"api_name\": \"mrm8488/t5-base-finetuned-common_gen\", \"api_call\": \"AutoModelWithLMHead.from_pretrained('mrm8488/t5-base-finetuned-common_gen')\", \"api_arguments\": [\"words\", \"max_length\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelWithLMHead, AutoTokenizer\\ntokenizer = AutoTokenizer.from_pretrained(mrm8488/t5-base-finetuned-common_gen)\\nmodel = AutoModelWithLMHead.from_pretrained(mrm8488/t5-base-finetuned-common_gen)\\ndef gen_sentence(words, max_length=32):\\n input_text = words\\n features = tokenizer([input_text], return_tensors='pt')\\noutput = model.generate(input_ids=features['input_ids'], attention_mask=features['attention_mask'], max_length=max_length)\\nreturn tokenizer.decode(output[0], skip_special_tokens=True)\\nwords = tree plant ground hole dig\\ngen_sentence(words)\", \"performance\": {\"dataset\": \"common_gen\", \"accuracy\": {\"ROUGE-2\": 17.1, \"ROUGE-L\": 39.47}}, \"description\": \"Google's T5 fine-tuned on CommonGen for Generative Commonsense Reasoning. CommonGen is a constrained text generation task, associated with a benchmark dataset, to explicitly test machines for the ability of generative commonsense reasoning. Given a set of common concepts; the task is to generate a coherent sentence describing an everyday scenario using these concepts.\"}}", "category": "generic"}
{"question_id": 309, "text": " Our team needs to develop a tool that can translate articles from English to German in real-time.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"sshleifer/tiny-marian-en-de\", \"api_call\": \"pipeline('translation_en_to_de', model='sshleifer/tiny-marian-en-de')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny English to German translation model using the Marian framework in Hugging Face Transformers.\"}}", "category": "generic"}
{"question_id": 310, "text": " Design an efficient search engine that retrieves most relevant articles based on a pool of long text documents.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"castorini/doc2query-t5-base-msmarco\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('castorini/doc2query-t5-base-msmarco')\", \"api_arguments\": \"text, max_length\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"MS MARCO\", \"accuracy\": \"Not specified\"}, \"description\": \"A T5 model trained on the MS MARCO dataset for generating queries from documents.\"}}", "category": "generic"}
{"question_id": 311, "text": " Our designer hired me to create an application to automatically translate colors from a design. Usually, our designer likes to work with English, to get the color in Italian.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text-to-Text Transfer Transformer\", \"api_name\": \"google/mt5-base\", \"api_call\": \"MT5ForConditionalGeneration.from_pretrained('google/mt5-base')\", \"api_arguments\": [\"model_name\", \"input_text\", \"generated_text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"model = MT5ForConditionalGeneration.from_pretrained('google/mt5-base')\\ntokenizer = MT5Tokenizer.from_pretrained('google/mt5-base')\\ninputs = tokenizer.encode('translate English to German: The house is wonderful.', return_tensors='pt')\\noutputs = model.generate(inputs, max_length=40, num_return_sequences=1)\\ndecoded_output = tokenizer.decode(outputs[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"mc4\", \"accuracy\": \"Not provided\"}, \"description\": \"mT5 is a multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. It leverages a unified text-to-text format and scale to attain state-of-the-art results on a wide variety of multilingual NLP tasks.\"}}", "category": "generic"}
{"question_id": 312, "text": " I am building an AI to create in work report, this model should be able to complete the sentence for the report.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"xlm-roberta-base\", \"api_call\": \"pipeline('fill-mask', model='xlm-roberta-base')\", \"api_arguments\": {\"model\": \"xlm-roberta-base\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='xlm-roberta-base')\\nunmasker(Hello I'm a <mask> model.)\", \"performance\": {\"dataset\": \"CommonCrawl\", \"accuracy\": \"N/A\"}, \"description\": \"XLM-RoBERTa is a multilingual version of RoBERTa pre-trained on 2.5TB of filtered CommonCrawl data containing 100 languages. It can be used for masked language modeling and is intended to be fine-tuned on a downstream task.\"}}", "category": "generic"}
{"question_id": 313, "text": " A language learning application wants to generate fill-in-the-blank questions for learners. We need to mask sentences with a keyword to create these questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"distilbert-base-multilingual-cased\", \"api_call\": \"pipeline('fill-mask', model='distilbert-base-multilingual-cased')\", \"api_arguments\": [\"pipeline\", \"fill-mask\", \"model\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='distilbert-base-multilingual-cased')\\nunmasker(Hello I'm a [MASK] model.)\", \"performance\": {\"dataset\": [{\"name\": \"XNLI\", \"accuracy\": {\"English\": 78.2, \"Spanish\": 69.1, \"Chinese\": 64.0, \"German\": 66.3, \"Arabic\": 59.1, \"Urdu\": 54.7}}]}, \"description\": \"This model is a distilled version of the BERT base multilingual model. It is trained on the concatenation of Wikipedia in 104 different languages. The model has 6 layers, 768 dimension and 12 heads, totalizing 134M parameters. On average, this model, referred to as DistilmBERT, is twice as fast as mBERT-base.\"}}", "category": "generic"}
{"question_id": 314, "text": " Our client has a medical report and we are trying to assist him in finding relevant information.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"emilyalsentzer/Bio_ClinicalBERT\", \"api_call\": \"AutoModel.from_pretrained('emilyalsentzer/Bio_ClinicalBERT')\", \"api_arguments\": [\"AutoTokenizer\", \"AutoModel\", \"from_pretrained\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModel\\ntokenizer = AutoTokenizer.from_pretrained('emilyalsentzer/Bio_ClinicalBERT')\\nmodel = AutoModel.from_pretrained('emilyalsentzer/Bio_ClinicalBERT')\", \"performance\": {\"dataset\": \"MIMIC III\", \"accuracy\": \"Not provided\"}, \"description\": \"Bio_ClinicalBERT is a model initialized with BioBERT and trained on all MIMIC notes. It can be used for various NLP tasks in the clinical domain, such as Named Entity Recognition (NER) and Natural Language Inference (NLI).\"}}", "category": "generic"}
{"question_id": 315, "text": " I am a data scientist and need to find which among given documents is similar, provide me the example code.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Automated evaluation\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 316, "text": " My company wants to analyze and cluster different movie scripts. I need a suggestion to embed the movie dialogue text into dense vector representations.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/distilbert-base-nli-stsb-mean-tokens\", \"api_call\": \"SentenceTransformer('sentence-transformers/distilbert-base-nli-stsb-mean-tokens')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/distilbert-base-nli-stsb-mean-tokens')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 317, "text": " Analyze how characters in a book are connected and if they share any similarity based on their conversation.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/all-roberta-large-v1\", \"api_call\": \"SentenceTransformer('sentence-transformers/all-roberta-large-v1')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/all-roberta-large-v1')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Automated evaluation\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 1024 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 318, "text": " We are a company specializing in building automation systems for homes. We'd like to convert our written rules into an audio format for user interaction purposes.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"SpeechBrain\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"speechbrain/tts-tacotron2-ljspeech\", \"api_call\": \"Tacotron2.from_hparams(source='speechbrain/tts-tacotron2-ljspeech')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"speechbrain\"], \"example_code\": [\"import torchaudio\", \"from speechbrain.pretrained import Tacotron2\", \"from speechbrain.pretrained import HIFIGAN\", \"tacotron2 = Tacotron2.from_hparams(source=speechbrain/tts-tacotron2-ljspeech, savedir=tmpdir_tts)\", \"hifi_gan = HIFIGAN.from_hparams(source=speechbrain/tts-hifigan-ljspeech, savedir=tmpdir_vocoder)\", \"mel_output, mel_length, alignment = tacotron2.encode_text(Mary had a little lamb)\", \"waveforms = hifi_gan.decode_batch(mel_output)\", \"torchaudio.save('example_TTS.wav',waveforms.squeeze(1), 22050)\"], \"performance\": {\"dataset\": \"LJSpeech\", \"accuracy\": \"Not specified\"}, \"description\": \"This repository provides all the necessary tools for Text-to-Speech (TTS) with SpeechBrain using a Tacotron2 pretrained on LJSpeech. The pre-trained model takes in input a short text and produces a spectrogram in output. One can get the final waveform by applying a vocoder (e.g., HiFIGAN) on top of the generated spectrogram.\"}}", "category": "generic"}
{"question_id": 319, "text": " We are developing a virtual assistant. One of its major functionalities is to convert written text to speech.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"fastspeech2-en-male1\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/fastspeech2-en-200_speaker-cv4',arg_overrides={'vocoder': 'hifigan', 'fp16': False})\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"fairseq\", \"IPython\"], \"example_code\": \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.text_to_speech.hub_interface import TTSHubInterface\\nimport IPython.display as ipd\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/fastspeech2-en-200_speaker-cv4,\\n arg_overrides={vocoder: hifigan, fp16: False}\\n)\\nmodel = models[0]\\nTTSHubInterface.update_cfg_with_data_cfg(cfg, task.data_cfg)\\ngenerator = task.build_generator(model, cfg)\\ntext = Hello, this is a test run.\\nsample = TTSHubInterface.get_model_input(task, text)\\nwav, rate = TTSHubInterface.get_prediction(task, model, generator, sample)\\nipd.Audio(wav, rate=rate)\", \"performance\": {\"dataset\": \"common_voice\", \"accuracy\": null}, \"description\": \"FastSpeech 2 text-to-speech model from fairseq S^2. English, 200 male/female voices, trained on Common Voice v4.\"}}", "category": "generic"}
{"question_id": 320, "text": " I have a recorded meeting between multiple participants. Identify when two or more people are speaking simultaneously.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"pyannote.audio\", \"functionality\": \"overlapped-speech-detection\", \"api_name\": \"pyannote/overlapped-speech-detection\", \"api_call\": \"pipeline.from_pretrained('pyannote/overlapped-speech-detection', use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": [\"audio.wav\"], \"python_environment_requirements\": [\"pyannote.audio 2.1\"], \"example_code\": \"from pyannote.audio import Pipeline\\npipeline = Pipeline.from_pretrained(pyannote/overlapped-speech-detection, use_auth_token=ACCESS_TOKEN_GOES_HERE)\\noutput = pipeline(audio.wav)\\nfor speech in output.get_timeline().support():\\n  # two or more speakers are active between speech.start and speech.end\\n  ...\", \"performance\": {\"dataset\": \"ami\", \"accuracy\": null}, \"description\": \"Automatic overlapped speech detection using pyannote.audio framework. The model detects when two or more speakers are active in an audio file.\"}}", "category": "generic"}
{"question_id": 321, "text": " I have a collection of audio recordings from interviews that I need transcribed into text. How can I achieve this using automatic speech recognition?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription\", \"api_name\": \"openai/whisper-tiny.en\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-tiny.en')\", \"api_arguments\": {\"model_name\": \"openai/whisper-tiny.en\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\", \"torch\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained(openai/whisper-tiny.en)\", \"model = WhisperForConditionalGeneration.from_pretrained(openai/whisper-tiny.en)\", \"ds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\", \"sample = ds[0][audio]\", \"input_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean)\", \"accuracy\": 8.437}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 322, "text": " A Russia-based online lesson website needs an English subtitle for the recorded lessons of the students.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Recognition\", \"api_name\": \"jonatasgrosman/wav2vec2-large-xlsr-53-russian\", \"api_call\": \"SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-russian')\", \"api_arguments\": [\"audio_paths\"], \"python_environment_requirements\": [\"huggingsound\", \"torch\", \"librosa\", \"datasets\", \"transformers\"], \"example_code\": \"from huggingsound import SpeechRecognitionModel\\nmodel = SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-russian')\\naudio_paths = ['/path/to/file.mp3', '/path/to/another_file.wav']\\ntranscriptions = model.transcribe(audio_paths)\", \"performance\": {\"dataset\": \"mozilla-foundation/common_voice_6_0\", \"accuracy\": {\"Test WER\": 13.3, \"Test CER\": 2.88, \"Test WER (+LM)\": 9.57, \"Test CER (+LM)\": 2.24}}, \"description\": \"Fine-tuned XLSR-53 large model for speech recognition in Russian. Fine-tuned facebook/wav2vec2-large-xlsr-53 on Russian using the train and validation splits of Common Voice 6.1 and CSS10.\"}}", "category": "generic"}
{"question_id": 323, "text": " My lecture has been recorded, and I would like to transcribe the audio to create a transcript of my presentation.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Automatic Speech Recognition and Speech Translation\", \"api_name\": \"openai/whisper-large-v2\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')\", \"api_arguments\": {\"forced_decoder_ids\": \"WhisperProcessor.get_decoder_prompt_ids(language='english', task='transcribe')\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained('openai/whisper-large-v2')\", \"model = WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')\", \"model.config.forced_decoder_ids = None\", \"ds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')\", \"sample = ds[0]['audio']\", \"input_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech test-clean\", \"accuracy\": 3.0003583080317573}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 324, "text": " Provide the code to enhance a single audio track, possibly containing dialogue, music and background noise, extracted from a video game.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"DCCRNet_Libri1Mix_enhsingle_16k\", \"api_call\": \"AutoModelForAudioToAudio.from_pretrained('JorisCos/DCCRNet_Libri1Mix_enhsingle_16k')\", \"api_arguments\": \"pretrained_model_name_or_path\", \"python_environment_requirements\": [\"transformers\", \"asteroid\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri1Mix\", \"accuracy\": {\"si_sdr\": 13.329767398333798, \"si_sdr_imp\": 9.879986092474098, \"sdr\": 13.87279932997016, \"sdr_imp\": 10.370136530757103, \"sir\": \"Infinity\", \"sir_imp\": \"NaN\", \"sar\": 13.87279932997016, \"sar_imp\": 10.370136530757103, \"stoi\": 0.9140907015623948, \"stoi_imp\": 0.11817087802185405}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the enh_single task of the Libri1Mix dataset.\"}}", "category": "generic"}
{"question_id": 325, "text": " We're working with a voiceover company, and they're looking for a tool to help them change the voice style of voiceovers while keeping the same content.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/speecht5_vc\", \"api_call\": \"SpeechT5ForSpeechToSpeech.from_pretrained('microsoft/speecht5_vc')\", \"api_arguments\": {\"audio\": \"example_speech\", \"sampling_rate\": \"sampling_rate\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\", \"numpy\", \"torch\", \"soundfile\"], \"example_code\": \"from transformers import SpeechT5Processor, SpeechT5ForSpeechToSpeech, SpeechT5HifiGan\\nfrom datasets import load_dataset\\ndataset = load_dataset('hf-internal-testing/librispeech_asr_demo', 'clean', split='validation')\\ndataset = dataset.sort('id')\\nsampling_rate = dataset.features['audio'].sampling_rate\\nexample_speech = dataset[0]['audio']['array']\\nprocessor = SpeechT5Processor.from_pretrained('microsoft/speecht5_vc')\\nmodel = SpeechT5ForSpeechToSpeech.from_pretrained('microsoft/speecht5_vc')\\nvocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\\ninputs = processor(audio=example_speech, sampling_rate=sampling_rate, return_tensors='pt')\\nimport numpy as np\\nimport torch\\nspeaker_embeddings = np.load('xvector_speaker_embedding.npy')\\nspeaker_embeddings = torch.tensor(speaker_embeddings).unsqueeze(0)\\nspeech = model.generate_speech(inputs['input_values'], speaker_embeddings, vocoder=vocoder)\\nimport soundfile as sf\\nsf.write('speech.wav', speech.numpy(), samplerate=16000)\", \"performance\": {\"dataset\": \"CMU ARCTIC\", \"accuracy\": \"Not specified\"}, \"description\": \"SpeechT5 model fine-tuned for voice conversion (speech-to-speech) on CMU ARCTIC. The SpeechT5 framework consists of a shared encoder-decoder network and six modal-specific (speech/text) pre/post-nets. It is designed to improve the modeling capability for both speech and text. This model can be used for speech conversion tasks.\"}}", "category": "generic"}
{"question_id": 326, "text": " Develop a listening assistant device for audiobooks that is capable of detecting and reducing noise.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"speechbrain/sepformer-wham16k-enhancement\", \"api_call\": \"separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\", \"api_arguments\": {\"path\": \"path to the input audio file\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"from speechbrain.pretrained import SepformerSeparation as separator\\nimport torchaudio\\nmodel = separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\\nest_sources = model.separate_file(path='speechbrain/sepformer-wham16k-enhancement/example_wham16k.wav')\\ntorchaudio.save(enhanced_wham16k.wav, est_sources[:, :, 0].detach().cpu(), 16000)\", \"performance\": {\"dataset\": \"WHAM!\", \"accuracy\": {\"Test-Set SI-SNR\": \"14.3 dB\", \"Test-Set PESQ\": \"2.20\"}}, \"description\": \"This repository provides all the necessary tools to perform speech enhancement (denoising) with a SepFormer model, implemented with SpeechBrain, and pretrained on WHAM! dataset with 16k sampling frequency, which is basically a version of WSJ0-Mix dataset with environmental noise and reverberation in 8k.\"}}", "category": "generic"}
{"question_id": 327, "text": " The company needs to separate voice from background noise in a recorded podcast episode.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri2Mix_sepclean_8k\", \"api_call\": \"hf_hub_download(repo_id='JorisCos/ConvTasNet_Libri2Mix_sepclean_8k')\", \"api_arguments\": [\"repo_id\", \"filename\"], \"python_environment_requirements\": [\"huggingface_hub\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 14.764543634468069, \"si_sdr_imp\": 14.764029375607246, \"sdr\": 15.29337970745095, \"sdr_imp\": 15.114146605113111, \"sir\": 24.092904661115366, \"sir_imp\": 23.913669683141528, \"sar\": 16.06055906916849, \"sar_imp\": -51.980784441287454, \"stoi\": 0.9311142440593033, \"stoi_imp\": 0.21817376142710482}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 328, "text": " Develop a method to detect which languages are being spoken in international conference calls.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Language Identification\", \"api_name\": \"lang-id-voxlingua107-ecapa\", \"api_call\": \"EncoderClassifier.from_hparams(source='speechbrain/lang-id-voxlingua107-ecapa', savedir='/tmp')\", \"api_arguments\": [\"source\", \"savedir\"], \"python_environment_requirements\": [\"speechbrain\", \"torchaudio\"], \"example_code\": \"signal = language_id.load_audio(https://omniglot.com/soundfiles/udhr/udhr_th.mp3)\\nprediction = language_id.classify_batch(signal)\\nprint(prediction)\", \"performance\": {\"dataset\": \"VoxLingua107 development dataset\", \"accuracy\": \"93.3%\"}, \"description\": \"This is a spoken language recognition model trained on the VoxLingua107 dataset using SpeechBrain. The model uses the ECAPA-TDNN architecture that has previously been used for speaker recognition. It covers 107 different languages.\"}}", "category": "generic"}
{"question_id": 329, "text": " Develop a system that can detect a keyword in a short audio clip. Make sure it recognizes a variety of keywords.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/wav2vec2-base-superb-ks\", \"api_call\": \"pipeline('audio-classification', model='superb/wav2vec2-base-superb-ks')\", \"api_arguments\": {\"model\": \"superb/wav2vec2-base-superb-ks\"}, \"python_environment_requirements\": [\"torch\", \"transformers\", \"torchaudio\", \"datasets\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, ks, split=test)\\nclassifier = pipeline(audio-classification, model=superb/wav2vec2-base-superb-ks)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"Speech Commands dataset v1.0\", \"accuracy\": {\"s3prl\": 0.9623, \"transformers\": 0.9643}}, \"description\": \"Wav2Vec2-Base for Keyword Spotting (KS) task in the SUPERB benchmark. The base model is pretrained on 16kHz sampled speech audio. The KS task detects preregistered keywords by classifying utterances into a predefined set of words. The model is trained on the Speech Commands dataset v1.0.\"}}", "category": "generic"}
{"question_id": 330, "text": " I am the director of a movie theater chain, and we are thinking of implementing a chat product to get movie goers to classify movie reviews as positive or negative through AI.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Binary Classification\", \"api_name\": \"desertdev/autotrain-imdb-sentiment-analysis-44994113085\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"desertdev/autotrain-data-imdb-sentiment-analysis\", \"accuracy\": 0.565}, \"description\": \"A binary classification model trained on the IMDb sentiment analysis dataset using AutoTrain. The model is capable of predicting sentiment (positive or negative) for movie reviews.\"}}", "category": "generic"}
{"question_id": 331, "text": " You have been provided with the dataset of plants, and your task is to identify the species of plants among Iris Setosa, Iris Versicolor, and Iris Virginica.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Transformers\", \"api_name\": \"abhishek/autotrain-iris-knn\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"scikit-learn/iris\", \"accuracy\": 0.9}, \"description\": \"A K-Nearest Neighbors (KNN) model trained on the Iris dataset for multi-class classification. The model is trained using AutoTrain and has an accuracy of 0.9.\"}}", "category": "generic"}
{"question_id": 332, "text": " Our energy company is trying to identify anomalies in the energy consumption data. Could you perform anomaly detection on the time series data?\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Keras\", \"functionality\": \"anomaly-detection\", \"api_name\": \"keras-io/timeseries-anomaly-detection\", \"api_call\": \"TFAutoModelForSequenceClassification.from_pretrained('keras-io/timeseries-anomaly-detection')\", \"api_arguments\": {\"optimizer\": {\"name\": \"Adam\", \"learning_rate\": 0.001, \"decay\": 0.0, \"beta_1\": 0.9, \"beta_2\": 0.999, \"epsilon\": 1e-07, \"amsgrad\": false}, \"training_precision\": \"float32\"}, \"python_environment_requirements\": [\"tensorflow\", \"keras\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Numenta Anomaly Benchmark(NAB)\", \"accuracy\": {\"Train Loss\": 0.006, \"Validation Loss\": 0.008}}, \"description\": \"This script demonstrates how you can use a reconstruction convolutional autoencoder model to detect anomalies in timeseries data. We will use the Numenta Anomaly Benchmark(NAB) dataset. It provides artifical timeseries data containing labeled anomalous periods of behavior. Data are ordered, timestamped, single-valued metrics.\"}}", "category": "generic"}
{"question_id": 333, "text": " Our company seeks a solution to reduce the carbon emissions due to our operations. We have collected historical data about our emissions. We are looking for a machine learning model to predict the carbon emissions based on this data.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"Robertooo/autotrain-hmaet-2037366891\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"Robertooo/autotrain-data-hmaet\", \"accuracy\": {\"Loss\": 0.067, \"R2\": 0.486, \"MSE\": 0.005, \"MAE\": 0.055, \"RMSLE\": 0.036}}, \"description\": \"A tabular regression model trained with AutoTrain to predict carbon emissions.\"}}", "category": "generic"}
{"question_id": 334, "text": " Create a program that predicts carbon emissions for new data using the given model.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"pcoloc/autotrain-dragino-7-7-max_300m-1861063640\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"model.joblib\", \"config.json\", \"data.csv\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"pcoloc/autotrain-data-dragino-7-7-max_300m\", \"accuracy\": {\"Loss\": 50.918, \"R2\": 0.304, \"MSE\": 2592.667, \"MAE\": 39.693, \"RMSLE\": 0.429}}, \"description\": \"A tabular regression model for predicting carbon emissions using the pcoloc/autotrain-dragino-7-7-max_300m-1861063640 dataset. Trained with AutoTrain.\"}}", "category": "generic"}
{"question_id": 335, "text": " A company has collected data about fish measurements and weights. We need to estimate a fish's weight based on its measurements.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Scikit-learn\", \"functionality\": \"GradientBoostingRegressor\", \"api_name\": \"Fish-Weight\", \"api_call\": \"load('path_to_folder/example.pkl')\", \"api_arguments\": {\"model_path\": \"path_to_folder/example.pkl\"}, \"python_environment_requirements\": {\"skops.hub_utils\": \"download\", \"skops.io\": \"load\"}, \"example_code\": \"from skops.hub_utils import download\\nfrom skops.io import load\\ndownload('brendenc/Fish-Weight', 'path_to_folder')\\nmodel = load('path_to_folder/example.pkl')\", \"performance\": {\"dataset\": \"Fish dataset\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a GradientBoostingRegressor on a fish dataset. This model is intended for educational purposes.\"}}", "category": "generic"}
{"question_id": 336, "text": " Our company manages a restaurant. We need to analyze customers' tips and predict how much tip a new customer would give based on their total bill, sex, smoker, day, time, and party size. We should use a pre-trained model.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Scikit-learn\", \"functionality\": \"baseline-trainer\", \"api_name\": \"merve/tips5wx_sbh5-tip-regression\", \"api_call\": \"joblib.load(hf_hub_download('merve/tips5wx_sbh5-tip-regression', 'sklearn_model.joblib'))\", \"api_arguments\": {\"alpha\": 10}, \"python_environment_requirements\": [\"dabl\"], \"example_code\": \"Pipeline(steps=[('easypreprocessor',EasyPreprocessor(types= continuous dirty_float low_card_int ... date free_string useless\\ntotal_bill True False False ... False False False\\nsex False False False ... False False False\\nsmoker False False False ... False False False\\nday False False False ... False False False\\ntime False False False ... False False False\\nsize False False False ... False False False[6 rows x 7 columns])),('ridge', Ridge(alpha=10))])\", \"performance\": {\"dataset\": \"tips5wx_sbh5\", \"r2\": 0.389363, \"neg_mean_squared_error\": -1.092356}, \"description\": \"Baseline Model trained on tips5wx_sbh5 to apply regression on tip\"}}", "category": "generic"}
{"question_id": 337, "text": " This time, we want to build a player against the user with reinforcement learning. Can you help?\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"LunarLander-v2\", \"api_name\": \"araffin/ppo-LunarLander-v2\", \"api_call\": \"PPO.load_from_hub('araffin/ppo-LunarLander-v2', 'ppo-LunarLander-v2.zip')\", \"api_arguments\": {\"checkpoint\": \"araffin/ppo-LunarLander-v2.zip\"}, \"python_environment_requirements\": [\"huggingface_sb3\", \"stable_baselines3\"], \"example_code\": {\"load_model\": \"from huggingface_sb3 import load_from_hub\\ncheckpoint = load_from_hub(araffin/ppo-LunarLander-v2, ppo-LunarLander-v2.zip)\\nmodel = PPO.load(checkpoint)\", \"evaluate\": \"from stable_baselines3.common.env_util import make_vec_env\\nfrom stable_baselines3.common.evaluation import evaluate_policy\\nenv = make_vec_env(LunarLander-v2, n_envs=1)\\nmean_reward, std_reward = evaluate_policy(model, env, n_eval_episodes=20, deterministic=True)\\nprint(fMean reward = {mean_reward:.2f} +/- {std_reward:.2f})\"}, \"performance\": {\"dataset\": \"LunarLander-v2\", \"accuracy\": \"283.49 +/- 13.74\"}, \"description\": \"This is a trained model of a PPO agent playing LunarLander-v2 using the stable-baselines3 library.\"}}", "category": "generic"}
{"question_id": 338, "text": " We are building a robot for indoor navigation. We need to configure it to recognize its surroundings and interact with objects in the environment.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning Robotics\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"EmbodiedAI tasks, such as object manipulation and indoor navigation\", \"api_name\": \"facebook/vc1-large\", \"api_call\": \"model_utils.load_model('model_utils.VC1_BASE_NAME')\", \"api_arguments\": \"img\", \"python_environment_requirements\": \"from vc_models.models.vit import model_utils\", \"example_code\": \"model,embd_size,model_transforms,model_info = model_utils.load_model(model_utils.VC1_BASE_NAME)\\nimg = your_function_here ...\\ntransformed_img = model_transforms(img)\\nembedding = model(transformed_img)\", \"performance\": {\"dataset\": \"CortexBench\", \"accuracy\": \"68.7 (Mean Success)\"}, \"description\": \"The VC-1 model is a vision transformer (ViT) pre-trained on over 4,000 hours of egocentric videos from 7 different sources, together with ImageNet. The model is trained using Masked Auto-Encoding (MAE) and is available in two sizes: ViT-B and ViT-L. The model is intended for use for EmbodiedAI tasks, such as object manipulation and indoor navigation.\"}}", "category": "generic"}
{"question_id": 340, "text": " We are building a medical knowledge-based management system. We need to process and extract features from biomedical entity names.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"cambridgeltl/SapBERT-from-PubMedBERT-fulltext\", \"api_call\": \"AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\", \"api_arguments\": \"input_ids, attention_mask\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"inputs = tokenizer('covid infection', return_tensors='pt'); outputs = model(**inputs); cls_embedding = outputs.last_hidden_state[:, 0, :]\", \"performance\": {\"dataset\": \"UMLS\", \"accuracy\": \"N/A\"}, \"description\": \"SapBERT is a pretraining scheme that self-aligns the representation space of biomedical entities. It is trained with UMLS 2020AA (English only) and uses microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext as the base model. The input should be a string of biomedical entity names, and the [CLS] embedding of the last layer is regarded as the output.\"}}", "category": "generic"}
{"question_id": 341, "text": " A product is built that analyzes book reviews in order to determine how similar two examples from multiple books are to each other.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"princeton-nlp/unsup-simcse-roberta-base\", \"api_call\": \"AutoModel.from_pretrained('princeton-nlp/unsup-simcse-roberta-base')\", \"api_arguments\": null, \"python_environment_requirements\": [\"transformers\"], \"example_code\": null, \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"An unsupervised sentence embedding model trained using the SimCSE approach with a Roberta base architecture.\"}}", "category": "generic"}
{"question_id": 342, "text": " Write a welcome email to a new employee joining the company.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"lewtun/tiny-random-mt5\", \"api_call\": \"AutoModel.from_pretrained('lewtun/tiny-random-mt5')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"nlp('Once upon a time...')\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random mt5 model for text generation\"}}", "category": "generic"}
{"question_id": 343, "text": " We need to extract useful features from Russian text for downstream tasks.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"DeepPavlov/rubert-base-cased\", \"api_call\": \"AutoModel.from_pretrained('DeepPavlov/rubert-base-cased')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Russian part of Wikipedia and news data\", \"accuracy\": \"\"}, \"description\": \"RuBERT (Russian, cased, 12\\u2011layer, 768\\u2011hidden, 12\\u2011heads, 180M parameters) was trained on the Russian part of Wikipedia and news data. We used this training data to build a vocabulary of Russian subtokens and took a multilingual version of BERT\\u2011base as an initialization for RuBERT[1].\"}}", "category": "generic"}
{"question_id": 344, "text": " We are working on a project to detect patterns and correlations in a dataset that contains a mix of code segments and comments. Find a suitable model to complete this task.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Engineering\", \"api_name\": \"microsoft/unixcoder-base\", \"api_call\": \"AutoModel.from_pretrained('microsoft/unixcoder-base')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained('microsoft/unixcoder-base')\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModel\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained('microsoft/unixcoder-base')\\nmodel = AutoModel.from_pretrained('microsoft/unixcoder-base')\", \"performance\": {\"dataset\": \"Not specified\", \"accuracy\": \"Not specified\"}, \"description\": \"UniXcoder is a unified cross-modal pre-trained model that leverages multimodal data (i.e. code comment and AST) to pretrain code representation. Developed by Microsoft Team and shared by Hugging Face. It is based on the RoBERTa model and trained on English language data. The model can be used for feature engineering tasks.\"}}", "category": "generic"}
{"question_id": 345, "text": " The marketing department wants to use AI-generated images for their next social media campaign. They want a high-resolution image of a vintage sports car racing through a desert landscape during sunset. \\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"prompthero/openjourney\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('prompthero/openjourney', torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"string\"}, \"python_environment_requirements\": [\"diffusers\", \"torch\"], \"example_code\": \"from diffusers import StableDiffusionPipeline\\nimport torch\\nmodel_id = prompthero/openjourney\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe = pipe.to(cuda)\\nprompt = retro serie of different cars with different colors and shapes, mdjrny-v4 style\\nimage = pipe(prompt).images[0]\\nimage.save(./retro_cars.png)\", \"performance\": {\"dataset\": \"Midjourney images\", \"accuracy\": \"Not specified\"}, \"description\": \"Openjourney is an open source Stable Diffusion fine-tuned model on Midjourney images, by PromptHero. It can be used for generating AI art based on text prompts.\"}}", "category": "generic"}
{"question_id": 346, "text": " My company is working on a children's storybook. I need to generate images based on the text descriptions of scenes in the story.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Generation\", \"api_name\": \"stabilityai/stable-diffusion-2-1\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('stabilityai/stable-diffusion-2-1', torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"a photo of an astronaut riding a horse on mars\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"scipy\", \"safetensors\"], \"example_code\": \"from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\\nmodel_id = stabilityai/stable-diffusion-2-1\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe = pipe.to(cuda)\\nprompt = a photo of an astronaut riding a horse on mars\\nimage = pipe(prompt).images[0]\\nimage.save(astronaut_rides_horse.png)\", \"performance\": {\"dataset\": \"COCO2017\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion v2-1 is a diffusion-based text-to-image generation model developed by Robin Rombach and Patrick Esser. It is capable of generating and modifying images based on text prompts in English. The model is trained on a subset of the LAION-5B dataset and is primarily intended for research purposes.\"}}", "category": "generic"}
{"question_id": 347, "text": " Design a text-based interface where you can input text and get an image description from the given text.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"prompthero/openjourney-v4\", \"api_call\": \"pipeline('text-to-image', model='prompthero/openjourney-v4')\", \"api_arguments\": {\"text\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"generate_image('your text here')\", \"performance\": {\"dataset\": \"Midjourney v4 images\", \"accuracy\": \"Not provided\"}, \"description\": \"Openjourney v4 is trained on +124k Midjourney v4 images by PromptHero. It is used for generating images based on text inputs.\"}}", "category": "generic"}
{"question_id": 348, "text": " I am designing an e-commerce website, and I want a program to generate images based on written descriptions to be used as mock product images.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"stabilityai/sd-vae-ft-ema\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('CompVis/stable-diffusion-v1-4', vae=AutoencoderKL.from_pretrained('stabilityai/sd-vae-ft-ema'))\", \"api_arguments\": {\"model\": \"CompVis/stable-diffusion-v1-4\", \"vae\": \"AutoencoderKL.from_pretrained(stabilityai/sd-vae-ft-ema)\"}, \"python_environment_requirements\": {\"diffusers\": \"diffusers library\"}, \"example_code\": \"from diffusers.models import AutoencoderKL\\nfrom diffusers import StableDiffusionPipeline\\nmodel = CompVis/stable-diffusion-v1-4\\nvae = AutoencoderKL.from_pretrained(stabilityai/sd-vae-ft-ema)\\npipe = StableDiffusionPipeline.from_pretrained(model, vae=vae)\", \"performance\": {\"dataset\": {\"COCO 2017 (256x256, val, 5000 images)\": {\"accuracy\": {\"rFID\": 4.42, \"PSNR\": \"23.8 +/- 3.9\", \"SSIM\": \"0.69 +/- 0.13\", \"PSIM\": \"0.96 +/- 0.27\"}}, \"LAION-Aesthetics 5+ (256x256, subset, 10000 images)\": {\"accuracy\": {\"rFID\": 1.77, \"PSNR\": \"26.7 +/- 4.8\", \"SSIM\": \"0.82 +/- 0.12\", \"PSIM\": \"0.67 +/- 0.34\"}}}}, \"description\": \"This is a fine-tuned VAE decoder for the Stable Diffusion Pipeline. It has been fine-tuned on a 1:1 ratio of LAION-Aesthetics and LAION-Humans datasets. The decoder can be used as a drop-in replacement for the existing autoencoder.\"}}", "category": "generic"}
{"question_id": 349, "text": " In our company, we have to generate descriptive captions for photographs related to the products.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Captioning\", \"api_name\": \"blip-image-captioning-base\", \"api_call\": \"BlipForConditionalGeneration.from_pretrained('Salesforce/blip-image-captioning-base')\", \"api_arguments\": [\"raw_image\", \"text\", \"return_tensors\"], \"python_environment_requirements\": [\"requests\", \"PIL\", \"transformers\"], \"example_code\": \"import requests\\nfrom PIL import Image\\nfrom transformers import BlipProcessor, BlipForConditionalGeneration\\nprocessor = BlipProcessor.from_pretrained(Salesforce/blip-image-captioning-base)\\nmodel = BlipForConditionalGeneration.from_pretrained(Salesforce/blip-image-captioning-base)\\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg'\\nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\\ntext = a photography of\\ninputs = processor(raw_image, text, return_tensors=pt)\\nout = model.generate(**inputs)\\nprint(processor.decode(out[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": {\"CIDEr\": \"+2.8%\"}}, \"description\": \"BLIP (Bootstrapping Language-Image Pre-training) is a new vision-language pre-training (VLP) framework that transfers flexibly to both vision-language understanding and generation tasks. It effectively utilizes noisy web data by bootstrapping the captions, where a captioner generates synthetic captions and a filter removes the noisy ones. This model is pre-trained on the COCO dataset with a base architecture (ViT base backbone).\"}}", "category": "generic"}
{"question_id": 350, "text": " We are building a visual tour guide application for smartphones. The app should be able to identify landmarks and provide information about them. I want to use the BLIP-2 model for this task.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"blip2-flan-t5-xl\", \"api_call\": \"Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-flan-t5-xl')\", \"api_arguments\": [\"raw_image\", \"question\"], \"python_environment_requirements\": [\"transformers\", \"requests\", \"PIL\"], \"example_code\": [\"import requests\", \"from PIL import Image\", \"from transformers import BlipProcessor, Blip2ForConditionalGeneration\", \"processor = BlipProcessor.from_pretrained(Salesforce/blip2-flan-t5-xl)\", \"model = Blip2ForConditionalGeneration.from_pretrained(Salesforce/blip2-flan-t5-xl)\", \"img_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg'\", \"raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\", \"question = how many dogs are in the picture?\", \"inputs = processor(raw_image, question, return_tensors=pt)\", \"out = model.generate(**inputs)\", \"print(processor.decode(out[0], skip_special_tokens=True))\"], \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not provided\"}, \"description\": \"BLIP-2 model, leveraging Flan T5-xl (a large language model). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, giving the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 351, "text": " I need a tool to analyze a chart image and generate a summary of the information contained within the chart.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"google/deplot\", \"api_call\": \"Pix2StructForConditionalGeneration.from_pretrained('google/deplot')\", \"api_arguments\": {\"images\": \"image\", \"text\": \"question\", \"return_tensors\": \"pt\", \"max_new_tokens\": 512}, \"python_environment_requirements\": {\"transformers\": \"Pix2StructForConditionalGeneration, Pix2StructProcessor\", \"requests\": \"requests\", \"PIL\": \"Image\"}, \"example_code\": \"from transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\\nimport requests\\nfrom PIL import Image\\nmodel = Pix2StructForConditionalGeneration.from_pretrained('google/deplot')\\nprocessor = Pix2StructProcessor.from_pretrained('google/deplot')\\nurl = https://raw.githubusercontent.com/vis-nlp/ChartQA/main/ChartQA%20Dataset/val/png/5090.png\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(images=image, text=Generate underlying data table of the figure below:, return_tensors=pt)\\npredictions = model.generate(**inputs, max_new_tokens=512)\\nprint(processor.decode(predictions[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"ChartQA\", \"accuracy\": \"24.0% improvement over finetuned SOTA\"}, \"description\": \"DePlot is a model that translates the image of a plot or chart to a linearized table. It decomposes the challenge of visual language reasoning into two steps: (1) plot-to-text translation, and (2) reasoning over the translated text. The output of DePlot can then be directly used to prompt a pretrained large language model (LLM), exploiting the few-shot reasoning capabilities of LLMs.\"}}", "category": "generic"}
{"question_id": 352, "text": " Generate a video for a cooking show intro with the text \\\"Chef John's Culinary Adventures.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-video synthesis\", \"api_name\": \"damo-vilab/text-to-video-ms-1.7b\", \"api_call\": \"DiffusionPipeline.from_pretrained('damo-vilab/text-to-video-ms-1.7b', torch_dtype=torch.float16, variant=fp16)\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\", \"variant\": \"fp16\"}, \"python_environment_requirements\": \"pip install diffusers transformers accelerate\", \"example_code\": \"import torch\\nfrom diffusers import DiffusionPipeline, DPMSolverMultistepScheduler\\nfrom diffusers.utils import export_to_video\\npipe = DiffusionPipeline.from_pretrained(damo-vilab/text-to-video-ms-1.7b, torch_dtype=torch.float16, variant=fp16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\nprompt = Spiderman is surfing\\nvideo_frames = pipe(prompt, num_inference_steps=25).frames\\nvideo_path = export_to_video(video_frames)\", \"performance\": {\"dataset\": \"Webvid, ImageNet, LAION5B\", \"accuracy\": \"N/A\"}, \"description\": \"This model is based on a multi-stage text-to-video generation diffusion model, which inputs a description text and returns a video that matches the text description. The model consists of three sub-networks: text feature extraction model, text feature-to-video latent space diffusion model, and video latent space to video visual space model. The overall model parameters are about 1.7 billion. Currently, it only supports English input.\"}}", "category": "generic"}
{"question_id": 353, "text": " We are doing a creative commercial. We require a video that represents a person walking along a beach.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-video-synthesis\", \"api_name\": \"damo-vilab/text-to-video-ms-1.7b\", \"api_call\": \"DiffusionPipeline.from_pretrained('damo-vilab/text-to-video-ms-1.7b', torch_dtype=torch.float16, variant=fp16)\", \"api_arguments\": [\"prompt\", \"num_inference_steps\", \"num_frames\"], \"python_environment_requirements\": [\"pip install git+https://github.com/huggingface/diffusers transformers accelerate\"], \"example_code\": \"pipe = DiffusionPipeline.from_pretrained(damo-vilab/text-to-video-ms-1.7b, torch_dtype=torch.float16, variant=fp16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\nprompt = Spiderman is surfing\\nvideo_frames = pipe(prompt, num_inference_steps=25).frames\\nvideo_path = export_to_video(video_frames)\", \"performance\": {\"dataset\": \"Webvid\", \"accuracy\": \"Not specified\"}, \"description\": \"A multi-stage text-to-video generation diffusion model that inputs a description text and returns a video that matches the text description. The model consists of three sub-networks: text feature extraction model, text feature-to-video latent space diffusion model, and video latent space to video visual space model. It supports English input only and has a wide range of applications.\"}}", "category": "generic"}
{"question_id": 354, "text": " Help me to build a self-learning assistant capable of answering questions about an image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/git-base-textvqa\", \"api_call\": \"AutoModel.from_pretrained('microsoft/git-base-textvqa')\", \"api_arguments\": \"image, question\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"vqa_pipeline({'image': 'path/to/image.jpg', 'question': 'What is in the image?'})\", \"performance\": {\"dataset\": \"TextVQA\", \"accuracy\": \"Refer to the paper\"}, \"description\": \"GIT (GenerativeImage2Text), base-sized, fine-tuned on TextVQA. It is a Transformer decoder conditioned on both CLIP image tokens and text tokens. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is to predict the next text token, giving the image tokens and previous text tokens. It can be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification.\"}}", "category": "generic"}
{"question_id": 355, "text": " We have an online journal application that requires users to upload documents in which we need to automatically answer the questions related to the uploaded document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"CZ_DVQA_layoutxlm-base\", \"api_call\": \"LayoutXLMForQuestionAnswering.from_pretrained('fimu-docproc-research/CZ_DVQA_layoutxlm-base')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Document Question Answering model based on LayoutXLM.\"}}", "category": "generic"}
{"question_id": 356, "text": " An educational company is building a document question answering system for their students. They want the system to answer questions about the contents of textbooks and study guides quickly and accurately.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"tiny-random-LayoutLMForQuestionAnswering\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('hf-tiny-model-private/tiny-random-LayoutLMForQuestionAnswering')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random LayoutLM model for question answering. This model is not pretrained and serves as an example for the LayoutLM architecture.\"}}", "category": "generic"}
{"question_id": 357, "text": " Our company focuses on predicting molecular properties. We need the best model to tackle this problem for our project. We heard about Graphormer and want to start with a pretrained model.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Graph Machine Learning\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"graphormer-base-pcqm4mv1\", \"api_call\": \"AutoModel.from_pretrained('graphormer-base-pcqm4mv1')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"See the Graph Classification with Transformers tutorial\", \"performance\": {\"dataset\": \"PCQM4M-LSC\", \"accuracy\": \"1st place on the KDD CUP 2021 (quantum prediction track)\"}, \"description\": \"The Graphormer is a graph Transformer model, pretrained on PCQM4M-LSC, and which got 1st place on the KDD CUP 2021 (quantum prediction track). Developed by Microsoft, this model should be used for graph classification tasks or graph representation tasks; the most likely associated task is molecule modeling. It can either be used as such, or finetuned on downstream tasks.\"}}", "category": "generic"}
{"question_id": 358, "text": " We have a company that processes loan applications. Give us the answer for a question, based on a document.\\n###Input: Our company policy restricts the loan applicant's eligibility to the citizens of United States. The applicant needs to be 18 years old or above and their monthly salary should at least be $4,000. FetchTypeOfYear: 2019. Can anyone with a monthly salary of $3,000 apply?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"tiennvcs/layoutlmv2-large-uncased-finetuned-vi-infovqa\", \"api_call\": \"pipeline('question-answering', model='tiennvcs/layoutlmv2-large-uncased-finetuned-vi-infovqa')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.15.0, torch==1.8.0+cu101, datasets==1.17.0, tokenizers==0.10.3\", \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 8.5806}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-large-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 359, "text": " Our company is setting up an online shop for selling computer parts. We need a system that can identify the components in images uploaded by users.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/vit-base-patch16-224\", \"api_call\": \"ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-224\", \"from_tf\": \"False\", \"config\": \"None\", \"cache_dir\": \"None\", \"revision\": \"None\", \"use_auth_token\": \"False\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.0\", \"torch\": \"1.9.0\", \"PIL\": \"8.3.2\", \"requests\": \"2.26.0\"}, \"example_code\": {\"1\": \"from transformers import ViTImageProcessor, ViTForImageClassification\", \"2\": \"from PIL import Image\", \"3\": \"import requests\", \"4\": \"url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\", \"5\": \"image = Image.open(requests.get(url, stream=True).raw)\", \"6\": \"processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\", \"7\": \"model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"8\": \"inputs = processor(images=image, return_tensors='pt')\", \"9\": \"outputs = model(**inputs)\", \"10\": \"logits = outputs.logits\", \"11\": \"predicted_class_idx = logits.argmax(-1).item()\", \"12\": \"print('Predicted class:', model.config.id2label[predicted_class_idx])\"}, \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al.\"}}", "category": "generic"}
{"question_id": 360, "text": " I want to classify the images of houseplants to find out their type, like whether it's a cactus, fern, or succulent.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/mobilenet_v1_0.75_192\", \"api_call\": \"AutoModelForImageClassification.from_pretrained('google/mobilenet_v1_0.75_192')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/mobilenet_v1_0.75_192\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoImageProcessor, AutoModelForImageClassification\\nfrom PIL import Image\\nimport requests\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\npreprocessor = AutoImageProcessor.from_pretrained(google/mobilenet_v1_0.75_192)\\nmodel = AutoModelForImageClassification.from_pretrained(google/mobilenet_v1_0.75_192)\\ninputs = preprocessor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"MobileNet V1 model pre-trained on ImageNet-1k at resolution 192x192. It was introduced in MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications by Howard et al, and first released in this repository. MobileNets are small, low-latency, low-power models parameterized to meet the resource constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used. MobileNets can be run efficiently on mobile devices.\"}}", "category": "generic"}
{"question_id": 361, "text": " I have few picture from my album, and I would like to find out whether it is a hotdog or not.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"julien-c/hotdog-not-hotdog\", \"api_call\": \"pipeline('image-classification', model='julien-c/hotdog-not-hotdog')\", \"api_arguments\": \"image\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": 0.825}, \"description\": \"A model that classifies images as hotdog or not hotdog.\"}}", "category": "generic"}
{"question_id": 362, "text": " Our client is building an application that converts scanned tables into structured data. We need to detect the rows and columns in a given table image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/table-transformer-structure-recognition\", \"api_call\": \"pipeline('object-detection', model='microsoft/table-transformer-structure-recognition')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"PubTables1M\", \"accuracy\": \"\"}, \"description\": \"Table Transformer (DETR) model trained on PubTables1M for detecting the structure (like rows, columns) in tables.\"}}", "category": "generic"}
{"question_id": 363, "text": " I am hosting a vegan food event and I want to know if any of the dishes contains meat from the picture I have taken.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-base-patch32\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-base-patch32')\", \"api_arguments\": {\"texts\": \"List of text queries\", \"images\": \"Image to be processed\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"import requests\\nfrom PIL import Image\\nimport torch\\nfrom transformers import OwlViTProcessor, OwlViTForObjectDetection\\nprocessor = OwlViTProcessor.from_pretrained(google/owlvit-base-patch32)\\nmodel = OwlViTForObjectDetection.from_pretrained(google/owlvit-base-patch32)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [[a photo of a cat, a photo of a dog]]\\ninputs = processor(text=texts, images=image, return_tensors=pt)\\noutputs = model(**inputs)\\ntarget_sizes = torch.Tensor([image.size[::-1]])\\nresults = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"performance\": {\"dataset\": \"COCO and OpenImages\", \"accuracy\": \"Not specified\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. The model can be used to query an image with one or multiple text queries.\"}}", "category": "generic"}
{"question_id": 364, "text": " In a kitchen, as a robot chef, we need to identify different objects such as fruits and dishes.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-large-patch14\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-large-patch14')\", \"api_arguments\": {\"model_name\": \"google/owlvit-large-patch14\"}, \"python_environment_requirements\": [\"torch\", \"transformers\", \"PIL\", \"requests\"], \"example_code\": [\"import requests\", \"from PIL import Image\", \"import torch\", \"from transformers import OwlViTProcessor, OwlViTForObjectDetection\", \"processor = OwlViTProcessor.from_pretrained(google/owlvit-large-patch14)\", \"model = OwlViTForObjectDetection.from_pretrained(google/owlvit-large-patch14)\", \"url = http://images.cocodataset.org/val2017/000000039769.jpg\", \"image = Image.open(requests.get(url, stream=True).raw)\", \"texts = [[a photo of a cat, a photo of a dog]\", \"inputs = processor(text=texts, images=image, return_tensors=pt)\", \"outputs = model(**inputs)\", \"target_sizes = torch.Tensor([image.size[::-1]])\", \"results = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"i = 0\", \"text = texts[i]\", \"boxes, scores, labels = results[i][boxes], results[i][scores], results[i][labels]\", \"score_threshold = 0.1\", \"for box, score, label in zip(boxes, scores, labels):\", \" box = [round(i, 2) for i in box.tolist()]\", \" if score >= score_threshold:\", \" print(fDetected {text[label]} with confidence {round(score.item(), 3)} at location {box})\"], \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not specified\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. It uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. OWL-ViT is trained on publicly available image-caption data and fine-tuned on publicly available object detection datasets such as COCO and OpenImages.\"}}", "category": "generic"}
{"question_id": 365, "text": " We need to segment clothes in photos for our online fashion store.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"mattmdjaga/segformer_b2_clothes\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\", \"matplotlib\", \"torch\"], \"example_code\": \"from transformers import AutoFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nimport matplotlib.pyplot as plt\\nimport torch.nn as nn\\nextractor = AutoFeatureExtractor.from_pretrained('mattmdjaga/segformer_b2_clothes')\\nmodel = SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\\nurl = 'https://plus.unsplash.com/premium_photo-1673210886161-bfcc40f54d1f?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8cGVyc29uJTIwc3RhbmRpbmd8ZW58MHx8MHx8&amp;w=1000&amp;q=80'\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = extractor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\\nlogits = outputs.logits.cpu()\\nupsampled_logits = nn.functional.interpolate(logits, size=image.size[::-1], mode='bilinear', align_corners=False)\\npred_seg = upsampled_logits.argmax(dim=1)[0]\\nplt.imshow(pred_seg)\", \"performance\": {\"dataset\": \"mattmdjaga/human_parsing_dataset\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on ATR dataset for clothes segmentation.\"}}", "category": "generic"}
{"question_id": 366, "text": " Automate the process of creating a normal map from a given object image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Normal Map Estimation\", \"api_name\": \"lllyasviel/sd-controlnet-normal\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-normal')\", \"api_arguments\": [\"image\", \"num_inference_steps\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\"], \"example_code\": \"from PIL import Image\\nfrom transformers import pipeline\\nimport numpy as np\\nimport cv2\\nfrom diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\\nimport torch\\nfrom diffusers.utils import load_image\\nimage = load_image(https://huggingface.co/lllyasviel/sd-controlnet-normal/resolve/main/images/toy.png).convert(RGB)\\ndepth_estimator = pipeline(depth-estimation, model =Intel/dpt-hybrid-midas )\\nimage = depth_estimator(image)['predicted_depth'][0]\\nimage = image.numpy()\\nimage_depth = image.copy()\\nimage_depth -= np.min(image_depth)\\nimage_depth /= np.max(image_depth)\\nbg_threhold = 0.4\\nx = cv2.Sobel(image, cv2.CV_32F, 1, 0, ksize=3)\\nx[image_depth &lt; bg_threhold] = 0\\ny = cv2.Sobel(image, cv2.CV_32F, 0, 1, ksize=3)\\ny[image_depth &lt; bg_threhold] = 0\\nz = np.ones_like(x) * np.pi * 2.0\\nimage = np.stack([x, y, z], axis=2)\\nimage /= np.sum(image ** 2.0, axis=2, keepdims=True) ** 0.5\\nimage = (image * 127.5 + 127.5).clip(0, 255).astype(np.uint8)\\nimage = Image.fromarray(image)\\ncontrolnet = ControlNetModel.from_pretrained(\\n fusing/stable-diffusion-v1-5-controlnet-normal, torch_dtype=torch.float16\\n)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_xformers_memory_efficient_attention()\\npipe.enable_model_cpu_offload()\\nimage = pipe(cute toy, image, num_inference_steps=20).images[0]\\nimage.save('images/toy_normal_out.png')\", \"performance\": {\"dataset\": \"DIODE\", \"accuracy\": \"Not provided\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Normal Map Estimation. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 367, "text": " We have a picture of a landscape, and we'd like to add a building and a river in this picture.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Diffusion-based text-to-image generation model\", \"api_name\": \"lllyasviel/control_v11e_sd15_ip2p\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11e_sd15_ip2p')\", \"api_arguments\": [\"checkpoint\", \"torch_dtype\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11e_sd15_ip2p\\ncontrol_image = load_image(https://huggingface.co/lllyasviel/control_v11e_sd15_ip2p/resolve/main/images/input.png).convert('RGB')\\nprompt = make it on fire\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(0)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"Stable Diffusion v1-5\", \"accuracy\": \"Not provided\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on instruct pix2pix images.\"}}", "category": "generic"}
{"question_id": 368, "text": " Our client, an architecture firm, needs a rendering of a \\\"luxury living room with a fireplace\\\" as a visualization for a prestigious project.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Diffusion Models\", \"api_name\": \"lllyasviel/control_v11p_sd15_mlsd\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_mlsd')\", \"api_arguments\": [\"checkpoint\", \"torch_dtype\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom controlnet_aux import MLSDdetector\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11p_sd15_mlsd\\nimage = load_image(\\n https://huggingface.co/lllyasviel/control_v11p_sd15_mlsd/resolve/main/images/input.png\\n)\\nprompt = royal chamber with fancy bed\\nprocessor = MLSDdetector.from_pretrained('lllyasviel/ControlNet')\\ncontrol_image = processor(image)\\ncontrol_image.save(./images/control.png)\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(0)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"MLSD\", \"accuracy\": \"Not provided\"}, \"description\": \"Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5. This checkpoint corresponds to the ControlNet conditioned on MLSD images.\"}}", "category": "generic"}
{"question_id": 369, "text": " We would like to restore an old and blurry image of our grandparents for an anniversary present.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Keras\", \"functionality\": \"Image Deblurring\", \"api_name\": \"google/maxim-s3-deblurring-gopro\", \"api_call\": \"from_pretrained_keras('google/maxim-s3-deblurring-gopro')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"huggingface_hub\", \"PIL\", \"tensorflow\", \"numpy\", \"requests\"], \"example_code\": \"from huggingface_hub import from_pretrained_keras\\nfrom PIL import Image\\nimport tensorflow as tf\\nimport numpy as np\\nimport requests\\nurl = https://github.com/sayakpaul/maxim-tf/raw/main/images/Deblurring/input/1fromGOPR0950.png\\nimage = Image.open(requests.get(url, stream=True).raw)\\nimage = np.array(image)\\nimage = tf.convert_to_tensor(image)\\nimage = tf.image.resize(image, (256, 256))\\nmodel = from_pretrained_keras(google/maxim-s3-deblurring-gopro)\\npredictions = model.predict(tf.expand_dims(image, 0))\", \"performance\": {\"dataset\": \"GoPro\", \"accuracy\": {\"PSNR\": 32.86, \"SSIM\": 0.961}}, \"description\": \"MAXIM model pre-trained for image deblurring. It was introduced in the paper MAXIM: Multi-Axis MLP for Image Processing by Zhengzhong Tu, Hossein Talebi, Han Zhang, Feng Yang, Peyman Milanfar, Alan Bovik, Yinxiao Li and first released in this repository.\"}}", "category": "generic"}
{"question_id": 370, "text": " A creative artist wants to generate a painting from a given input text titled \\\"A head full of roses,\\\" utilizing the image provided in the API description.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Diffusion-based text-to-image generation model\", \"api_name\": \"lllyasviel/control_v11p_sd15_normalbae\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_normalbae')\", \"api_arguments\": [\"checkpoint\", \"torch_dtype\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom controlnet_aux import NormalBaeDetector\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11p_sd15_normalbae\\nimage = load_image(\\n https://huggingface.co/lllyasviel/control_v11p_sd15_normalbae/resolve/main/images/input.png\\n)\\nprompt = A head full of roses\\nprocessor = NormalBaeDetector.from_pretrained(lllyasviel/Annotators)\\ncontrol_image = processor(image)\\ncontrol_image.save(./images/control.png)\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(33)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"ControlNet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on normalbae images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.\"}}", "category": "generic"}
{"question_id": 371, "text": " I would like to generate a high-quality image of a church using unconditional image generation.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"google/ddpm-church-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-church-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-church-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) for high-quality image synthesis. Trained on the unconditional CIFAR10 dataset and 256x256 LSUN. Supports different noise schedulers like scheduling_ddpm, scheduling_ddim, and scheduling_pndm for inference.\"}}", "category": "generic"}
{"question_id": 372, "text": " Recently, my company is asked to produce new portraits for the entire team. Therefore, I am looking for an AI which can generate human faces from scratch.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"google/ncsnpp-ffhq-256\", \"api_call\": \"DiffusionPipeline.from_pretrained('google/ncsnpp-ffhq-256')\", \"api_arguments\": {\"model_id\": \"google/ncsnpp-ffhq-256\"}, \"python_environment_requirements\": [\"diffusers\"], \"example_code\": [\"!pip install diffusers\", \"from diffusers import DiffusionPipeline\", \"model_id = google/ncsnpp-ffhq-256\", \"sde_ve = DiffusionPipeline.from_pretrained(model_id)\", \"image = sde_ve()[sample]\", \"image[0].save(sde_ve_generated_image.png)\"], \"performance\": {\"dataset\": \"CIFAR-10\", \"accuracy\": {\"Inception score\": 9.89, \"FID\": 2.2, \"Likelihood\": 2.99}}, \"description\": \"Score-Based Generative Modeling through Stochastic Differential Equations (SDE) for unconditional image generation. Achieves record-breaking performance on CIFAR-10 and demonstrates high fidelity generation of 1024 x 1024 images for the first time from a score-based generative model.\"}}", "category": "generic"}
{"question_id": 373, "text": " Our team wants to make a cat-themed video game. We would like to design various cartoon cat characters through AI-generated images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Denoising Diffusion Probabilistic Models (DDPM)\", \"api_name\": \"google/ddpm-ema-cat-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-ema-cat-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"!pip install diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-ema-cat-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. It can generate high-quality images, and supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm. On the unconditional CIFAR10 dataset, it achieves an Inception score of 9.46 and a state-of-the-art FID score of 3.17.\"}}", "category": "generic"}
{"question_id": 374, "text": " Can you teach me to build a program that will analyze video and describe what's happening in natural language?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/xclip-base-patch32\", \"api_call\": \"XClipModel.from_pretrained('microsoft/xclip-base-patch32')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"Kinetics 400\", \"accuracy\": {\"top-1\": 80.4, \"top-5\": 95.0}}, \"description\": \"X-CLIP is a minimal extension of CLIP for general video-language understanding. The model is trained in a contrastive way on (video, text) pairs. This allows the model to be used for tasks like zero-shot, few-shot or fully supervised video classification and video-text retrieval.\"}}", "category": "generic"}
{"question_id": 375, "text": " In a security context, the company is starting a project to detect any signs of violence in video streams from its CCTV cameras. It's essential to analyze the video content for any violent behaviors.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"lmazzon70/videomae-base-finetuned-kinetics-finetuned-rwf2000mp4-epochs8-batch8-kb\", \"api_call\": \"AutoModelForVideoClassification.from_pretrained('lmazzon70/videomae-base-finetuned-kinetics-finetuned-rwf2000mp4-epochs8-batch8-kb')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": 0.7453}, \"description\": \"This model is a fine-tuned version of MCG-NJU/videomae-base-finetuned-kinetics on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 376, "text": " Create a sports highlight generator that takes video clips as input and identifies the category of the sports activity happening in the video.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"videomae-small-finetuned-kinetics\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-small-finetuned-kinetics')\", \"api_arguments\": {\"video\": \"list(np.random.randn(16, 3, 224, 224))\"}, \"python_environment_requirements\": [\"transformers\", \"numpy\", \"torch\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained('MCG-NJU/videomae-small-finetuned-kinetics')\\nmodel = VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-small-finetuned-kinetics')\\ninputs = processor(video, return_tensors='pt')\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint('Predicted class:', model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": {\"top-1\": 79.0, \"top-5\": 93.8}}, \"description\": \"VideoMAE model pre-trained for 1600 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 377, "text": " I am a movie director and I need to detect the genre of a movie based on its actions.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Action Recognition\", \"api_name\": \"videomae-base-finetuned-ucf101\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('nateraw/videomae-base-finetuned-ucf101')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"nateraw/videomae-base-finetuned-ucf101\"}, \"python_environment_requirements\": [\"transformers\", \"decord\", \"huggingface_hub\"], \"example_code\": \"from decord import VideoReader, cpu\\nimport torch\\nimport numpy as np\\nfrom transformers import VideoMAEFeatureExtractor, VideoMAEForVideoClassification\\nfrom huggingface_hub import hf_hub_download\\nnp.random.seed(0)\\ndef sample_frame_indices(clip_len, frame_sample_rate, seg_len):\\n converted_len = int(clip_len * frame_sample_rate)\\n end_idx = np.random.randint(converted_len, seg_len)\\n start_idx = end_idx - converted_len\\n indices = np.linspace(start_idx, end_idx, num=clip_len)\\n indices = np.clip(indices, start_idx, end_idx - 1).astype(np.int64)\\n return indices\\nfile_path = hf_hub_download(\\n repo_id=nateraw/dino-clips, filename=archery.mp4, repo_type=space\\n)\\nvideoreader = VideoReader(file_path, num_threads=1, ctx=cpu(0))\\nvideoreader.seek(0)\\nindices = sample_frame_indices(clip_len=16, frame_sample_rate=4, seg_len=len(videoreader))\\nvideo = videoreader.get_batch(indices).asnumpy()\\nfeature_extractor = VideoMAEFeatureExtractor.from_pretrained(nateraw/videomae-base-finetuned-ucf101)\\nmodel = VideoMAEForVideoClassification.from_pretrained(nateraw/videomae-base-finetuned-ucf101)\\ninputs = feature_extractor(list(video), return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_label = logits.argmax(-1).item()\\nprint(model.config.id2label[predicted_label])\", \"performance\": {\"dataset\": \"UCF101\", \"accuracy\": 0.758209764957428}, \"description\": \"VideoMAE Base model fine tuned on UCF101 for Video Action Recognition\"}}", "category": "generic"}
{"question_id": 378, "text": " Bob is designing an app for his city. He needs to quickly identify if the provided image has a bike or a car. Design a model that recognizes a bike or car and provides classification output for the given image.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_xxlarge-laion2B-s34B-b82K-augreg-rewind\", \"api_call\": \"CLIPModel.from_pretrained('laion/CLIP-convnext_xxlarge-laion2B-s34B-b82K-augreg-rewind')\", \"api_arguments\": \"image, class_names\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline; clip = pipeline('zero-shot-classification', model='laion/CLIP-convnext_xxlarge-laion2B-s34B-b82K-augreg-rewind'); clip(image, class_names=['cat', 'dog', 'fish'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"79.1 - 79.4\"}, \"description\": \"A series of CLIP ConvNeXt-XXLarge models trained on LAION-2B (English), a subset of LAION-5B, using OpenCLIP. These models achieve between 79.1 and 79.4 top-1 zero-shot accuracy on ImageNet-1k. The models can be used for zero-shot image classification, image and text retrieval, and other related tasks.\"}}", "category": "generic"}
{"question_id": 379, "text": " I need to analyze the sentiment of tweets to find out which products are getting positive customer feedback.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"cardiffnlp/twitter-roberta-base-sentiment-latest\", \"api_call\": \"pipeline(sentiment-analysis, model=AutoModel.from_pretrained('cardiffnlp/twitter-roberta-base-sentiment-latest'), tokenizer=AutoTokenizer.from_pretrained('cardiffnlp/twitter-roberta-base-sentiment-latest'))\", \"api_arguments\": {\"model\": \"model_path\", \"tokenizer\": \"model_path\"}, \"python_environment_requirements\": [\"transformers\", \"numpy\", \"scipy\"], \"example_code\": \"from transformers import pipeline\\nsentiment_task = pipeline(sentiment-analysis, model=model_path, tokenizer=model_path)\\nsentiment_task(Covid cases are increasing fast!)\", \"performance\": {\"dataset\": \"tweet_eval\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a RoBERTa-base model trained on ~124M tweets from January 2018 to December 2021, and finetuned for sentiment analysis with the TweetEval benchmark. The model is suitable for English.\"}}", "category": "generic"}
{"question_id": 380, "text": " We are building a content moderation system. Our clients upload the content, it can be generated by human or AI. We want to have a filtering API to advise on the original text if it is generated by GPT-2.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Detect GPT-2 generated text\", \"api_name\": \"roberta-base-openai-detector\", \"api_call\": \"pipeline('text-classification', model='roberta-base-openai-detector')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\npipe = pipeline(text-classification, model=roberta-base-openai-detector)\\nprint(pipe(Hello world! Is this content AI-generated?))\", \"performance\": {\"dataset\": \"WebText\", \"accuracy\": \"95%\"}, \"description\": \"RoBERTa base OpenAI Detector is the GPT-2 output detector model, obtained by fine-tuning a RoBERTa base model with the outputs of the 1.5B-parameter GPT-2 model. The model can be used to predict if text was generated by a GPT-2 model.\"}}", "category": "generic"}
{"question_id": 381, "text": " I have a list of comments related to stocks. Check the overall sentiment towards each stock.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Inferencing for stock-related comments\", \"api_name\": \"zhayunduo/roberta-base-stocktwits-finetuned\", \"api_call\": \"RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\", \"api_arguments\": {\"model\": \"RobertaForSequenceClassification\", \"tokenizer\": \"RobertaTokenizer\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import RobertaForSequenceClassification, RobertaTokenizer\\nfrom transformers import pipeline\\nimport pandas as pd\\nimport emoji\\ntokenizer_loaded = RobertaTokenizer.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\\nmodel_loaded = RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\\nnlp = pipeline(text-classification, model=model_loaded, tokenizer=tokenizer_loaded)\\nsentences = pd.Series(['just buy','just sell it','entity rocket to the sky!','go down','even though it is going up, I still think it will not keep this trend in the near future'])\\nsentences = list(sentences)\\nresults = nlp(sentences)\\nprint(results)\", \"performance\": {\"dataset\": \"stocktwits\", \"accuracy\": 0.9343}, \"description\": \"This model is fine-tuned with roberta-base model on 3,200,000 comments from stocktwits, with the user-labeled tags 'Bullish' or 'Bearish'.\"}}", "category": "generic"}
{"question_id": 382, "text": " I'd like to give a potted plant to my friend. Write me a short and simple plant care instruction.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"lvwerra/distilbert-imdb\", \"api_call\": \"pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\", \"pytorch\"], \"example_code\": \"classifier('I love this movie!')\", \"performance\": {\"dataset\": \"imdb\", \"accuracy\": 0.928}, \"description\": \"This model is a fine-tuned version of distilbert-base-uncased on the imdb dataset. It is used for sentiment analysis on movie reviews and achieves an accuracy of 0.928 on the evaluation set.\"}}", "category": "generic"}
{"question_id": 383, "text": " I need to extract biomedical entities from a given set of case reports to make it easier for researchers to analyze the data.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"d4data/biomedical-ner-all\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('d4data/biomedical-ner-all')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained(d4data/biomedical-ner-all)\", \"tokenizer\": \"AutoTokenizer.from_pretrained(d4data/biomedical-ner-all)\", \"aggregation_strategy\": \"simple\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import pipeline, AutoTokenizer, AutoModelForTokenClassification\"}, \"example_code\": \"pipe(The patient reported no recurrence of palpitations at follow-up 6 months after the ablation.)\", \"performance\": {\"dataset\": \"Maccrobat\", \"accuracy\": \"Not provided\"}, \"description\": \"An English Named Entity Recognition model, trained on Maccrobat to recognize the bio-medical entities (107 entities) from a given text corpus (case reports etc.). This model was built on top of distilbert-base-uncased.\"}}", "category": "generic"}
{"question_id": 384, "text": " I need an AI feature capable of extracting names of people, organizations, and locations from various news articles in different languages.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"distilbert-base-multilingual-cased-ner-hrl\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Davlan/distilbert-base-multilingual-cased-ner-hrl')\", \"api_arguments\": {\"model\": \"Davlan/distilbert-base-multilingual-cased-ner-hrl\", \"tokenizer\": \"Davlan/distilbert-base-multilingual-cased-ner-hrl\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\nfrom transformers import pipeline\\ntokenizer = AutoTokenizer.from_pretrained(Davlan/distilbert-base-multilingual-cased-ner-hrl)\\nmodel = AutoModelForTokenClassification.from_pretrained(Davlan/distilbert-base-multilingual-cased-ner-hrl)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = Nader Jokhadar had given Syria the lead with a well-struck header in the seventh minute.\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": [{\"name\": \"ANERcorp\", \"language\": \"Arabic\"}, {\"name\": \"conll 2003\", \"language\": \"German\"}, {\"name\": \"conll 2003\", \"language\": \"English\"}, {\"name\": \"conll 2002\", \"language\": \"Spanish\"}, {\"name\": \"Europeana Newspapers\", \"language\": \"French\"}, {\"name\": \"Italian I-CAB\", \"language\": \"Italian\"}, {\"name\": \"Latvian NER\", \"language\": \"Latvian\"}, {\"name\": \"conll 2002\", \"language\": \"Dutch\"}, {\"name\": \"Paramopama + Second Harem\", \"language\": \"Portuguese\"}, {\"name\": \"MSRA\", \"language\": \"Chinese\"}], \"accuracy\": \"Not specified\"}, \"description\": \"distilbert-base-multilingual-cased-ner-hrl is a Named Entity Recognition model for 10 high resourced languages (Arabic, German, English, Spanish, French, Italian, Latvian, Dutch, Portuguese and Chinese) based on a fine-tuned Distiled BERT base model. It has been trained to recognize three types of entities: location (LOC), organizations (ORG), and person (PER).\"}}", "category": "generic"}
{"question_id": 385, "text": " We are a consulting firm, and we want to easily identify company names from texts.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Entity Extraction\", \"api_name\": \"903429548\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548', use_auth_token=True)\", \"api_arguments\": {\"inputs\": \"I love AutoTrain\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTokenClassification, AutoTokenizer\"}, \"example_code\": \"from transformers import AutoModelForTokenClassification, AutoTokenizer\\nmodel = AutoModelForTokenClassification.from_pretrained(ismail-lucifer011/autotrain-company_all-903429548, use_auth_token=True)\\ntokenizer = AutoTokenizer.from_pretrained(ismail-lucifer011/autotrain-company_all-903429548, use_auth_token=True)\\ninputs = tokenizer(I love AutoTrain, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"ismail-lucifer011/autotrain-data-company_all\", \"accuracy\": 0.9979930566588805}, \"description\": \"A token classification model trained using AutoTrain for entity extraction. The model is based on the distilbert architecture and trained on the ismail-lucifer011/autotrain-data-company_all dataset. It can be used to identify and extract company names from text.\"}}", "category": "generic"}
{"question_id": 386, "text": " Our company is making a chatbot that needs to extract information from a paragraph. Get the named entities in the paragraph.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english-ontonotes-fast\", \"api_call\": \"SequenceTagger.load('flair/ner-english-ontonotes-fast')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\ntagger = SequenceTagger.load(flair/ner-english-ontonotes-fast)\\nsentence = Sentence(On September 1st George Washington won 1 dollar.)\\ntagger.predict(sentence)\\nprint(sentence)\\nfor entity in sentence.get_spans('ner'):\\n  print(entity)\", \"performance\": {\"dataset\": \"Ontonotes\", \"accuracy\": \"F1-Score: 89.3\"}, \"description\": \"This is the fast version of the 18-class NER model for English that ships with Flair. It predicts 18 tags such as cardinal value, date value, event name, building name, geo-political entity, language name, law name, location name, money name, affiliation, ordinal value, organization name, percent value, person name, product name, quantity value, time value, and name of work of art. The model is based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 387, "text": " A journalist is looking for historical Olympic host cities and wants to find the year when Beijing hosted the games.\\n###Input: {\\\"table\\\": {\\n    \\\"year\\\": [1896, 1900, 1904, 2004, 2008, 2012],\\n    \\\"city\\\": [\\\"Athens\\\", \\\"Paris\\\", \\\"St. Louis\\\", \\\"Athens\\\", \\\"Beijing\\\", \\\"London\\\"]},\\n    \\\"query\\\": \\\"Select the year when Beijing hosted the Olympic games\\\"}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/tapex-base\", \"api_call\": \"BartForConditionalGeneration.from_pretrained('microsoft/tapex-base')\", \"api_arguments\": {\"table\": \"pd.DataFrame\", \"query\": \"str\"}, \"python_environment_requirements\": {\"libraries\": [\"transformers\", \"pandas\"]}, \"example_code\": \"from transformers import TapexTokenizer, BartForConditionalGeneration\\nimport pandas as pd\\ntokenizer = TapexTokenizer.from_pretrained(microsoft/tapex-base)\\nmodel = BartForConditionalGeneration.from_pretrained(microsoft/tapex-base)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = select year where city = beijing\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"arxiv:2107.07653\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPEX (Table Pre-training via Execution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with table reasoning skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries.\"}}", "category": "generic"}
{"question_id": 388, "text": " I am a Korean exchange student in the United States. I am building a Korean Table Question Answering assistant to help me with my studies.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"dsba-lab/koreapas-finetuned-korwikitq\", \"api_call\": \"pipeline('table-question-answering', model='dsba-lab/koreapas-finetuned-korwikitq')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"from transformers import pipeline; table_qa = pipeline('table-question-answering', model='dsba-lab/koreapas-finetuned-korwikitq'); table_qa(table=table, query='\\uc9c8\\ubb38')\", \"performance\": {\"dataset\": \"korwikitq\", \"accuracy\": null}, \"description\": \"A Korean Table Question Answering model finetuned on the korwikitq dataset.\"}}", "category": "generic"}
{"question_id": 389, "text": " Create an API that processes large data sets of financial transactions and can deliver information on the number of transactions and their monetary value, based on a date range.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-small-finetuned-wikisql-supervised\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-small-finetuned-wikisql-supervised')\", \"api_arguments\": \"model = TapasForQuestionAnswering.from_pretrained('google/tapas-small-finetuned-wikisql-supervised')\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import TapasTokenizer, TapasForQuestionAnswering\\ntokenizer = TapasTokenizer.from_pretrained('google/tapas-small-finetuned-wikisql-supervised')\\nmodel = TapasForQuestionAnswering.from_pretrained('google/tapas-small-finetuned-wikisql-supervised')\", \"performance\": {\"dataset\": \"wikisql\", \"accuracy\": \"Not specified\"}, \"description\": \"TAPAS is a BERT-like transformers model pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion. This model is fine-tuned on WikiSQL and can be used for answering questions related to a table.\"}}", "category": "generic"}
{"question_id": 390, "text": " A product manager needs an explanation related to model conversion. They are confused why it is important. Can you please help them by providing an answer?\\n###Input: \\n{\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bert-large-uncased-whole-word-masking-squad2\", \"api_call\": \"pipeline('question-answering', model=AutoModel.from_pretrained('deepset/bert-large-uncased-whole-word-masking-squad2'), tokenizer=AutoTokenizer.from_pretrained('deepset/bert-large-uncased-whole-word-masking-squad2'))\", \"api_arguments\": {\"model_name\": \"deepset/bert-large-uncased-whole-word-masking-squad2\", \"tokenizer\": \"deepset/bert-large-uncased-whole-word-masking-squad2\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"QA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\", \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"Exact Match\": 80.885, \"F1\": 83.876}}, \"description\": \"This is a bert-large model, fine-tuned using the SQuAD2.0 dataset for the task of question answering. It is designed for extractive question answering and supports English language.\"}}", "category": "generic"}
{"question_id": 391, "text": " We are building a memory game where a description is displayed for a few seconds and later on, questions on what is shown comes up for the user to remember.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"distilbert-base-uncased-distilled-squad\", \"api_call\": \"pipeline('question-answering', model='distilbert-base-uncased-distilled-squad')\", \"api_arguments\": [\"question\", \"context\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nquestion_answerer = pipeline(question-answering, model='distilbert-base-uncased-distilled-squad')\\ncontext = r\\n... Extractive Question Answering is the task of extracting an answer from a text given a question. An example of a\\n... question answering dataset is the SQuAD dataset, which is entirely based on that task. If you would like to fine-tune\\n... a model on a SQuAD task, you may leverage the examples/pytorch/question-answering/run_squad.py script.\\n... \\nresult = question_answerer(question=What is a good example of a question answering dataset?, context=context)\\nprint(\\n... fAnswer: '{result['answer']}', score: {round(result['score'], 4)}, start: {result['start']}, end: {result['end']}\\n...)\", \"performance\": {\"dataset\": \"SQuAD v1.1\", \"accuracy\": \"86.9 F1 score\"}, \"description\": \"DistilBERT base uncased distilled SQuAD is a fine-tuned version of DistilBERT-base-uncased for the task of question answering. It has 40% less parameters than bert-base-uncased, runs 60% faster while preserving over 95% of BERT's performances as measured on the GLUE language understanding benchmark.\"}}", "category": "generic"}
{"question_id": 392, "text": " We are a medical research team working on a COVID-19 project. We need assistance in question answering related to the pandemic and related research papers.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-base-squad2-covid\", \"api_call\": \"pipeline('question-answering', model=RobertaForQuestionAnswering.from_pretrained('deepset/roberta-base-squad2-covid'), tokenizer=RobertaTokenizer.from_pretrained('deepset/roberta-base-squad2-covid'))\", \"api_arguments\": {\"model_name\": \"deepset/roberta-base-squad2-covid\", \"tokenizer\": \"deepset/roberta-base-squad2-covid\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": {\"QA_input\": {\"question\": \"Why is model conversion important?\", \"context\": \"The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.\"}, \"res\": \"nlp(QA_input)\"}, \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"XVAL_EM\": 0.17890995260663506, \"XVAL_f1\": 0.49925444207319924, \"XVAL_top_3_recall\": 0.8021327014218009}}, \"description\": \"This model is a Roberta-based model fine-tuned on SQuAD-style CORD-19 annotations for the task of extractive question answering in the context of COVID-19. It can be used with the Hugging Face Transformers library for question answering tasks.\"}}", "category": "generic"}
{"question_id": 393, "text": " The customer is writing a book about the solar system and just needs the answer to a question: How long does it take for Mars to orbit the sun?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"philschmid/distilbert-onnx\", \"api_call\": \"pipeline('question-answering', model='philschmid/distilbert-onnx')\", \"api_arguments\": {\"model\": \"philschmid/distilbert-onnx\"}, \"python_environment_requirements\": [\"transformers\", \"onnx\"], \"example_code\": {\"Compute\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='philschmid/distilbert-onnx')\\nqa_pipeline({'context': 'This is a context', 'question': 'What is this?'})\"}, \"performance\": {\"dataset\": \"squad\", \"accuracy\": \"F1 score: 87.1\"}, \"description\": \"This model is a fine-tune checkpoint of DistilBERT-base-cased, fine-tuned using (a second step of) knowledge distillation on SQuAD v1.1.\"}}", "category": "generic"}
{"question_id": 394, "text": " I am designing a quiz app that caters to blind users. The app should interpret the images and answer questions based on the image contents.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"uclanlp/visualbert-vqa\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('uclanlp/visualbert-vqa')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A VisualBERT model for Visual Question Answering.\"}}", "category": "generic"}
{"question_id": 395, "text": " The company develops a digital assistant that can answer questions about software products. Implement a feature to provide answers to user questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/deberta-v3-large-squad2\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('deepset/deberta-v3-large-squad2')\", \"api_arguments\": {\"model_name_or_path\": \"deepset/deberta-v3-large-squad2\", \"tokenizer\": \"deepset/deberta-v3-large-squad2\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": {\"a\": {\"code\": \"nlp = pipeline('question-answering', model=model_name, tokenizer=model_name)\\nQA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\"}, \"b\": {\"code\": \"model = AutoModelForQuestionAnswering.from_pretrained(model_name)\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\"}}, \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"exact\": 87.6105449338836, \"f1\": 90.75307008866517}}, \"description\": \"This is the deberta-v3-large model, fine-tuned using the SQuAD2.0 dataset. It's been trained on question-answer pairs, including unanswerable questions, for the task of Question Answering.\"}}", "category": "generic"}
{"question_id": 396, "text": " I'm talking to a new person online. Can this API help keep me safe by filtering out any inappropriate messages they send me?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"valhalla/distilbart-mnli-12-3\", \"api_call\": \"pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-3')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": [{\"name\": \"matched acc\", \"accuracy\": 88.1}, {\"name\": \"mismatched acc\", \"accuracy\": 88.19}]}, \"description\": \"distilbart-mnli is the distilled version of bart-large-mnli created using the No Teacher Distillation technique proposed for BART summarisation by Huggingface. It is a simple and effective technique with very little performance drop.\"}}", "category": "generic"}
{"question_id": 397, "text": " I want to build a personal assistant to check the logical relationship between two sentences, especially when I have a lot of texts in English.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Natural Language Inference\", \"api_name\": \"cross-encoder/nli-MiniLM2-L6-H768\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/nli-MiniLM2-L6-H768')\", \"api_arguments\": [\"sentence1\", \"sentence2\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from sentence_transformers import CrossEncoder\\nmodel = CrossEncoder('cross-encoder/nli-MiniLM2-L6-H768')\\nscores = model.predict([('A man is eating pizza', 'A man eats something'), ('A black race car starts up in front of a crowd of people.', 'A man is driving down a lonely road.')])\", \"performance\": {\"dataset\": \"SNLI and MultiNLI\", \"accuracy\": \"See SBERT.net - Pretrained Cross-Encoder for evaluation results\"}, \"description\": \"This model was trained using SentenceTransformers Cross-Encoder class on the SNLI and MultiNLI datasets. For a given sentence pair, it will output three scores corresponding to the labels: contradiction, entailment, neutral.\"}}", "category": "generic"}
{"question_id": 398, "text": " I am reading a book and, whenever I engage with an interesting topic, I write a short sentence summarizing that topic. I would like to have an assistant that, given a sentence, automatically classifies that topic among 'technology', 'literature', and 'science'.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"cross-encoder/nli-deberta-v3-xsmall\", \"api_call\": \"pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\", \"api_arguments\": [\"sent\", \"candidate_labels\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline('zero-shot-classification', model='cross-encoder/nli-deberta-v3-xsmall')\\nsent = 'Apple just announced the newest iPhone X'\\ncandidate_labels = ['technology', 'sports', 'politics']\\nres = classifier(sent, candidate_labels)\\nprint(res)\", \"performance\": {\"dataset\": {\"SNLI-test\": \"91.64\", \"MNLI_mismatched\": \"87.77\"}}, \"description\": \"This model is a Cross-Encoder for Natural Language Inference, trained on the SNLI and MultiNLI datasets. It can be used for zero-shot classification tasks.\"}}", "category": "generic"}
{"question_id": 399, "text": " Determine if one Russian sentence logically contradicts the information provided by another Russian sentence.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Natural Language Inference\", \"api_name\": \"cointegrated/rubert-base-cased-nli-threeway\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cointegrated/rubert-base-cased-nli-threeway')\", \"api_arguments\": [\"text1\", \"text2\"], \"python_environment_requirements\": [\"transformers\", \"sentencepiece\"], \"example_code\": \"import torch\\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\\nmodel_checkpoint = 'cointegrated/rubert-base-cased-nli-threeway'\\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)\\nmodel = AutoModelForSequenceClassification.from_pretrained(model_checkpoint)\\nif torch.cuda.is_available():\\n model.cuda()\\ntext1 = '.'\\ntext2 = '.'\\nwith torch.inference_mode():\\n out = model(**tokenizer(text1, text2, return_tensors='pt').to(model.device))\\n proba = torch.softmax(out.logits, -1).cpu().numpy()[0]\\nprint({v: proba[k] for k, v in model.config.id2label.items()})\", \"performance\": {\"dataset\": [\"JOCI\", \"MNLI\", \"MPE\", \"SICK\", \"SNLI\", \"ANLI\", \"NLI-style FEVER\", \"IMPPRES\"], \"accuracy\": {\"ROC AUC\": {\"entailment\": 0.91, \"contradiction\": 0.71, \"neutral\": 0.79}}}, \"description\": \"This is the DeepPavlov/rubert-base-cased fine-tuned to predict the logical relationship between two short texts: entailment, contradiction, or neutral.\"}}", "category": "generic"}
{"question_id": 400, "text": " The assignment is to develop a software for translating sentences from Spanish to English at a near-human performance.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-es-en\", \"api_call\": \"pipeline('translation_es_to_en', model='Helsinki-NLP/opus-mt-es-en')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\ntranslation = pipeline('translation_es_to_en', model='Helsinki-NLP/opus-mt-es-en')('Hola, \\u00bfc\\u00f3mo est\\u00e1s?')\", \"performance\": {\"dataset\": [{\"name\": \"newssyscomb2009-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 30.6, \"chr-F\": 0.57}}, {\"name\": \"news-test2008-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 27.9, \"chr-F\": 0.553}}, {\"name\": \"newstest2009-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 30.4, \"chr-F\": 0.572}}, {\"name\": \"newstest2010-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 36.1, \"chr-F\": 0.614}}, {\"name\": \"newstest2011-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 34.2, \"chr-F\": 0.599}}, {\"name\": \"newstest2012-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 37.9, \"chr-F\": 0.624}}, {\"name\": \"newstest2013-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 35.3, \"chr-F\": 0.609}}, {\"name\": \"Tatoeba-test.spa.eng\", \"accuracy\": {\"BLEU\": 59.6, \"chr-F\": 0.739}}]}, \"description\": \"Helsinki-NLP/opus-mt-es-en is a machine translation model trained to translate from Spanish to English using the Hugging Face Transformers library. The model is based on the Marian framework and was trained on the OPUS dataset.\"}}", "category": "generic"}
{"question_id": 401, "text": " I am an author. I have a new book that needs a summary. I want the summary to resemble the style of SparkNotes.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"pszemraj/long-t5-tglobal-base-16384-book-summary\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('pszemraj/long-t5-tglobal-base-16384-book-summary')\", \"api_arguments\": [\"long_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nimport torch\\nsummarizer = pipeline(\\n summarization,\\n pszemraj/long-t5-tglobal-base-16384-book-summary,\\n device=0 if torch.cuda.is_available() else -1,\\n)\\nlong_text = Here is a lot of text I don't want to read. Replace me\\nresult = summarizer(long_text)\\nprint(result[0][summary_text])\", \"performance\": {\"dataset\": \"kmfoda/booksum\", \"accuracy\": {\"ROUGE-1\": 36.408, \"ROUGE-2\": 6.065, \"ROUGE-L\": 16.721, \"ROUGE-LSUM\": 33.34}}, \"description\": \"A fine-tuned version of google/long-t5-tglobal-base on the kmfoda/booksum dataset, which can be used to summarize long text and generate SparkNotes-esque summaries of arbitrary topics. The model generalizes reasonably well to academic and narrative text.\"}}", "category": "generic"}
{"question_id": 402, "text": " An editor wants to summarize his article in French.\\n###Input: \\\"Selon un rapport r\\u00e9cent, les constructeurs automobiles pr\\u00e9voient d'acc\\u00e9l\\u00e9rer la production de voitures \\u00e9lectriques et de r\\u00e9duire la production de voitures \\u00e0 moteur \\u00e0 combustion interne. Les constructeurs pr\\u00e9voient de consacrer davantage de ressources \\u00e0 la recherche et au d\\u00e9veloppement de technologies pour am\\u00e9liorer l'efficacit\\u00e9 des batteries, r\\u00e9duire les co\\u00fbts de production et \\u00e9tendre le r\\u00e9seau de recharge. Les gouvernements du monde entier continuent de soutenir l'adoption de la mobilit\\u00e9 \\u00e9lectrique \\u00e0 travers des incitations financi\\u00e8res et des objectifs ambitieux de r\\u00e9duction des \\u00e9missions de CO2.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Abstractive Text Summarization\", \"api_name\": \"plguillou/t5-base-fr-sum-cnndm\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('plguillou/t5-base-fr-sum-cnndm')\", \"api_arguments\": {\"input_text\": \"summarize: ARTICLE\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import T5Tokenizer, T5ForConditionalGeneration\"}, \"example_code\": \"tokenizer = T5Tokenizer.from_pretrained(plguillou/t5-base-fr-sum-cnndm)\\nmodel = T5ForConditionalGeneration.from_pretrained(plguillou/t5-base-fr-sum-cnndm)\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"ROUGE-1\": 44.5252, \"ROUGE-2\": 22.652, \"ROUGE-L\": 29.8866}, \"description\": \"This model is a T5 Transformers model (JDBN/t5-base-fr-qg-fquad) that was fine-tuned in French for abstractive text summarization.\"}}", "category": "generic"}
{"question_id": 403, "text": " Design a chatbot for a school website, which can answer queries related to admissions, classes, teachers, and extracurriculars.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face\", \"functionality\": \"Conversational\", \"api_name\": \"facebook/blenderbot_small-90M\", \"api_call\": \"BlenderbotForConditionalGeneration.from_pretrained('facebook/blenderbot_small-90M')\", \"api_arguments\": [\"message\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"Input a message to start chatting with facebook/blenderbot_small-90M.\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not provided\"}, \"description\": \"Blenderbot is a chatbot model that provides engaging talking points and listens to their partners, both asking and answering questions, and displaying knowledge, empathy, and personality appropriately, depending on the situation.\"}}", "category": "generic"}
{"question_id": 404, "text": " We have a long article, and we want to generate a summary to understand the main points of the article.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"tuner007/pegasus_summarizer\", \"api_call\": \"PegasusForConditionalGeneration.from_pretrained('tuner007/pegasus_summarizer')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"pip install sentencepiece\"], \"example_code\": \"context = \\nIndia wicket-keeper batsman Rishabh Pant has said someone from the crowd threw a ball on pacer Mohammed Siraj while he was fielding in the ongoing third Test against England on Wednesday. Pant revealed the incident made India skipper Virat Kohli upset. I think, somebody threw a ball inside, at Siraj, so he [Kohli] was upset, said Pant in a virtual press conference after the close of the first day's play.You can say whatever you want to chant, but don't throw things at the fielders and all those things. It is not good for cricket, I guess, he added.In the third session of the opening day of the third Test, a section of spectators seemed to have asked Siraj the score of the match to tease the pacer. The India pacer however came with a brilliant reply as he gestured 1-0 (India leading the Test series) towards the crowd.Earlier this month, during the second Test match, there was some bad crowd behaviour on a show as some unruly fans threw champagne corks at India batsman KL Rahul.Kohli also intervened and he was seen gesturing towards the opening batsman to know more about the incident. An over later, the TV visuals showed that many champagne corks were thrown inside the playing field, and the Indian players were visibly left frustrated.Coming back to the game, after bundling out India for 78, openers Rory Burns and Haseeb Hameed ensured that England took the honours on the opening day of the ongoing third Test.At stumps, England's score reads 120/0 and the hosts have extended their lead to 42 runs. For the Three Lions, Burns (52) and Hameed (60) are currently unbeaten at the crease.Talking about the pitch on opening day, Pant said, They took the heavy roller, the wicket was much more settled down, and they batted nicely also, he said. But when we batted, the wicket was slightly soft, and they bowled in good areas, but we could have applied [ourselves] much better.Both England batsmen managed to see off the final session and the hosts concluded the opening day with all ten wickets intact, extending the lead to 42.(ANI)\\nget_response(context)\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": {\"ROUGE-1\": 36.604, \"ROUGE-2\": 14.64, \"ROUGE-L\": 23.884, \"ROUGE-LSUM\": 32.902, \"loss\": 2.576, \"gen_len\": 76.398}}, \"description\": \"PEGASUS fine-tuned for summarization\"}}", "category": "generic"}
{"question_id": 405, "text": " We need to prepare some sample conversations featuring frequently asked questions for helping customers with our products.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"ingen51/DialoGPT-medium-GPT4\", \"api_call\": \"pipeline('conversational', model='ingen51/DialoGPT-medium-GPT4')\", \"api_arguments\": [\"message\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"conversational_pipeline('Hello, how are you?')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"A GPT-4 model for generating conversational responses in a dialogue setting.\"}}", "category": "generic"}
{"question_id": 406, "text": " Can you give me advice on how to choose the best video game for me?\\n###Input: {\\\"instruction\\\": \\\"what is the best way to choose a video game?\\\", \\\"knowledge\\\": \\\"Some factors to consider when choosing a video game are personal preferences, genre, graphics, gameplay, storyline, platform, and reviews from other players or gaming websites.\\\", \\\"dialog\\\": [\\\"What type of video games do you prefer playing?\\\", \\\"I enjoy action-adventure games and a decent storyline.\\\"]}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"microsoft/GODEL-v1_1-base-seq2seq\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/GODEL-v1_1-base-seq2seq')\", \"api_arguments\": [\"instruction\", \"knowledge\", \"dialog\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\ndef generate(instruction, knowledge, dialog):\\n if knowledge != '':\\n knowledge = '[KNOWLEDGE] ' + knowledge\\n dialog = ' EOS '.join(dialog)\\n query = f{instruction} [CONTEXT] {dialog} {knowledge}\\n input_ids = tokenizer(f{query}, return_tensors=pt).input_ids\\n outputs = model.generate(input_ids, max_length=128, min_length=8, top_p=0.9, do_sample=True)\\n output = tokenizer.decode(outputs[0], skip_special_tokens=True)\\n return output\", \"performance\": {\"dataset\": \"Reddit discussion thread, instruction and knowledge grounded dialogs\", \"accuracy\": \"N/A\"}, \"description\": \"GODEL is a large-scale pre-trained model for goal-directed dialogs. It is parameterized with a Transformer-based encoder-decoder model and trained for response generation grounded in external text, which allows more effective fine-tuning on dialog tasks that require conditioning the response on information that is external to the current conversation (e.g., a retrieved document). The pre-trained model can be efficiently fine-tuned and adapted to accomplish a new dialog task with a handful of task-specific dialogs. The v1.1 model is trained on 551M multi-turn dialogs from Reddit discussion thread, and 5M instruction and knowledge grounded dialogs.\"}}", "category": "generic"}
{"question_id": 407, "text": " Write a script to translate the following French sentence into English: \\\"Je t\\u2019aime.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"bigscience/bloomz-560m\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('bigscience/bloomz-560m')\", \"api_arguments\": {\"checkpoint\": \"bigscience/bloomz-560m\", \"inputs\": \"Translate to English: Je t\\u2019aime.\"}, \"python_environment_requirements\": [\"transformers\", \"accelerate\", \"bitsandbytes\"], \"example_code\": {\"CPU\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\ncheckpoint = bigscience/bloomz-560m\\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint)\\ninputs = tokenizer.encode(Translate to English: Je t\\u2019aime., return_tensors=pt)\\noutputs = model.generate(inputs)\\nprint(tokenizer.decode(outputs[0]))\"}, \"performance\": {\"dataset\": \"bigscience/xP3\", \"accuracy\": {\"Winogrande XL (xl) validation set\": 52.41, \"XWinograd (en) test set\": 51.01, \"XWinograd (fr) test set\": 51.81, \"XWinograd (jp) test set\": 52.03, \"XWinograd (pt) test set\": 53.99, \"XWinograd (ru) test set\": 53.97, \"XWinograd (zh) test set\": 54.76, \"ANLI (r1) validation set\": 33.4, \"ANLI (r2) validation set\": 33.4, \"ANLI (r3) validation set\": 33.5}}, \"description\": \"BLOOMZ & mT0 are a family of models capable of following human instructions in dozens of languages zero-shot. Finetuned on the crosslingual task mixture (xP3), these models can generalize to unseen tasks & languages. Useful for tasks expressed in natural language, such as translation, summarization, and question answering.\"}}", "category": "generic"}
{"question_id": 408, "text": " Your company is developing a chatbot and requires accurate summaries of lengthy dialogues without losing context.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"DialogLED-base-16384\", \"api_call\": \"LEDForConditionalGeneration.from_pretrained('MingZhong/DialogLED-base-16384')\", \"api_arguments\": \"input_text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"arxiv\", \"accuracy\": \"2109.02492\"}, \"description\": \"DialogLED is a pre-trained model for long dialogue understanding and summarization. It builds on the Longformer-Encoder-Decoder (LED) architecture and uses window-based denoising as the pre-training task on a large amount of long dialogue data for further training. Here is a base version of DialogLED, the input length is limited to 16,384 in the pre-training phase.\"}}", "category": "generic"}
{"question_id": 409, "text": " I want a system that can translate an article from English to French automatically.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"google/byt5-small\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('google/byt5-small')\", \"api_arguments\": [\"input_ids\", \"labels\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import T5ForConditionalGeneration, AutoTokenizer\\nmodel = T5ForConditionalGeneration.from_pretrained('google/byt5-small')\\ntokenizer = AutoTokenizer.from_pretrained('google/byt5-small')\\nmodel_inputs = tokenizer([Life is like a box of chocolates., Today is Monday.], padding=longest, return_tensors=pt)\\nlabels = tokenizer([La vie est comme une bo\\u00eete de chocolat., Aujourd'hui c'est lundi.], padding=longest, return_tensors=pt).input_ids\\nloss = model(**model_inputs, labels=labels).loss\", \"performance\": {\"dataset\": \"mc4\", \"accuracy\": \"Not provided\"}, \"description\": \"ByT5 is a tokenizer-free version of Google's T5 and generally follows the architecture of MT5. ByT5 was only pre-trained on mC4 excluding any supervised training with an average span-mask of 20 UTF-8 characters. Therefore, this model has to be fine-tuned before it is usable on a downstream task. ByT5 works especially well on noisy text data, e.g., google/byt5-small significantly outperforms mt5-small on TweetQA.\"}}", "category": "generic"}
{"question_id": 410, "text": " We want our System to generate possible user queries for a document provided as a text input.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"castorini/doc2query-t5-base-msmarco\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('castorini/doc2query-t5-base-msmarco')\", \"api_arguments\": \"text, max_length\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"MS MARCO\", \"accuracy\": \"Not specified\"}, \"description\": \"A T5 model trained on the MS MARCO dataset for generating queries from documents.\"}}", "category": "generic"}
{"question_id": 411, "text": " Our client wants to create marketing slogans. Help them by completing this slogan \\\"Customer satisfaction is our top <mask>.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"roberta-large\", \"api_call\": \"pipeline('fill-mask', model='roberta-large')\", \"api_arguments\": {\"model\": \"roberta-large\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='roberta-large')\\nunmasker(Hello I'm a <mask> model.)\", \"performance\": {\"dataset\": \"GLUE\", \"accuracy\": {\"MNLI\": 90.2, \"QQP\": 92.2, \"QNLI\": 94.7, \"SST-2\": 96.4, \"CoLA\": 68.0, \"STS-B\": 96.4, \"MRPC\": 90.9, \"RTE\": 86.6}}, \"description\": \"RoBERTa is a transformers model pretrained on a large corpus of English data in a self-supervised fashion using the Masked language modeling (MLM) objective. It can be fine-tuned on a downstream task, such as sequence classification, token classification, or question answering.\"}}", "category": "generic"}
{"question_id": 412, "text": " I need a French language model to help me fill in the blanks in given sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"camembert-base\", \"api_call\": \"pipeline('fill-mask', model='camembert-base', tokenizer='camembert-base')\", \"api_arguments\": [\"model\", \"tokenizer\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline; camembert_fill_mask = pipeline('fill-mask', model='camembert-base', tokenizer='camembert-base'); results = camembert_fill_mask('Le camembert est <mask> :)')\", \"performance\": {\"dataset\": \"oscar\", \"accuracy\": \"N/A\"}, \"description\": \"CamemBERT is a state-of-the-art language model for French based on the RoBERTa model. It is available on Hugging Face in 6 different versions with varying number of parameters, amount of pretraining data, and pretraining data source domains. It can be used for Fill-Mask tasks.\"}}", "category": "generic"}
{"question_id": 413, "text": " We would like to build a semantic text search system that can find similar documents in a repository based on a given description.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/bert-base-nli-mean-tokens\", \"api_call\": \"SentenceTransformer('sentence-transformers/bert-base-nli-mean-tokens')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/bert-base-nli-mean-tokens')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 415, "text": " I want to create a playlist of similar songs based on lyrics. How can I compare the sentences and find similar ones?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"nikcheerla/nooks-amd-detection-v2-full\", \"api_call\": \"SentenceTransformer.from_pretrained('nikcheerla/nooks-amd-detection-v2-full')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": [\"sentence-transformers\", \"transformers\"], \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('{MODEL_NAME}')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model that maps sentences and paragraphs to a 768-dimensional dense vector space. It can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 416, "text": " I\\u2019m putting together a dating site where users can submit questions they'd like the matching algorithm to ask. I want to suggest questions like the ones they have already submitted. Can you provide me with a model to do that?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-MiniLM-L3-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L3-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L3-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"snli, multi_nli, ms_marco\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 417, "text": " I'm working on a phonebot, and I need the bot to be able to read a sensitive warning message to the users.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"fastspeech2-en-ljspeech\", \"api_call\": \"'TTSHubInterface.get_prediction('facebook/fastspeech2-en-ljspeech')'\", \"api_arguments\": {\"task\": \"task\", \"model\": \"model\", \"generator\": \"generator\", \"sample\": \"sample\"}, \"python_environment_requirements\": [\"fairseq\", \"IPython\"], \"example_code\": \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.text_to_speech.hub_interface import TTSHubInterface\\nimport IPython.display as ipd\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/fastspeech2-en-ljspeech,\\n arg_overrides={vocoder: hifigan, fp16: False}\\n)\\nmodel = models[0]\\nTTSHubInterface.update_cfg_with_data_cfg(cfg, task.data_cfg)\\ngenerator = task.build_generator(model, cfg)\\ntext = Hello, this is a test run.\\nsample = TTSHubInterface.get_model_input(task, text)\\nwav, rate = TTSHubInterface.get_prediction(task, model, generator, sample)\\nipd.Audio(wav, rate=rate)\", \"performance\": {\"dataset\": \"LJSpeech\", \"accuracy\": \"N/A\"}, \"description\": \"FastSpeech 2 text-to-speech model from fairseq S^2. English single-speaker female voice trained on LJSpeech.\"}}", "category": "generic"}
{"question_id": 418, "text": " Our customer wants to have this Chinese text \\\"<Chinese_text>\\\" read aloud as an audio file in female voice.\\n###Input: \\\"<Chinese_text>\\\": \\\"\\u4f60\\u597d\\uff0c\\u6b22\\u8fce\\u6765\\u5230\\u6570\\u5b57\\u4e16\\u754c\\u3002\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"facebook/tts_transformer-zh-cv7_css10\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/tts_transformer-zh-cv7_css10', arg_overrides={'vocoder': 'hifigan', 'fp16': False})\", \"api_arguments\": {\"task\": \"task\", \"model\": \"model\", \"generator\": \"generator\", \"sample\": \"sample\"}, \"python_environment_requirements\": {\"fairseq\": \"latest\"}, \"example_code\": \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.text_to_speech.hub_interface import TTSHubInterface\\nimport IPython.display as ipd\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/tts_transformer-zh-cv7_css10,\\n arg_overrides={vocoder: hifigan, fp16: False}\\n)\\nmodel = models[0]\\nTTSHubInterface.update_cfg_with_data_cfg(cfg, task.data_cfg)\\ngenerator = task.build_generator(model, cfg)\\ntext = \\nsample = TTSHubInterface.get_model_input(task, text)\\nwav, rate = TTSHubInterface.get_prediction(task, model, generator, sample)\\nipd.Audio(wav, rate=rate)\", \"performance\": {\"dataset\": \"common_voice\", \"accuracy\": \"Not provided\"}, \"description\": \"Transformer text-to-speech model from fairseq S^2. Simplified Chinese, Single-speaker female voice, Pre-trained on Common Voice v7, fine-tuned on CSS10.\"}}", "category": "generic"}
{"question_id": 419, "text": " Develop a text-to-speech model for our mobile app to read news articles for our users.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"fastspeech2-en-male1\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/fastspeech2-en-200_speaker-cv4',arg_overrides={'vocoder': 'hifigan', 'fp16': False})\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"fairseq\", \"IPython\"], \"example_code\": \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.text_to_speech.hub_interface import TTSHubInterface\\nimport IPython.display as ipd\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/fastspeech2-en-200_speaker-cv4,\\n arg_overrides={vocoder: hifigan, fp16: False}\\n)\\nmodel = models[0]\\nTTSHubInterface.update_cfg_with_data_cfg(cfg, task.data_cfg)\\ngenerator = task.build_generator(model, cfg)\\ntext = Hello, this is a test run.\\nsample = TTSHubInterface.get_model_input(task, text)\\nwav, rate = TTSHubInterface.get_prediction(task, model, generator, sample)\\nipd.Audio(wav, rate=rate)\", \"performance\": {\"dataset\": \"common_voice\", \"accuracy\": null}, \"description\": \"FastSpeech 2 text-to-speech model from fairseq S^2. English, 200 male/female voices, trained on Common Voice v4.\"}}", "category": "generic"}
{"question_id": 420, "text": " You are an Indian in Telugu pandit teaching kids how to pronounce conventional holy prayers.. Teach me mantras in Telugu synthesized by human like voice pronunciation.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"SYSPIN/Telugu_Male_TTS\", \"api_call\": \"pipeline('text-to-speech', model='SYSPIN/Telugu_Male_TTS')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Telugu Male Text-to-Speech model using the ESPnet framework, provided by Hugging Face.\"}}", "category": "generic"}
{"question_id": 421, "text": " We are a French company creating an interactive voice response system for our call centers, and we need to convert text to speech for our telephony prompts.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"facebook/tts_transformer-fr-cv7_css10\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/tts_transformer-fr-cv7_css10')\", \"api_arguments\": {\"text\": \"string\"}, \"python_environment_requirements\": [\"fairseq\"], \"example_code\": \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.text_to_speech.hub_interface import TTSHubInterface\\nimport IPython.display as ipd\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/tts_transformer-fr-cv7_css10,\\n arg_overrides={vocoder: hifigan, fp16: False}\\n)\\nmodel = models[0]\\nTTSHubInterface.update_cfg_with_data_cfg(cfg, task.data_cfg)\\ngenerator = task.build_generator(model, cfg)\\ntext = Bonjour, ceci est un test.\\nsample = TTSHubInterface.get_model_input(task, text)\\nwav, rate = TTSHubInterface.get_prediction(task, model, generator, sample)\\nipd.Audio(wav, rate=rate)\", \"performance\": {\"dataset\": \"common_voice\", \"accuracy\": \"N/A\"}, \"description\": \"Transformer text-to-speech model from fairseq S^2. French, single-speaker male voice. Pre-trained on Common Voice v7, fine-tuned on CSS10.\"}}", "category": "generic"}
{"question_id": 422, "text": " Create Japanese audio from the following text: \\\"\\u3053\\u3093\\u306b\\u3061\\u306f\\u3001\\u79c1\\u305f\\u3061\\u306f\\u3042\\u306a\\u305f\\u306e\\u52a9\\u3051\\u304c\\u5fc5\\u8981\\u3067\\u3059\\u3002\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_jvs_tts_finetune_jvs001_jsut_vits_raw_phn_jaconv_pyopenjta-truncated-178804\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('espnet/kan-bayashi_jvs_tts_finetune_jvs001_jsut_vits_raw_phn_jaconv_pyopenjta-truncated-178804')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Japanese text-to-speech model trained using the ESPnet framework. It is designed to convert text input into natural-sounding speech.\"}}", "category": "generic"}
{"question_id": 423, "text": " We need to create automated transcripts from recorded podcasts that include punctuation for better readability.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"jbetker/wav2vec2-large-robust-ft-libritts-voxpopuli\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('jbetker/wav2vec2-large-robust-ft-libritts-voxpopuli')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"https://github.com/neonbjb/ocotillo\", \"performance\": {\"dataset\": \"librispeech validation set\", \"accuracy\": \"4.45%\"}, \"description\": \"This checkpoint is a wav2vec2-large model that is useful for generating transcriptions with punctuation. It is intended for use in building transcriptions for TTS models, where punctuation is very important for prosody. This model was created by fine-tuning the facebook/wav2vec2-large-robust-ft-libri-960h checkpoint on the libritts and voxpopuli datasets with a new vocabulary that includes punctuation.\"}}", "category": "generic"}
{"question_id": 424, "text": " Convert the audio file of a phone interview to text for further analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Transformers\", \"functionality\": \"Transcription\", \"api_name\": \"facebook/wav2vec2-base-960h\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('facebook/wav2vec2-base-960h')\", \"api_arguments\": [\"input_values\"], \"python_environment_requirements\": [\"transformers\", \"datasets\", \"torch\", \"jiwer\"], \"example_code\": \"from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC\\nfrom datasets import load_dataset\\nimport torch\\nprocessor = Wav2Vec2Processor.from_pretrained('facebook/wav2vec2-base-960h')\\nmodel = Wav2Vec2ForCTC.from_pretrained('facebook/wav2vec2-base-960h')\\nds = load_dataset('patrickvonplaten/librispeech_asr_dummy', 'clean', split='validation')\\ninput_values = processor(ds[0]['audio']['array'], return_tensors='pt', padding='longest').input_values\\nlogits = model(input_values).logits\\npredicted_ids = torch.argmax(logits, dim=-1)\\ntranscription = processor.batch_decode(predicted_ids)\", \"performance\": {\"dataset\": \"LibriSpeech\", \"accuracy\": {\"clean\": 3.4, \"other\": 8.6}}, \"description\": \"Facebook's Wav2Vec2 base model pretrained and fine-tuned on 960 hours of Librispeech on 16kHz sampled speech audio. It is designed for automatic speech recognition and can transcribe audio files.\"}}", "category": "generic"}
{"question_id": 426, "text": " I want to use speech enhancement for an audio call of a coworker.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"speech-enhancement\", \"api_name\": \"speechbrain/metricgan-plus-voicebank\", \"api_call\": \"SpectralMaskEnhancement.from_hparams(source='speechbrain/metricgan-plus-voicebank', savedir='pretrained_models/metricgan-plus-voicebank')\", \"api_arguments\": {\"source\": \"speechbrain/metricgan-plus-voicebank\", \"savedir\": \"pretrained_models/metricgan-plus-voicebank\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"import torch\\nimport torchaudio\\nfrom speechbrain.pretrained import SpectralMaskEnhancement\\nenhance_model = SpectralMaskEnhancement.from_hparams(\\n source='speechbrain/metricgan-plus-voicebank',\\n savedir='pretrained_models/metricgan-plus-voicebank',\\n)\\nnoisy = enhance_model.load_audio(\\n 'speechbrain/metricgan-plus-voicebank/example.wav'\\n).unsqueeze(0)\\nenhanced = enhance_model.enhance_batch(noisy, lengths=torch.tensor([1.]))\\ntorchaudio.save('enhanced.wav', enhanced.cpu(), 16000)\", \"performance\": {\"dataset\": \"Voicebank\", \"accuracy\": {\"Test PESQ\": \"3.15\", \"Test STOI\": \"93.0\"}}, \"description\": \"MetricGAN-trained model for Enhancement\"}}", "category": "generic"}
{"question_id": 427, "text": " How do I separate the speakers from an audio file using the pre-trained ConvTasNet_Libri2Mix_sepclean_8k model from Hugging Face?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri2Mix_sepclean_8k\", \"api_call\": \"hf_hub_download(repo_id='JorisCos/ConvTasNet_Libri2Mix_sepclean_8k')\", \"api_arguments\": [\"repo_id\", \"filename\"], \"python_environment_requirements\": [\"huggingface_hub\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 14.764543634468069, \"si_sdr_imp\": 14.764029375607246, \"sdr\": 15.29337970745095, \"sdr_imp\": 15.114146605113111, \"sir\": 24.092904661115366, \"sir_imp\": 23.913669683141528, \"sar\": 16.06055906916849, \"sar_imp\": -51.980784441287454, \"stoi\": 0.9311142440593033, \"stoi_imp\": 0.21817376142710482}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 428, "text": " A travel app we work on can translate language of a guide in real-time. We are targeting Spanish-speaking tourists.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"textless_sm_sl_es\", \"api_call\": \"textless_sm_sl_es()\", \"api_arguments\": null, \"python_environment_requirements\": \"fairseq\", \"example_code\": \"https://huggingface.co/facebook/textless_sm_cs_en\", \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"A Fairseq model for audio-to-audio speech-to-speech translation.\"}}", "category": "generic"}
{"question_id": 429, "text": " Design an audio description system for a user who needs help translating spoken English audio to spoken Hokkien audio.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"xm_transformer_s2ut_en-hk\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')\", \"api_arguments\": {\"arg_overrides\": {\"config_yaml\": \"config.yaml\", \"task\": \"speech_to_text\"}, \"cache_dir\": \"cache_dir\"}, \"python_environment_requirements\": [\"fairseq\", \"huggingface_hub\", \"torchaudio\"], \"example_code\": {\"import_modules\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\"], \"load_model\": [\"cache_dir = os.getenv('HUGGINGFACE_HUB_CACHE')\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk', arg_overrides={'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, cache_dir=cache_dir)\", \"model = models[0].cpu()\", \"cfg['task'].cpu = True\"], \"generate_prediction\": [\"generator = task.build_generator([model], cfg)\", \"audio, _ = torchaudio.load('/path/to/an/audio/file')\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\"], \"speech_synthesis\": [\"library_name = 'fairseq'\", \"cache_dir = (cache_dir or (Path.home() / '.cache' / library_name).as_posix())\", \"cache_dir = snapshot_download('facebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS', cache_dir=cache_dir, library_name=library_name)\", \"x = hub_utils.from_pretrained(cache_dir, 'model.pt', '.', archive_map=CodeHiFiGANVocoder.hub_models(), config_yaml='config.json', fp16=False, is_vocoder=True)\", \"with open(f'{x['args']['data']}/config.json') as f:\", \"  vocoder_cfg = json.load(f)\", \"assert (len(x['args']['model_path']) == 1), 'Too many vocoder models in the input'\", \"vocoder = CodeHiFiGANVocoder(x['args']['model_path'][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"]}, \"performance\": {\"dataset\": \"MuST-C\", \"accuracy\": \"Not specified\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq: English-Hokkien. Trained with supervised data in TED domain, and weakly supervised data in TED and Audiobook domain.\"}}", "category": "generic"}
{"question_id": 430, "text": " Implement a method to perform speech-to-speech translation between Hokkien and English using the xm_transformer_s2ut_hk-en model.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"Speech-to-speech translation\", \"api_name\": \"xm_transformer_s2ut_hk-en\", \"api_call\": \"S2THubInterface()\", \"api_arguments\": {\"task\": \"speech_to_text\", \"model\": \"facebook/xm_transformer_s2ut_hk-en\", \"generator\": \"task.build_generator([model], cfg)\", \"sample\": \"S2THubInterface.get_model_input(task, audio)\"}, \"python_environment_requirements\": {\"fairseq\": \"latest\", \"torchaudio\": \"latest\", \"huggingface_hub\": \"latest\"}, \"example_code\": \"import json\\nimport os\\nfrom pathlib import Path\\nimport IPython.display as ipd\\nfrom fairseq import hub_utils\\nfrom fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.speech_to_text.hub_interface import S2THubInterface\\nfrom fairseq.models.text_to_speech import CodeHiFiGANVocoder\\nfrom fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\\nfrom huggingface_hub import snapshot_download\\nimport torchaudio\\ncache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/xm_transformer_s2ut_hk-en,\\n arg_overrides={config_yaml: config.yaml, task: speech_to_text},\\n cache_dir=cache_dir,\\n)\\nmodel = models[0].cpu()\\ncfg[task].cpu = True\\ngenerator = task.build_generator([model], cfg)\\naudio, _ = torchaudio.load(/path/to/an/audio/file)\\nsample = S2THubInterface.get_model_input(task, audio)\\nunit = S2THubInterface.get_prediction(task, model, generator, sample)\\nlibrary_name = fairseq\\ncache_dir = (\\n cache_dir or (Path.home() / .cache / library_name).as_posix()\\n)\\ncache_dir = snapshot_download(\\n ffacebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur, cache_dir=cache_dir, library_name=library_name\\n)\\nx = hub_utils.from_pretrained(\\n cache_dir,\\n model.pt,\\n .,\\n archive_map=CodeHiFiGANVocoder.hub_models(),\\n config_yaml=config.json,\\n fp16=False,\\n is_vocoder=True,\\n)\\nwith open(f{x['args']['data']}/config.json) as f:\\n vocoder_cfg = json.load(f)\\nassert (\\n len(x[args][model_path]) == 1\\n), Too many vocoder models in the input\\nvocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\\ntts_model = VocoderHubInterface(vocoder_cfg, vocoder)\\ntts_sample = tts_model.get_model_input(unit)\\nwav, sr = tts_model.get_prediction(tts_sample)\\nipd.Audio(wav, rate=sr)\", \"performance\": {\"dataset\": \"TED, drama, TAT domain\", \"accuracy\": \"Not provided\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq for Hokkien-English. Trained with supervised data in TED, drama, TAT domain, and weakly supervised data in drama domain.\"}}", "category": "generic"}
{"question_id": 431, "text": " A company wants to analyze the sentiment of the customer feedback in their Spanish-speaking call center. Generate a script for this task.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Classification\", \"api_name\": \"hackathon-pln-es/wav2vec2-base-finetuned-sentiment-classification-MESD\", \"api_call\": \"Wav2Vec2ForSequenceClassification.from_pretrained('hackathon-pln-es/wav2vec2-base-finetuned-sentiment-classification-MESD')\", \"api_arguments\": {\"model_name\": \"hackathon-pln-es/wav2vec2-base-finetuned-sentiment-classification-MESD\"}, \"python_environment_requirements\": {\"transformers\": \"4.17.0\", \"pytorch\": \"1.10.0+cu111\", \"datasets\": \"2.0.0\", \"tokenizers\": \"0.11.6\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"MESD\", \"accuracy\": 0.9308}, \"description\": \"This model is a fine-tuned version of facebook/wav2vec2-base on the MESD dataset. It is trained to classify underlying sentiment of Spanish audio/speech.\"}}", "category": "generic"}
{"question_id": 432, "text": " Our company is working on an AI-powered language learning app for German. We need to build a feature that classifies emotions in German speech.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"padmalcom/wav2vec2-large-emotion-detection-german\", \"api_call\": \"pipeline('audio-classification', model='padmalcom/wav2vec2-large-emotion-detection-german')\", \"api_arguments\": \"audio_file\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"from transformers import pipeline\\naudio_classifier = pipeline('audio-classification', model='padmalcom/wav2vec2-large-emotion-detection-german')\\nresult = audio_classifier(audio_file)\", \"performance\": {\"dataset\": \"emo-DB\", \"accuracy\": \"Not provided\"}, \"description\": \"This wav2vec2 based emotion detection model is trained on the emo-DB dataset. It can classify emotions in German audio files into seven classes: anger, boredom, disgust, fear, happiness, sadness, and neutral.\"}}", "category": "generic"}
{"question_id": 433, "text": " We are a voice assistant service, and we need to verify the speaker identity for enhanced security when users access the system.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/wav2vec2-base-superb-sid\", \"api_call\": \"pipeline('audio-classification', model='superb/wav2vec2-base-superb-sid')\", \"api_arguments\": {\"model\": \"superb/wav2vec2-base-superb-sid\"}, \"python_environment_requirements\": {\"datasets\": \"load_dataset\", \"transformers\": \"pipeline\"}, \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, si, split=test)\\nclassifier = pipeline(audio-classification, model=superb/wav2vec2-base-superb-sid)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"VoxCeleb1\", \"accuracy\": 0.7518}, \"description\": \"This is a ported version of S3PRL's Wav2Vec2 for the SUPERB Speaker Identification task. The base model is wav2vec2-base, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 434, "text": " I run a call center and I need a system that can identify the person on the other end of the line by analyzing their voice.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"wav2vec2-base-superb-sv\", \"api_call\": \"AutoModelForAudioXVector.from_pretrained('anton-l/wav2vec2-base-superb-sv')\", \"api_arguments\": \"anton-l/wav2vec2-base-superb-sv\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import AutoProcessor, AutoModelForAudioXVector\\nprocessor = AutoProcessor.from_pretrained(anton-l/wav2vec2-base-superb-sv)\\nmodel = AutoModelForAudioXVector.from_pretrained(anton-l/wav2vec2-base-superb-sv)\", \"performance\": {\"dataset\": \"superb\", \"accuracy\": \"More information needed\"}, \"description\": \"This is a ported version of S3PRL's Wav2Vec2 for the SUPERB Speaker Verification task. The base model is wav2vec2-large-lv60, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 435, "text": " A transcription service wants to identify which speaker said which words in an audio file. Help them with this task.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"pyannote.audio\", \"functionality\": \"Speaker Diarization\", \"api_name\": \"philschmid/pyannote-speaker-diarization-endpoint\", \"api_call\": \"Pipeline.from_pretrained('philschmid/pyannote-speaker-diarization-endpoint')\", \"api_arguments\": [\"num_speakers\", \"min_speakers\", \"max_speakers\", \"segmentation_onset\"], \"python_environment_requirements\": \"pyannote.audio 2.0\", \"example_code\": [\"from pyannote.audio import Pipeline\", \"pipeline = Pipeline.from_pretrained(pyannote/speaker-diarization@2022.07)\", \"diarization = pipeline(audio.wav)\", \"with open(audio.rttm, w) as rttm:\", \"  diarization.write_rttm(rttm)\"], \"performance\": {\"dataset\": [{\"name\": \"AISHELL-4\", \"accuracy\": {\"DER%\": 14.61, \"FA%\": 3.31, \"Miss%\": 4.35, \"Conf%\": 6.95}}, {\"name\": \"AMI Mix-Headset only_words\", \"accuracy\": {\"DER%\": 18.21, \"FA%\": 3.28, \"Miss%\": 11.07, \"Conf%\": 3.87}}, {\"name\": \"AMI Array1-01 only_words\", \"accuracy\": {\"DER%\": 29.0, \"FA%\": 2.71, \"Miss%\": 21.61, \"Conf%\": 4.68}}, {\"name\": \"CALLHOME Part2\", \"accuracy\": {\"DER%\": 30.24, \"FA%\": 3.71, \"Miss%\": 16.86, \"Conf%\": 9.66}}, {\"name\": \"DIHARD 3 Full\", \"accuracy\": {\"DER%\": 20.99, \"FA%\": 4.25, \"Miss%\": 10.74, \"Conf%\": 6.0}}, {\"name\": \"REPERE Phase 2\", \"accuracy\": {\"DER%\": 12.62, \"FA%\": 1.55, \"Miss%\": 3.3, \"Conf%\": 7.76}}, {\"name\": \"VoxConverse v0.0.2\", \"accuracy\": {\"DER%\": 12.76, \"FA%\": 3.45, \"Miss%\": 3.85, \"Conf%\": 5.46}}]}, \"description\": \"A speaker diarization pipeline that uses pyannote.audio to perform voice activity detection, speaker change detection, and overlapped speech detection. It can handle fully automatic processing with no manual intervention and can be fine-tuned with various hyperparameters.\"}}", "category": "generic"}
{"question_id": 436, "text": " I am running a chain of wine stores and I want to categorize wines and recommend them based on their quality.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Scikit-learn\", \"functionality\": \"Wine Quality classification\", \"api_name\": \"osanseviero/wine-quality\", \"api_call\": \"joblib.load(cached_download(hf_hub_url('julien-c/wine-quality', 'sklearn_model.joblib')))\", \"api_arguments\": \"X\", \"python_environment_requirements\": [\"huggingface_hub\", \"joblib\", \"pandas\"], \"example_code\": \"from huggingface_hub import hf_hub_url, cached_download\\nimport joblib\\nimport pandas as pd\\nREPO_ID = julien-c/wine-quality\\nFILENAME = sklearn_model.joblib\\nmodel = joblib.load(cached_download(\\n hf_hub_url(REPO_ID, FILENAME)\\n))\\ndata_file = cached_download(\\n hf_hub_url(REPO_ID, winequality-red.csv)\\n)\\nwinedf = pd.read_csv(data_file, sep=;)\\nX = winedf.drop([quality], axis=1)\\nY = winedf[quality]\\nprint(X[:3])\\nlabels = model.predict(X[:3])\", \"performance\": {\"dataset\": \"winequality-red.csv\", \"accuracy\": 0.6616635397123202}, \"description\": \"A Simple Example of Scikit-learn Pipeline for Wine Quality classification. Inspired by https://towardsdatascience.com/a-simple-example-of-pipeline-in-machine-learning-with-scikit-learn-e726ffbb6976 by Saptashwa Bhattacharyya.\"}}", "category": "generic"}
{"question_id": 437, "text": " I own an e-commerce platform and I need to predict which customers will make a purchase based on their browsing behavior.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Transformers\", \"api_name\": \"abhishek/autotrain-iris-logistic-regression\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"scikit-learn/iris\", \"accuracy\": 0.9}, \"description\": \"This model is trained for multi-class classification using logistic regression on the iris dataset. It is trained with AutoTrain and has a CO2 emissions of 0.0006300767567816624 grams. The model has an accuracy of 0.9 and can be used with the Hugging Face Inference API.\"}}", "category": "generic"}
{"question_id": 438, "text": " Predict the income category of a person, based on their demographic information. The model should use Tensorflow decision trees to make binary classifications.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Keras\", \"functionality\": \"Binary Classification\", \"api_name\": \"TF_Decision_Trees\", \"api_call\": \"TF_Decision_Trees(input_features, target)\", \"api_arguments\": [\"input_features\", \"target\"], \"python_environment_requirements\": [\"tensorflow >= 7.0\"], \"example_code\": \"https://github.com/tdubon/TF-GB-Forest/blob/c0cf4c7e3e29d819b996cfe4eecc1f2728115e52/TFDecisionTrees_Final.ipynb\", \"performance\": {\"dataset\": \"Census-Income Data Set\", \"accuracy\": 96.57}, \"description\": \"Use TensorFlow's Gradient Boosted Trees model in binary classification of structured data. Build a decision forests model by specifying the input feature usage. Implement a custom Binary Target encoder as a Keras Preprocessing layer to encode the categorical features with respect to their target value co-occurrences, and then use the encoded features to build a decision forests model. The model is trained on the US Census Income Dataset containing approximately 300k instances with 41 numerical and categorical variables. The task is to determine whether a person makes over 50k a year.\"}}", "category": "generic"}
{"question_id": 439, "text": " A travel agency needs a system to predict whether a client's vacation will be successful based on their chosen destination, accommodation, and travel style. We want to provide suggestions for clients who may need additional support.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Scikit-learn\", \"functionality\": \"Binary Classification\", \"api_name\": \"danupurnomo/dummy-titanic\", \"api_call\": \"load_model(cached_download(hf_hub_url('danupurnomo/dummy-titanic', 'titanic_model.h5')))\", \"api_arguments\": [\"new_data\"], \"python_environment_requirements\": [\"huggingface_hub\", \"joblib\", \"pandas\", \"numpy\", \"tensorflow\"], \"example_code\": \"from huggingface_hub import hf_hub_url, cached_download\\nimport joblib\\nimport pandas as pd\\nimport numpy as np\\nfrom tensorflow.keras.models import load_model\\nREPO_ID = 'danupurnomo/dummy-titanic'\\nPIPELINE_FILENAME = 'final_pipeline.pkl'\\nTF_FILENAME = 'titanic_model.h5'\\nmodel_pipeline = joblib.load(cached_download(\\n hf_hub_url(REPO_ID, PIPELINE_FILENAME)\\n))\\nmodel_seq = load_model(cached_download(\\n hf_hub_url(REPO_ID, TF_FILENAME)\\n))\", \"performance\": {\"dataset\": \"Titanic\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a binary classifier for predicting whether a passenger on the Titanic survived or not, based on features such as passenger class, age, sex, fare, and more.\"}}", "category": "generic"}
{"question_id": 440, "text": " A new city planning company wants to estimate carbon emissions for different types of buildings to provide sustainable living solutions. We need a model to classify the carbon emissions.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"tejas23/autotrain-amx2-1702259725\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": {\"accuracy\": 0.827}}, \"description\": \"Multi-class Classification Model for Carbon Emissions\"}}", "category": "generic"}
{"question_id": 441, "text": " We want to evaluate the carbon footprint of a construction project based on the tabular data of material consumption.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"tejas23/autotrain-amx2-1702259728\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"Validation Metrics\", \"accuracy\": 0.831}, \"description\": \"A multi-class classification model trained using AutoTrain to predict CO2 emissions based on tabular data.\"}}", "category": "generic"}
{"question_id": 442, "text": " Our company is an environmental consultancy firm. Determine the carbon emissions of different facilities based on the provided data.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Hugging Face\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"kochetkovIT/autotrain-ironhack-49741119788\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"kochetkovIT/autotrain-data-ironhack\", \"accuracy\": {\"Loss\": 2.603, \"R2\": 0.013, \"MSE\": 6.776, \"MAE\": 1.666, \"RMSLE\": 0.502}}, \"description\": \"A tabular regression model trained using AutoTrain to predict carbon emissions (in grams) with an R2 score of 0.013.\"}}", "category": "generic"}
{"question_id": 443, "text": " I need assistance in predicting carbon emissions of a city based on historical data. Use the dataset provided to predict future carbon emissions.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"pcoloc/autotrain-mikrotik-7-7-1860563588\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"pcoloc/autotrain-data-mikrotik-7-7\", \"accuracy\": {\"Loss\": 48.213, \"R2\": 0.654, \"MSE\": 2324.518, \"MAE\": 32.634, \"RMSLE\": 0.586}}, \"description\": \"A tabular regression model trained with AutoTrain to predict carbon emissions based on input features.\"}}", "category": "generic"}
{"question_id": 444, "text": " We have some clients asking for estimating CO2 emissions based on their historic data, which is in a CSV file.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"autotrain-dragino-7-7-1860763606\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"pcoloc/autotrain-data-dragino-7-7\", \"accuracy\": {\"Loss\": 84.433, \"R2\": 0.54, \"MSE\": 7129.004, \"MAE\": 62.626, \"RMSLE\": 0.418}}, \"description\": \"A tabular regression model trained using AutoTrain for predicting carbon emissions. The model is trained on the pcoloc/autotrain-data-dragino-7-7 dataset and has an R2 score of 0.540.\"}}", "category": "generic"}
{"question_id": 445, "text": " Determine the electricity consumption of a residential area based on historical data.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Scikit-learn\", \"functionality\": \"skops\", \"api_name\": \"rajistics/MAPIE-TS-Electricity\", \"api_call\": \"RandomForestRegressor(max_depth=10, n_estimators=50, random_state=59)\", \"api_arguments\": {\"bootstrap\": \"True\", \"ccp_alpha\": \"0.0\", \"criterion\": \"squared_error\", \"max_depth\": \"10\", \"max_features\": \"1.0\", \"max_leaf_nodes\": \"\", \"max_samples\": \"\", \"min_impurity_decrease\": \"0.0\", \"min_samples_leaf\": \"1\", \"min_samples_split\": \"2\", \"min_weight_fraction_leaf\": \"0.0\", \"n_estimators\": \"50\", \"n_jobs\": \"\", \"oob_score\": \"False\", \"random_state\": \"59\", \"verbose\": \"0\", \"warm_start\": \"False\"}, \"python_environment_requirements\": \"\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A RandomForestRegressor model for electricity consumption prediction.\"}}", "category": "generic"}
{"question_id": 446, "text": " A soccer simulation company wants to use a reinforcement learning agent that can play SoccerTwos effectively.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Unity ML-Agents\", \"functionality\": \"Train and play SoccerTwos\", \"api_name\": \"Raiden-1001/poca-Soccerv7.1\", \"api_call\": \"mlagents-load-from-hf --repo-id='Raiden-1001/poca-Soccerv7.1' --local-dir='./downloads'\", \"api_arguments\": [\"your_configuration_file_path.yaml\", \"run_id\"], \"python_environment_requirements\": [\"ml-agents\"], \"example_code\": \"mlagents-learn <your_configuration_file_path.yaml> --run-id=<run_id> --resume\", \"performance\": {\"dataset\": \"SoccerTwos\", \"accuracy\": \"Not provided\"}, \"description\": \"A trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library.\"}}", "category": "generic"}
{"question_id": 447, "text": " Our company is developing a game, and they want to include an AI agent to play the game. We need to evaluate its performance on the CartPole-v1 environment for consistency.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"CartPole-v1\", \"api_name\": \"dqn-CartPole-v1\", \"api_call\": \"load_from_hub(repo_id='sb3/dqn-CartPole-v1',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"logs\"], \"python_environment_requirements\": [\"rl_zoo3\", \"stable-baselines3\", \"stable-baselines3-contrib\"], \"example_code\": \"python train.py --algo dqn --env CartPole-v1 -f logs/\", \"performance\": {\"dataset\": \"CartPole-v1\", \"accuracy\": \"500.00 +/- 0.00\"}, \"description\": \"This is a trained model of a DQN agent playing CartPole-v1 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 448, "text": " We need help from a AI to continuously develop a virtual environment for our production robots.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning Robotics\", \"framework\": \"Hugging Face\", \"functionality\": \"Inference API\", \"api_name\": \"Antheia/Hanna\", \"api_call\": \"pipeline('robotics', model='Antheia/Hanna')\", \"api_arguments\": \"model\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"openai/webgpt_comparisons\", \"accuracy\": \"\"}, \"description\": \"Antheia/Hanna is a reinforcement learning model for robotics tasks, trained on the openai/webgpt_comparisons dataset.\"}}", "category": "generic"}
{"question_id": 449, "text": " We are a news agency that wants to extract useful features from Korean news articles for a content recommendation service.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Feature Extraction\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"kobart-base-v2\", \"api_call\": \"BartModel.from_pretrained('gogamza/kobart-base-v2')\", \"api_arguments\": {\"tokenizer\": \"PreTrainedTokenizerFast.from_pretrained('gogamza/kobart-base-v2')\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"tokenizers\": \"latest\"}, \"example_code\": \"from transformers import PreTrainedTokenizerFast, BartModel\\ntokenizer = PreTrainedTokenizerFast.from_pretrained('gogamza/kobart-base-v2')\\nmodel = BartModel.from_pretrained('gogamza/kobart-base-v2')\", \"performance\": {\"dataset\": \"NSMC\", \"accuracy\": 0.901}, \"description\": \"KoBART is a Korean encoder-decoder language model trained on over 40GB of Korean text using the BART architecture. It can be used for feature extraction and has been trained on a variety of data sources, including Korean Wiki, news, books, and more.\"}}", "category": "generic"}
{"question_id": 450, "text": " We want to automatically generate hashtags for the provided image URL to improve social media post performance.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"google/vit-base-patch16-224-in21k\", \"api_call\": \"ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-224-in21k\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import ViTImageProcessor, ViTModel\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224-in21k')\\nmodel = ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\\ninputs = processor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"ImageNet-21k\", \"accuracy\": \"Refer to tables 2 and 5 of the original paper\"}, \"description\": \"The Vision Transformer (ViT) is a transformer encoder model (BERT-like) pretrained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al. and first released in this repository. However, the weights were converted from the timm repository by Ross Wightman, who already converted the weights from JAX to PyTorch. Credits go to him.\"}}", "category": "generic"}
{"question_id": 451, "text": " I am building a recommendation engine for TV shows. Can you evaluate the TV shows using a BERT-based model trained on sentence embedding to find the most similar TV shows based on description?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"setu4993/LaBSE\", \"api_call\": \"BertModel.from_pretrained('setu4993/LaBSE')\", \"api_arguments\": [\"english_sentences\", \"italian_sentences\", \"japanese_sentences\"], \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"import torch\\nfrom transformers import BertModel, BertTokenizerFast\\ntokenizer = BertTokenizerFast.from_pretrained('setu4993/LaBSE')\\nmodel = BertModel.from_pretrained('setu4993/LaBSE')\\nmodel = model.eval()\\nenglish_sentences = [\\n 'dog',\\n 'Puppies are nice.',\\n 'I enjoy taking long walks along the beach with my dog.',\\n]\\nenglish_inputs = tokenizer(english_sentences, return_tensors='pt', padding=True)\\nwith torch.no_grad():\\n english_outputs = model(**english_inputs)\\nenglish_embeddings = english_outputs.pooler_output\", \"performance\": {\"dataset\": \"CommonCrawl and Wikipedia\", \"accuracy\": \"Not Specified\"}, \"description\": \"Language-agnostic BERT Sentence Encoder (LaBSE) is a BERT-based model trained for sentence embedding for 109 languages. The pre-training process combines masked language modeling with translation language modeling. The model is useful for getting multilingual sentence embeddings and for bi-text retrieval.\"}}", "category": "generic"}
{"question_id": 452, "text": " I want to create a solution that can answer questions related to an image of my pet dogs.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"blip2-opt-2.7b\", \"api_call\": \"Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"api_arguments\": {\"img_url\": \"https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg\", \"question\": \"how many dogs are in the picture?\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": {\"import_requests\": \"import requests\", \"import_PIL\": \"from PIL import Image\", \"import_transformers\": \"from transformers import BlipProcessor, Blip2ForConditionalGeneration\", \"load_processor\": \"processor = BlipProcessor.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_model\": \"model = Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_image\": \"raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\", \"process_inputs\": \"inputs = processor(raw_image, question, return_tensors='pt')\", \"generate_output\": \"out = model.generate(**inputs)\", \"decode_output\": \"print(processor.decode(out[0], skip_special_tokens=True))\"}, \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not specified\"}, \"description\": \"BLIP-2 model, leveraging OPT-2.7b (a large language model with 2.7 billion parameters). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, given the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 453, "text": " Design an explanation on how to use Pix2Struct to analyze and generate text based on visuals such as graphs and charts.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"google/pix2struct-chartqa-base\", \"api_call\": \"Pix2StructForConditionalGeneration.from_pretrained('google/pix2struct-chartqa-base')\", \"api_arguments\": [\"t5x_checkpoint_path\", \"pytorch_dump_path\", \"use-large\"], \"python_environment_requirements\": \"transformers\", \"example_code\": \"python convert_pix2struct_checkpoint_to_pytorch.py --t5x_checkpoint_path PATH_TO_T5X_CHECKPOINTS --pytorch_dump_path PATH_TO_SAVE\", \"performance\": {\"dataset\": \"ChartQA\", \"accuracy\": \"Not provided\"}, \"description\": \"Pix2Struct is an image encoder - text decoder model that is trained on image-text pairs for various tasks, including image captionning and visual question answering. The model is pretrained by learning to parse masked screenshots of web pages into simplified HTML. It can achieve state-of-the-art results in six out of nine tasks across four domains: documents, illustrations, user interfaces, and natural images.\"}}", "category": "generic"}
{"question_id": 454, "text": " Design a product that allows users to read street signs in a foreign language.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"mgp-str\", \"api_call\": \"MgpstrForSceneTextRecognition.from_pretrained('alibaba-damo/mgp-str-base')\", \"api_arguments\": {\"model_name\": \"alibaba-damo/mgp-str-base\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\"]}, \"example_code\": \"from transformers import MgpstrProcessor, MgpstrForSceneTextRecognition\\nimport requests\\nfrom PIL import Image\\nprocessor = MgpstrProcessor.from_pretrained('alibaba-damo/mgp-str-base')\\nmodel = MgpstrForSceneTextRecognition.from_pretrained('alibaba-damo/mgp-str-base')\\nurl = https://i.postimg.cc/ZKwLg2Gw/367-14.png\\nimage = Image.open(requests.get(url, stream=True).raw).convert(RGB)\\npixel_values = processor(images=image, return_tensors=pt).pixel_values\\noutputs = model(pixel_values)\\ngenerated_text = processor.batch_decode(outputs.logits)['generated_text']\", \"performance\": {\"dataset\": \"MJSynth and SynthText\", \"accuracy\": null}, \"description\": \"MGP-STR is a pure vision Scene Text Recognition (STR) model, consisting of ViT and specially designed A^3 modules. It is trained on MJSynth and SynthText datasets and can be used for optical character recognition (OCR) on text images.\"}}", "category": "generic"}
{"question_id": 455, "text": " I have a text question about an image, and I would like to receive an appropriate answer.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\", \"api_call\": \"pipeline('visual-question-answering', model='JosephusCheung/GuanacoVQAOnConsumerHardware')\", \"api_arguments\": {\"model\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\", \"tokenizer\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"torch\": \"latest\"}, \"example_code\": \"vqa(image_path, question)\", \"performance\": {\"dataset\": \"JosephusCheung/GuanacoVQADataset\", \"accuracy\": \"unknown\"}, \"description\": \"A Visual Question Answering model trained on the GuanacoVQADataset, designed to work on consumer hardware like Colab Free T4 GPU. The model can be used to answer questions about images.\"}}", "category": "generic"}
{"question_id": 456, "text": " Create software that extracts answers from input documents when given a set of questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased-finetuned-docvqa\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('tiennvcs/layoutlmv2-base-uncased-finetuned-docvqa')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers==4.12.2\", \"torch==1.8.0+cu101\", \"datasets==1.14.0\", \"tokenizers==0.10.3\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 1.194}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-base-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 457, "text": " We received a scanned document with a lot of information. We need to go through it and find answers to specific questions. Create a program to extract information from the document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"tiny-random-LayoutLMv3ForQuestionAnswering\", \"api_call\": \"LayoutLMv3ForQuestionAnswering.from_pretrained('hf-tiny-model-private/tiny-random-LayoutLMv3ForQuestionAnswering')\", \"api_arguments\": {\"image\": \"path/to/image/file\"}, \"python_environment_requirements\": [\"transformers\", \"torch\", \"tensorflow\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random LayoutLMv3 model for document question answering. Can be used with the Hugging Face Inference API.\"}}", "category": "generic"}
{"question_id": 458, "text": " In a pharmaceutical company, we are working on developing a new drug, and I want you to help classify the molecular structures of my dataset.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Graph Machine Learning\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Graph Classification\", \"api_name\": \"graphormer-base-pcqm4mv2\", \"api_call\": \"AutoModel.from_pretrained('clefourrier/graphormer-base-pcqm4mv2')\", \"api_arguments\": \"pretrained_model_name\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"See the Graph Classification with Transformers tutorial.\", \"performance\": {\"dataset\": \"PCQM4M-LSCv2\", \"accuracy\": \"Not provided\"}, \"description\": \"The Graphormer is a graph Transformer model, pretrained on PCQM4M-LSCv2. Developed by Microsoft, it is designed for graph classification tasks or graph representation tasks, such as molecule modeling.\"}}", "category": "generic"}
{"question_id": 459, "text": " Calculate the distance between the objects in an image for an autonomous vehicle driving in a parking lot.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-kitti-finetuned-diode-221214-123047\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-kitti-finetuned-diode-221214-123047')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers==4.24.0\", \"torch==1.12.1+cu116\", \"tokenizers==0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3497, \"Mae\": 0.2847, \"Rmse\": 0.3977, \"Abs Rel\": 0.3477, \"Log Mae\": 0.1203, \"Log Rmse\": 0.1726, \"Delta1\": 0.5217, \"Delta2\": 0.8246, \"Delta3\": 0.9436}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-kitti on the diode-subset dataset. It is used for depth estimation in computer vision applications.\"}}", "category": "generic"}
{"question_id": 460, "text": " We want a technology to be developed in the field of autonomous vehicles. Provide an example to estimate the depth of the environment using monocular images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-082237\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221122-082237')\", \"api_arguments\": \"pretrained_model_name\", \"python_environment_requirements\": \"transformers>=4.24.0, pytorch>=1.12.1, tokenizers>=0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3421, \"Mae\": 0.27, \"Rmse\": 0.4042, \"Abs Rel\": 0.3279, \"Log Mae\": 0.1132, \"Log Rmse\": 0.1688, \"Delta1\": 0.5839, \"Delta2\": 0.8408, \"Delta3\": 0.9309}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset. It is used for depth estimation tasks.\"}}", "category": "generic"}
{"question_id": 461, "text": " As a construction company, we want to have a system to estimate the depth of images taken from different construction sites.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221228-072509\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221228-072509')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"Transformers 4.24.0, Pytorch 1.12.1+cu116, Datasets 2.8.0, Tokenizers 0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.4012, \"Mae\": 0.403, \"Rmse\": 0.6173, \"Abs Rel\": 0.3487, \"Log Mae\": 0.1574, \"Log Rmse\": 0.211, \"Delta1\": 0.4308, \"Delta2\": 0.6997, \"Delta3\": 0.8249}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 462, "text": " Our team has built a Japanese language learning app for students. We want to make sure that the user-submitted image is an anime art created by humans and not AI-generated.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"saltacc/anime-ai-detect\", \"api_call\": \"pipeline('image-classification', model='saltacc/anime-ai-detect')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"aibooru and imageboard sites\", \"accuracy\": \"96%\"}, \"description\": \"A BEiT classifier to see if anime art was made by an AI or a human.\"}}", "category": "generic"}
{"question_id": 463, "text": " We need to classify the type of an image for an inventory.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"facebook/regnet-y-008\", \"api_call\": \"RegNetForImageClassification.from_pretrained('zuppif/regnet-y-040')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"zuppif/regnet-y-040\"}, \"python_environment_requirements\": {\"transformers\": \"AutoFeatureExtractor, RegNetForImageClassification\", \"torch\": \"torch\", \"datasets\": \"load_dataset\"}, \"example_code\": \"from transformers import AutoFeatureExtractor, RegNetForImageClassification\\nimport torch\\nfrom datasets import load_dataset\\ndataset = load_dataset(huggingface/cats-image)\\nimage = dataset[test][image][0]\\nfeature_extractor = AutoFeatureExtractor.from_pretrained(zuppif/regnet-y-040)\\nmodel = RegNetForImageClassification.from_pretrained(zuppif/regnet-y-040)\\ninputs = feature_extractor(image, return_tensors=pt)\\nwith torch.no_grad():\\n... logits = model(**inputs).logits\\npredicted_label = logits.argmax(-1).item()\\nprint(model.config.id2label[predicted_label])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"RegNet model trained on imagenet-1k. It was introduced in the paper Designing Network Design Spaces and first released in this repository.\"}}", "category": "generic"}
{"question_id": 464, "text": " Imagine we run an e-commerce platform and we need to tag new products with relevant categories based on their product images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"timm/mobilenetv3_large_100.ra_in1k\", \"api_call\": \"timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\", \"api_arguments\": {\"pretrained\": \"True\"}, \"python_environment_requirements\": {\"timm\": \"latest\"}, \"example_code\": \"from urllib.request import urlopen\\nfrom PIL import Image\\nimport timm\\nimg = Image.open(urlopen(\\n 'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\\n))\\nmodel = timm.create_model('mobilenetv3_large_100.ra_in1k', pretrained=True)\\nmodel = model.eval()\\ndata_config = timm.data.resolve_model_data_config(model)\\ntransforms = timm.data.create_transform(**data_config, is_training=False)\\noutput = model(transforms(img).unsqueeze(0))\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"A MobileNet-v3 image classification model. Trained on ImageNet-1k in timm using recipe template described below. Recipe details: RandAugment RA recipe. Inspired by and evolved from EfficientNet RandAugment recipes. Published as B recipe in ResNet Strikes Back. RMSProp (TF 1.0 behaviour) optimizer, EMA weight averaging. Step (exponential decay w/ staircase) LR schedule with warmup.\"}}", "category": "generic"}
{"question_id": 465, "text": " We are building an AI-based camera system to ensure safety on a construction site. Detect workers wearing hard hats in a given image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-hard-hat-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-hard-hat-detection')\", \"api_arguments\": {\"image\": \"URL or local path to the image\"}, \"python_environment_requirements\": [\"ultralyticsplus==0.0.24\", \"ultralytics==8.0.23\"], \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8m-hard-hat-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"hard-hat-detection\", \"accuracy\": 0.811}, \"description\": \"A YOLOv8 model for detecting hard hats in images. The model can distinguish between 'Hardhat' and 'NO-Hardhat' classes. It can be used to ensure safety compliance in construction sites or other industrial environments where hard hats are required.\"}}", "category": "generic"}
{"question_id": 466, "text": " My client needs help with security. They have a surveillance camera set up and we need to identify if any unknown person enters their property.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-valorant-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-valorant-detection')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic_nms\": false, \"max_det\": 1000}, \"python_environment_requirements\": \"pip install ultralyticsplus==0.0.23 ultralytics==8.0.21\", \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8m-valorant-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"valorant-object-detection\", \"accuracy\": 0.965}, \"description\": \"A YOLOv8 model for object detection in Valorant game, trained on a custom dataset. It detects dropped spike, enemy, planted spike, and teammate objects.\"}}", "category": "generic"}
{"question_id": 467, "text": " We need a system to control the access into parking lot. Analyze an image and find out the license plate numbers to detect whether it's an authorized vehicle or not.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"License Plate Detection\", \"api_name\": \"keremberke/yolov5m-license-plate\", \"api_call\": \"yolov5.load('keremberke/yolov5m-license-plate')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic\": false, \"multi_label\": false, \"max_det\": 1000, \"img\": \"https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg\", \"size\": 640, \"augment\": true}, \"python_environment_requirements\": \"pip install -U yolov5\", \"example_code\": [\"import yolov5\", \"model = yolov5.load('keremberke/yolov5m-license-plate')\", \"model.conf = 0.25\", \"model.iou = 0.45\", \"model.agnostic = False\", \"model.multi_label = False\", \"model.max_det = 1000\", \"img = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model(img, size=640)\", \"results = model(img, augment=True)\", \"predictions = results.pred[0]\", \"boxes = predictions[:, :4]\", \"scores = predictions[:, 4]\", \"categories = predictions[:, 5]\", \"results.show()\", \"results.save(save_dir='results/')\"], \"performance\": {\"dataset\": \"keremberke/license-plate-object-detection\", \"accuracy\": 0.988}, \"description\": \"A YOLOv5 model for license plate detection trained on a custom dataset. The model can detect license plates in images with high accuracy.\"}}", "category": "generic"}
{"question_id": 468, "text": " Analyze an image of an urban scene to identify and separate regions with different semantics, such as streets, pedestrians, buildings, and vehicles.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Semantic Segmentation\", \"api_name\": \"nvidia/segformer-b2-finetuned-cityscapes-1024-1024\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\", \"api_arguments\": {\"images\": \"image\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"PIL\": \"latest\", \"requests\": \"latest\"}, \"example_code\": \"from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nfeature_extractor = SegformerFeatureExtractor.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\\nmodel = SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b2-finetuned-cityscapes-1024-1024')\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = feature_extractor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\\nlogits = outputs.logits\", \"performance\": {\"dataset\": \"Cityscapes\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 469, "text": " We are developing an application to help customers visualize themselves wearing clothes available on our e-commerce website. We need identification of clothing items in the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"mattmdjaga/segformer_b2_clothes\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\", \"matplotlib\", \"torch\"], \"example_code\": \"from transformers import AutoFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nimport matplotlib.pyplot as plt\\nimport torch.nn as nn\\nextractor = AutoFeatureExtractor.from_pretrained('mattmdjaga/segformer_b2_clothes')\\nmodel = SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\\nurl = 'https://plus.unsplash.com/premium_photo-1673210886161-bfcc40f54d1f?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8cGVyc29uJTIwc3RhbmRpbmd8ZW58MHx8MHx8&amp;w=1000&amp;q=80'\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = extractor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\\nlogits = outputs.logits.cpu()\\nupsampled_logits = nn.functional.interpolate(logits, size=image.size[::-1], mode='bilinear', align_corners=False)\\npred_seg = upsampled_logits.argmax(dim=1)[0]\\nplt.imshow(pred_seg)\", \"performance\": {\"dataset\": \"mattmdjaga/human_parsing_dataset\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on ATR dataset for clothes segmentation.\"}}", "category": "generic"}
{"question_id": 470, "text": " We need an image segmentation solution for our smart city planning project. The solution should be able to handle different types of segmentation tasks, from semantic to instance to panoptic.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"shi-labs/oneformer_ade20k_swin_tiny\", \"api_call\": \"OneFormerForUniversalSegmentation.from_pretrained('shi-labs/oneformer_ade20k_swin_tiny')\", \"api_arguments\": {\"images\": \"image\", \"task_inputs\": [\"semantic\", \"instance\", \"panoptic\"], \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\\nfrom PIL import Image\\nimport requests\\nurl = https://huggingface.co/datasets/shi-labs/oneformer_demo/blob/main/ade20k.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = OneFormerProcessor.from_pretrained(shi-labs/oneformer_ade20k_swin_tiny)\\nmodel = OneFormerForUniversalSegmentation.from_pretrained(shi-labs/oneformer_ade20k_swin_tiny)\\nsemantic_inputs = processor(images=image, task_inputs=[semantic], return_tensors=pt)\\nsemantic_outputs = model(**semantic_inputs)\\npredicted_semantic_map = processor.post_process_semantic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\\ninstance_inputs = processor(images=image, task_inputs=[instance], return_tensors=pt)\\ninstance_outputs = model(**instance_inputs)\\npredicted_instance_map = processor.post_process_instance_segmentation(outputs, target_sizes=[image.size[::-1]])[0][segmentation]\\npanoptic_inputs = processor(images=image, task_inputs=[panoptic], return_tensors=pt)\\npanoptic_outputs = model(**panoptic_inputs)\\npredicted_semantic_map = processor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0][segmentation]\", \"performance\": {\"dataset\": \"ADE20k\", \"accuracy\": \"Not provided\"}, \"description\": \"OneFormer is the first multi-task universal image segmentation framework. It needs to be trained only once with a single universal architecture, a single model, and on a single dataset, to outperform existing specialized models across semantic, instance, and panoptic segmentation tasks. OneFormer uses a task token to condition the model on the task in focus, making the architecture task-guided for training, and task-dynamic for inference, all with a single model.\"}}", "category": "generic"}
{"question_id": 471, "text": " We have a road safety app that helps identify potholes. Can we use an image segmentation model to detect if there are potholes in the pictures of roads?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"keremberke/yolov8s-pothole-segmentation\", \"api_call\": \"YOLO('keremberke/yolov8s-pothole-segmentation')\", \"api_arguments\": {\"image\": \"URL or local path to the image\"}, \"python_environment_requirements\": {\"ultralyticsplus\": \"0.0.23\", \"ultralytics\": \"8.0.21\"}, \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8s-pothole-segmentation')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nprint(results[0].masks)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"pothole-segmentation\", \"accuracy\": {\"mAP@0.5(box)\": 0.928, \"mAP@0.5(mask)\": 0.928}}, \"description\": \"A YOLOv8 model for pothole segmentation. This model detects potholes in images and outputs bounding boxes and masks for the detected potholes.\"}}", "category": "generic"}
{"question_id": 472, "text": " We are making a mobile app related to fitness. We need to estimate the human pose from an image of a user performing an exercise.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Human Pose Estimation\", \"api_name\": \"lllyasviel/sd-controlnet-openpose\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-openpose')\", \"api_arguments\": {\"text\": \"chef in the kitchen\", \"image\": \"image\", \"num_inference_steps\": 20}, \"python_environment_requirements\": {\"diffusers\": \"pip install diffusers\", \"transformers\": \"pip install transformers\", \"accelerate\": \"pip install accelerate\", \"controlnet_aux\": \"pip install controlnet_aux\"}, \"example_code\": \"from PIL import Image\\nfrom diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\\nimport torch\\nfrom controlnet_aux import OpenposeDetector\\nfrom diffusers.utils import load_image\\nopenpose = OpenposeDetector.from_pretrained('lllyasviel/ControlNet')\\nimage = load_image(https://huggingface.co/lllyasviel/sd-controlnet-openpose/resolve/main/images/pose.png)\\nimage = openpose(image)\\ncontrolnet = ControlNetModel.from_pretrained(\\n lllyasviel/sd-controlnet-openpose, torch_dtype=torch.float16\\n)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_xformers_memory_efficient_attention()\\npipe.enable_model_cpu_offload()\\nimage = pipe(chef in the kitchen, image, num_inference_steps=20).images[0]\\nimage.save('images/chef_pose_out.png')\", \"performance\": {\"dataset\": \"200k pose-image, caption pairs\", \"accuracy\": \"Not specified\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Human Pose Estimation. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 473, "text": " I wish to edit my images by detecting straight lines and controlling the diffusion models in the image's diffusion process.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"ControlNet - M-LSD Straight Line Version\", \"api_name\": \"lllyasviel/sd-controlnet-mlsd\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd')\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": {\"diffusers\": \"pip install diffusers\", \"transformers\": \"pip install transformers\", \"accelerate\": \"pip install accelerate\", \"controlnet_aux\": \"pip install controlnet_aux\"}, \"example_code\": {\"import\": [\"from PIL import Image\", \"from diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\", \"import torch\", \"from controlnet_aux import MLSDdetector\", \"from diffusers.utils import load_image\"], \"setup\": [\"mlsd = MLSDdetector.from_pretrained('lllyasviel/ControlNet')\", \"image = load_image(https://huggingface.co/lllyasviel/sd-controlnet-mlsd/resolve/main/images/room.png)\", \"image = mlsd(image)\", \"controlnet = ControlNetModel.from_pretrained(lllyasviel/sd-controlnet-mlsd, torch_dtype=torch.float16)\", \"pipe = StableDiffusionControlNetPipeline.from_pretrained(runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)\", \"pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\"], \"execution\": [\"pipe.enable_xformers_memory_efficient_attention()\", \"pipe.enable_model_cpu_offload()\", \"image = pipe(room, image, num_inference_steps=20).images[0]\", \"image.save('images/room_mlsd_out.png')\"]}, \"performance\": {\"dataset\": \"600k edge-image, caption pairs generated from Places2\", \"accuracy\": \"Not specified\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on M-LSD straight line detection. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 474, "text": " A photographer wants to create artistic interpretations of some of her pictures. Let's help her to get variated styles of her image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image-to-Image\", \"api_name\": \"GreeneryScenery/SheepsControlV5\", \"api_call\": \"pipeline('image-to-image', model='GreeneryScenery/SheepsControlV5')\", \"api_arguments\": {\"input_image\": \"path/to/image/file\"}, \"python_environment_requirements\": {\"huggingface_hub\": \">=0.0.17\", \"transformers\": \">=4.13.0\", \"torch\": \">=1.10.0\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"poloclub/diffusiondb\", \"accuracy\": \"Not provided\"}, \"description\": \"SheepsControlV5 is an image-to-image model trained on the poloclub/diffusiondb dataset. It is designed for transforming input images into a different style or representation.\"}}", "category": "generic"}
{"question_id": 475, "text": " We have a client that manages a car website for selling used cars and they need new images of cars for the website.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Synthesis\", \"api_name\": \"google/ddpm-cifar10-32\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-cifar10-32').\", \"api_arguments\": \"None\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-cifar10-32\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by nonequilibrium thermodynamics. It is used for high-quality image synthesis. The model supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm.\"}}", "category": "generic"}
{"question_id": 476, "text": " I am interested in building a wall of generated pictures for my gallery. My specifications include a size of 256x256 pixels.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"google/ddpm-church-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-church-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-church-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) for high-quality image synthesis. Trained on the unconditional CIFAR10 dataset and 256x256 LSUN. Supports different noise schedulers like scheduling_ddpm, scheduling_ddim, and scheduling_pndm for inference.\"}}", "category": "generic"}
{"question_id": 477, "text": " We are a product company selling personalized gadgets, and we want to build a recommender system that shows generated, high-resolution images of human faces on our website.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"google/ncsnpp-celebahq-256\", \"api_call\": \"DiffusionPipeline.from_pretrained('google/ncsnpp-celebahq-256')\", \"api_arguments\": {\"model_id\": \"google/ncsnpp-celebahq-256\"}, \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"!pip install diffusers\\nfrom diffusers import DiffusionPipeline\\nmodel_id = google/ncsnpp-celebahq-256\\nsde_ve = DiffusionPipeline.from_pretrained(model_id)\\nimage = sde_ve()[sample]\\nimage[0].save(sde_ve_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR-10\", \"accuracy\": {\"Inception_score\": 9.89, \"FID\": 2.2, \"likelihood\": 2.99}}, \"description\": \"Score-Based Generative Modeling through Stochastic Differential Equations (SDE) for unconditional image generation. This model achieves record-breaking performance on CIFAR-10 and demonstrates high fidelity generation of 1024 x 1024 images for the first time from a score-based generative model.\"}}", "category": "generic"}
{"question_id": 478, "text": " I want to build an AI-based software that can identify the activities or actions in a video clip.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base')\", \"api_arguments\": [\"video\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-base)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base)\\npixel_values = processor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": \"To be provided\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches.\"}}", "category": "generic"}
{"question_id": 479, "text": " The marketing team wants a tool to quickly classify new advertisement videos.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"facebook/timesformer-base-finetuned-k600\", \"api_call\": \"TimesformerForVideoClassification.from_pretrained('facebook/timesformer-base-finetuned-k600')\", \"api_arguments\": [\"images\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoImageProcessor, TimesformerForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(8, 3, 224, 224))\\nprocessor = AutoImageProcessor.from_pretrained(facebook/timesformer-base-finetuned-k600)\\nmodel = TimesformerForVideoClassification.from_pretrained(facebook/timesformer-base-finetuned-k600)\\ninputs = processor(images=video, return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-600\", \"accuracy\": null}, \"description\": \"TimeSformer model pre-trained on Kinetics-600. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 480, "text": " A sports league wants to analyze their videos and extract information on game highlights.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"facebook/timesformer-hr-finetuned-k600\", \"api_call\": \"TimesformerForVideoClassification.from_pretrained('facebook/timesformer-hr-finetuned-k600')\", \"api_arguments\": {\"images\": \"video\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"numpy\", \"torch\"], \"example_code\": \"from transformers import AutoImageProcessor, TimesformerForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 448, 448))\\nprocessor = AutoImageProcessor.from_pretrained(facebook/timesformer-hr-finetuned-k600)\\nmodel = TimesformerForVideoClassification.from_pretrained(facebook/timesformer-hr-finetuned-k600)\\ninputs = processor(images=video, return_tensors=pt)\\nwith torch.no_grad():\\n  outputs = model(**inputs)\\n  logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-600\", \"accuracy\": \"Not provided\"}, \"description\": \"TimeSformer model pre-trained on Kinetics-600. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository. The model can be used for video classification into one of the 600 possible Kinetics-600 labels.\"}}", "category": "generic"}
{"question_id": 481, "text": " We are a sports broadcasting company, and we need to automatically identify the sports events taking place in the videos we receive.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base-short-finetuned-kinetics\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-base-short-finetuned-kinetics')\", \"api_arguments\": [\"video\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained('MCG-NJU/videomae-base-short-finetuned-kinetics')\\nmodel = VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-base-short-finetuned-kinetics')\\ninputs = processor(video, return_tensors='pt')\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint('Predicted class:', model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": {\"top-1\": 79.4, \"top-5\": 94.1}}, \"description\": \"VideoMAE model pre-trained for 800 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 482, "text": " My organization wants to create a video categorization tool to classify and categorize various videos. Utilize the appropriate API to build this video classifier.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"videomae-base-ssv2\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base-short-ssv2')\", \"api_arguments\": \"video\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import VideoMAEFeatureExtractor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nfeature_extractor = VideoMAEFeatureExtractor.from_pretrained(MCG-NJU/videomae-base-short-ssv2)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base-short-ssv2)\\npixel_values = feature_extractor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Something-Something-v2\", \"accuracy\": \"\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks: if you have a dataset of labeled videos for instance, you can train a standard classifier by placing a linear layer on top of the pre-trained encoder. One typically places a linear layer on top of the [CLS] token, as the last hidden state of this token can be seen as a representation of an entire video.\"}}", "category": "generic"}
{"question_id": 483, "text": " We have a surveillance camera in our backyard. We would like to analyze the captured videos to recognize the activities taking place in the backyard.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"sayakpaul/videomae-base-finetuned-ucf101-subset\", \"api_call\": \"AutoModelForVideoClassification.from_pretrained('sayakpaul/videomae-base-finetuned-ucf101-subset')\", \"api_arguments\": {\"learning_rate\": 5e-05, \"train_batch_size\": 8, \"eval_batch_size\": 8, \"seed\": 42, \"optimizer\": \"Adam with betas=(0.9,0.999) and epsilon=1e-08\", \"lr_scheduler_type\": \"linear\", \"lr_scheduler_warmup_ratio\": 0.1, \"training_steps\": 148}, \"python_environment_requirements\": {\"Transformers\": \"4.24.0\", \"Pytorch\": \"1.12.1+cu113\", \"Datasets\": \"2.6.1\", \"Tokenizers\": \"0.13.2\"}, \"example_code\": \"from transformers import AutoModelForVideoClassification, AutoTokenizer\\nmodel = AutoModelForVideoClassification.from_pretrained('sayakpaul/videomae-base-finetuned-ucf101-subset')\\ntokenizer = AutoTokenizer.from_pretrained('sayakpaul/videomae-base-finetuned-ucf101-subset')\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": 0.8645}, \"description\": \"This model is a fine-tuned version of MCG-NJU/videomae-base on an unknown dataset. It achieves the following results on the evaluation set: Loss: 0.3992, Accuracy: 0.8645.\"}}", "category": "generic"}
{"question_id": 484, "text": " We need to classify an image's content and check if it contains a cat or a dog.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"openai/clip-vit-base-patch16\", \"api_call\": \"CLIPModel.from_pretrained('openai/clip-vit-base-patch16')\", \"api_arguments\": [\"text\", \"images\", \"return_tensors\", \"padding\"], \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(openai/clip-vit-base-patch16)\\nprocessor = CLIPProcessor.from_pretrained(openai/clip-vit-base-patch16)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(text=[a photo of a cat, a photo of a dog], images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [\"Food101\", \"CIFAR10\", \"CIFAR100\", \"Birdsnap\", \"SUN397\", \"Stanford Cars\", \"FGVC Aircraft\", \"VOC2007\", \"DTD\", \"Oxford-IIIT Pet dataset\", \"Caltech101\", \"Flowers102\", \"MNIST\", \"SVHN\", \"IIIT5K\", \"Hateful Memes\", \"SST-2\", \"UCF101\", \"Kinetics700\", \"Country211\", \"CLEVR Counting\", \"KITTI Distance\", \"STL-10\", \"RareAct\", \"Flickr30\", \"MSCOCO\", \"ImageNet\", \"ImageNet-A\", \"ImageNet-R\", \"ImageNet Sketch\", \"ObjectNet (ImageNet Overlap)\", \"Youtube-BB\", \"ImageNet-Vid\"], \"accuracy\": \"varies depending on the dataset\"}, \"description\": \"The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.\"}}", "category": "generic"}
{"question_id": 485, "text": " Analyze the type of plants in the image provided and provide the name of the probable plant.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"CLIPModel.from_pretrained('laion/CLIP-convnext_base_w-laion2B-s13B-b82K')\", \"api_call\": \"CLIPModel.from_pretrained('laion/CLIP-convnext_base_w-laion2B-s13B-b82K')\", \"api_arguments\": {\"image_path\": \"path to the image file\", \"labels\": \"list of possible class names\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; clip = pipeline('image-classification', model='laion/CLIP-convnext_base_w-laion2B-s13B-b82K'); clip('path/to/image.jpg', ['cat', 'dog'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"70.8 - 71.7%\"}, \"description\": \"A series of CLIP ConvNeXt-Base (w/ wide embed dim) models trained on subsets LAION-5B using OpenCLIP. The models achieve between 70.8 and 71.7 zero-shot top-1 accuracy on ImageNet-1k. The models can be used for zero-shot image classification, image and text retrieval, and other related tasks.\"}}", "category": "generic"}
{"question_id": 486, "text": " I want to organize my images based on the scene content. The categories I want are landscape, cityscape, beach, forest, and animals.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_large_d.laion2B-s26B-b102K-augreg\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-convnext_large_d.laion2B-s26B-b102K-augreg')\", \"api_arguments\": {\"image_path\": \"./path/to/image.jpg\", \"class_names\": \"class1,class2,class3\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nclip = pipeline('image-classification', model='laion/CLIP-convnext_large_d.laion2B-s26B-b102K-augreg')\\nclip('./path/to/image.jpg', 'class1,class2,class3')\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"75.9%\"}, \"description\": \"A series of CLIP ConvNeXt-Large (w/ extra text depth, vision MLP head) models trained on LAION-2B (english), a subset of LAION-5B, using OpenCLIP. The models are trained at 256x256 image resolution and achieve a 75.9 top-1 zero-shot accuracy on ImageNet-1k.\"}}", "category": "generic"}
{"question_id": 487, "text": " We run an online store for selling electronic devices. We need to classify product images from our inventory and organize them.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')\", \"api_arguments\": {\"image_path\": \"Path to the image file\", \"class_names\": \"List of comma-separated class names\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; classifier = pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft'); classifier('path/to/image.jpg', ['class1', 'class2'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"75.9-76.9%\"}, \"description\": \"A series of CLIP ConvNeXt-Large models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models achieve between 75.9 and 76.9 top-1 zero-shot accuracy on ImageNet-1k.\"}}", "category": "generic"}
{"question_id": 488, "text": " Our customer wants to analyze the sentiment of their customers' feedback. The feedback is in Spanish.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"finiteautomata/beto-sentiment-analysis\", \"api_call\": \"pipeline('sentiment-analysis', model='finiteautomata/beto-sentiment-analysis')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"Hugging Face Transformers library\", \"example_code\": \"\", \"performance\": {\"dataset\": \"TASS 2020 corpus\", \"accuracy\": \"\"}, \"description\": \"Model trained with TASS 2020 corpus (around ~5k tweets) of several dialects of Spanish. Base model is BETO, a BERT model trained in Spanish. Uses POS, NEG, NEU labels.\"}}", "category": "generic"}
{"question_id": 489, "text": " A stock investor is looking to analyze the sentiment of a stock forum, such as StockTwits, to gain insights into the market sentiment for a specific stock.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Inferencing for stock-related comments\", \"api_name\": \"zhayunduo/roberta-base-stocktwits-finetuned\", \"api_call\": \"RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\", \"api_arguments\": {\"model\": \"RobertaForSequenceClassification\", \"tokenizer\": \"RobertaTokenizer\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import RobertaForSequenceClassification, RobertaTokenizer\\nfrom transformers import pipeline\\nimport pandas as pd\\nimport emoji\\ntokenizer_loaded = RobertaTokenizer.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\\nmodel_loaded = RobertaForSequenceClassification.from_pretrained('zhayunduo/roberta-base-stocktwits-finetuned')\\nnlp = pipeline(text-classification, model=model_loaded, tokenizer=tokenizer_loaded)\\nsentences = pd.Series(['just buy','just sell it','entity rocket to the sky!','go down','even though it is going up, I still think it will not keep this trend in the near future'])\\nsentences = list(sentences)\\nresults = nlp(sentences)\\nprint(results)\", \"performance\": {\"dataset\": \"stocktwits\", \"accuracy\": 0.9343}, \"description\": \"This model is fine-tuned with roberta-base model on 3,200,000 comments from stocktwits, with the user-labeled tags 'Bullish' or 'Bearish'.\"}}", "category": "generic"}
{"question_id": 490, "text": " A forum moderator wants a tool to assess user-generated comments for toxic content. How does this model help?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"martin-ha/toxic-comment-model\", \"api_call\": \"pipeline(model='martin-ha/toxic-comment-model')\", \"api_arguments\": {\"model_path\": \"martin-ha/toxic-comment-model\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer, TextClassificationPipeline\\nmodel_path = martin-ha/toxic-comment-model\\ntokenizer = AutoTokenizer.from_pretrained(model_path)\\nmodel = AutoModelForSequenceClassification.from_pretrained(model_path)\\npipeline = TextClassificationPipeline(model=model, tokenizer=tokenizer)\\nprint(pipeline('This is a test text.'))\", \"performance\": {\"dataset\": \"held-out test set\", \"accuracy\": 0.94, \"f1-score\": 0.59}, \"description\": \"This model is a fine-tuned version of the DistilBERT model to classify toxic comments.\"}}", "category": "generic"}
{"question_id": 491, "text": " I am developing a news analysis platform. I need to predict the named entities from the articles.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"dslim/bert-base-NER-uncased\", \"api_call\": \"pipeline('ner', model='dslim/bert-base-NER-uncased')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"nlp('My name is John and I live in New York.')\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A pretrained BERT model for Named Entity Recognition (NER) on uncased text. It can be used to extract entities such as person names, locations, and organizations from text.\"}}", "category": "generic"}
{"question_id": 492, "text": " We need to analyze the user's text for extracting entities and improve our virtual assistant interaction.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Entity Extraction\", \"api_name\": \"904029577\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-name_all-904029577', use_auth_token=True)\", \"api_arguments\": {\"inputs\": \"I love AutoTrain\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTokenClassification\", \"tokenizer\": \"AutoTokenizer\"}, \"example_code\": \"from transformers import AutoModelForTokenClassification, AutoTokenizer\\nmodel = AutoModelForTokenClassification.from_pretrained(ismail-lucifer011/autotrain-name_all-904029577, use_auth_token=True)\\ntokenizer = AutoTokenizer.from_pretrained(ismail-lucifer011/autotrain-name_all-904029577, use_auth_token=True)\\ninputs = tokenizer(I love AutoTrain, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"ismail-lucifer011/autotrain-data-name_all\", \"accuracy\": 0.9989316041363876}, \"description\": \"This model is trained using AutoTrain for entity extraction. It is based on the DistilBert architecture and has a CO2 Emissions of 0.8375653425894861 grams.\"}}", "category": "generic"}
{"question_id": 493, "text": " Extract the named entities from a given text snippet.\\n###Input: \\\"On June 7th, Jane Smith visited the Empire State Building in New York with an entry fee of 35 dollars.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english-ontonotes\", \"api_call\": \"SequenceTagger.load('flair/ner-english-ontonotes')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\ntagger = SequenceTagger.load(flair/ner-english-ontonotes)\\nsentence = Sentence(On September 1st George Washington won 1 dollar.)\\ntagger.predict(sentence)\\nprint(sentence)\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"Ontonotes\", \"accuracy\": \"89.27\"}, \"description\": \"This is the 18-class NER model for English that ships with Flair. It predicts 18 tags such as cardinal value, date value, event name, building name, geo-political entity, language name, law name, location name, money name, affiliation, ordinal value, organization name, percent value, person name, product name, quantity value, time value, and name of work of art. Based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 494, "text": " As a surveillance analyst, my main task this week is to find out all the names and locations mentioned in the online chat rooms.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Entity Extraction\", \"api_name\": \"903929564\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-job_all-903929564', use_auth_token=True)\", \"api_arguments\": {\"inputs\": \"I love AutoTrain\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTokenClassification, AutoTokenizer\"}, \"example_code\": \"from transformers import AutoModelForTokenClassification, AutoTokenizer\\nmodel = AutoModelForTokenClassification.from_pretrained(ismail-lucifer011/autotrain-job_all-903929564, use_auth_token=True)\\ntokenizer = AutoTokenizer.from_pretrained(ismail-lucifer011/autotrain-job_all-903929564, use_auth_token=True)\\ninputs = tokenizer(I love AutoTrain, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"ismail-lucifer011/autotrain-data-job_all\", \"accuracy\": 0.9989412009896035}, \"description\": \"A Token Classification model trained using AutoTrain for Entity Extraction. The model is based on distilbert and achieves high accuracy, precision, recall, and F1 score.\"}}", "category": "generic"}
{"question_id": 495, "text": " I need a program to identify the entities like persons, locations, organizations, and other names in a given German text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-german\", \"api_call\": \"SequenceTagger.load('flair/ner-german')\", \"api_arguments\": [\"Sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\n# load tagger\\ntagger = SequenceTagger.load('flair/ner-german')\\n# make example sentence\\nsentence = Sentence('George Washington ging nach Washington')\\n# predict NER tags\\ntagger.predict(sentence)\\n# print sentence\\nprint(sentence)\\n# print predicted NER spans\\nprint('The following NER tags are found:')\\n# iterate over entities and print\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"conll2003\", \"accuracy\": \"87.94\"}, \"description\": \"This is the standard 4-class NER model for German that ships with Flair. It predicts 4 tags: PER (person name), LOC (location name), ORG (organization name), and MISC (other name). The model is based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 496, "text": " We are a multi-national company that would like to better understand global events and extract relevant named entities across 9 languages (de, en, es, fr, it, nl, pl, pt, ru). We would like to utilize a pre-trained NER model.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Babelscape/wikineural-multilingual-ner\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Babelscape/wikineural-multilingual-ner')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained(Babelscape/wikineural-multilingual-ner)\", \"tokenizer\": \"AutoTokenizer.from_pretrained(Babelscape/wikineural-multilingual-ner)\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(Babelscape/wikineural-multilingual-ner)\\nmodel = AutoModelForTokenClassification.from_pretrained(Babelscape/wikineural-multilingual-ner)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = My name is Wolfgang and I live in Berlin\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": \"Babelscape/wikineural-multilingual-ner\", \"accuracy\": \"span-based F1-score up to 6 points over previous state-of-the-art systems for data creation\"}, \"description\": \"A multilingual Named Entity Recognition (NER) model fine-tuned on the WikiNEuRal dataset, supporting 9 languages (de, en, es, fr, it, nl, pl, pt, ru). It is based on the mBERT architecture and trained on all 9 languages jointly. The model can be used with the Hugging Face Transformers pipeline for NER tasks.\"}}", "category": "generic"}
{"question_id": 497, "text": " We have a multimedia app in the Korean language. To deal with customer queries automatically, we want to incorporate question answering capability.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"monologg/koelectra-small-v2-distilled-korquad-384\", \"api_call\": \"pipeline('question-answering', model='monologg/koelectra-small-v2-distilled-korquad-384')\", \"api_arguments\": {\"model\": \"monologg/koelectra-small-v2-distilled-korquad-384\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"nlp(question='your_question', context='your_context')\", \"performance\": {\"dataset\": \"KorQuAD\", \"accuracy\": \"Not provided\"}, \"description\": \"A Korean Question Answering model based on Electra and trained on the KorQuAD dataset.\"}}", "category": "generic"}
{"question_id": 498, "text": " Guide me to create a quiz project where I will summarize an article into a paragraph and from the summary I will develop a question with some multiple options. I need to check the correct answer for that question.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bert-large-cased-whole-word-masking-finetuned-squad\", \"api_call\": \"AutoModel.from_pretrained('bert-large-cased-whole-word-masking-finetuned-squad')\", \"api_arguments\": {\"model_name_or_path\": \"bert-large-cased-whole-word-masking\", \"dataset_name\": \"squad\", \"do_train\": true, \"do_eval\": true, \"learning_rate\": 3e-05, \"num_train_epochs\": 2, \"max_seq_length\": 384, \"doc_stride\": 128, \"output_dir\": \"./examples/models/wwm_cased_finetuned_squad/\", \"per_device_eval_batch_size\": 3, \"per_device_train_batch_size\": 3}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='bert-large-cased-whole-word-masking-finetuned-squad')\\nresult = qa_pipeline({'context': 'This is a context example.', 'question': 'What is this example for?'})\\nprint(result)\", \"performance\": {\"dataset\": [{\"name\": \"BookCorpus\", \"accuracy\": \"N/A\"}, {\"name\": \"English Wikipedia\", \"accuracy\": \"N/A\"}]}, \"description\": \"BERT large model (cased) whole word masking finetuned on SQuAD. This model is cased and trained with a new technique: Whole Word Masking. After pre-training, this model was fine-tuned on the SQuAD dataset.\"}}", "category": "generic"}
{"question_id": 499, "text": " I have a website text about technology and I want to know if it represents a positive sentiment or a negative one.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"valhalla/distilbart-mnli-12-6\", \"api_call\": \"pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\", \"api_arguments\": \"text, candidate_labels\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\\nresult = nlp('The movie was great!', ['positive', 'negative'])\\nprint(result)\", \"performance\": {\"dataset\": \"MNLI\", \"accuracy\": {\"matched_acc\": \"89.19\", \"mismatched_acc\": \"89.01\"}}, \"description\": \"distilbart-mnli is the distilled version of bart-large-mnli created using the No Teacher Distillation technique proposed for BART summarisation by Huggingface. It is designed for zero-shot classification tasks.\"}}", "category": "generic"}
{"question_id": 500, "text": " Translate a French website description containing information about the company, services, and copyright notice into English.\\n###Input: \\\"Bienvenue sur notre site ! Nous sommes une entreprise sp\\u00e9cialis\\u00e9e dans la gestion des projets informatiques et la cr\\u00e9ation de logiciels sur mesure. Nos services incluent la conception, le d\\u00e9veloppement, la maintenance et le support 24/7. Tous droits r\\u00e9serv\\u00e9s.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-fr-en\", \"api_call\": \"pipeline('translation_fr_to_en', model='Helsinki-NLP/opus-mt-fr-en')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"translation_pipeline('Bonjour, comment \\u00e7a va?')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newsdiscussdev2015-enfr.fr.en\": 33.1, \"newsdiscusstest2015-enfr.fr.en\": 38.7, \"newssyscomb2009.fr.en\": 30.3, \"news-test2008.fr.en\": 26.2, \"newstest2009.fr.en\": 30.2, \"newstest2010.fr.en\": 32.2, \"newstest2011.fr.en\": 33.0, \"newstest2012.fr.en\": 32.8, \"newstest2013.fr.en\": 33.9, \"newstest2014-fren.fr.en\": 37.8, \"Tatoeba.fr.en\": 57.5}}}, \"description\": \"Helsinki-NLP/opus-mt-fr-en is a machine translation model trained to translate from French to English. It is based on the Marian NMT framework and trained on the OPUS dataset.\"}}", "category": "generic"}
{"question_id": 501, "text": " We have a list of documents written in multiple Romance languages, including texts in French, Spanish, and Italian. We want to make these texts accessible to our English-speaking audience by translating them.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-ROMANCE-en\", \"api_call\": \"MarianMTModel.from_pretrained('Helsinki-NLP/opus-mt-ROMANCE-en')\", \"api_arguments\": [\"source languages\", \"target languages\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": 62.2, \"chr-F\": 0.75}}, \"description\": \"A model for translating Romance languages to English, trained on the OPUS dataset. It supports multiple source languages such as French, Spanish, Portuguese, Italian, and Romanian, among others. The model is based on the transformer architecture and uses normalization and SentencePiece for pre-processing.\"}}", "category": "generic"}
{"question_id": 502, "text": " We have an international audience for our website and require our website content to be translated into multiple languages for better understanding.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"facebook/nllb-200-distilled-600M\", \"api_call\": \"pipeline('translation_xx_to_yy', model='facebook/nllb-200-distilled-600M')\", \"api_arguments\": [\"model\", \"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline; translator = pipeline('translation_xx_to_yy', model='facebook/nllb-200-distilled-600M'); translator('Hello World')\", \"performance\": {\"dataset\": \"Flores-200\", \"accuracy\": \"BLEU, spBLEU, chrF++\"}, \"description\": \"NLLB-200 is a machine translation model primarily intended for research in machine translation, especially for low-resource languages. It allows for single sentence translation among 200 languages. The model was trained on general domain text data and is not intended to be used with domain specific texts, such as medical domain or legal domain. The model is not intended to be used for document translation.\"}}", "category": "generic"}
{"question_id": 503, "text": " I am working for the review section of a book company. I want to convert a book summary into a positive book review.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation, Summarization, Question Answering, Sentiment Analysis\", \"api_name\": \"t5-3b\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('t5-3b')\", \"api_arguments\": \"input_text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"input_text = 'translate English to French: The quick brown fox jumps over the lazy dog'; inputs = tokenizer.encode(input_text, return_tensors='pt'); outputs = model.generate(inputs); translated_text = tokenizer.decode(outputs[0])\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"See research paper, Table 14\"}, \"description\": \"T5-3B is a Text-To-Text Transfer Transformer (T5) model with 3 billion parameters. It is designed for various NLP tasks such as translation, summarization, question answering, and sentiment analysis. The model is pre-trained on the Colossal Clean Crawled Corpus (C4) and fine-tuned on multiple supervised and unsupervised tasks.\"}}", "category": "generic"}
{"question_id": 504, "text": " We are a company that wants to expand globally. We need to translate our website content from English to Italian.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-en-it\", \"api_call\": \"pipeline('translation_en_to_it', model='Helsinki-NLP/opus-mt-en-it')\", \"api_arguments\": {\"source_language\": \"en\", \"target_language\": \"it\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; translator = pipeline('translation_en_to_it', model='Helsinki-NLP/opus-mt-en-it'); translator('Hello, world!')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"newssyscomb2009.en.it\": {\"BLEU\": 30.9, \"chr-F\": 0.606}, \"newstest2009.en.it\": {\"BLEU\": 31.9, \"chr-F\": 0.604}, \"Tatoeba.en.it\": {\"BLEU\": 48.2, \"chr-F\": 0.695}}}, \"description\": \"A Transformer-based English to Italian translation model trained on the OPUS dataset. This model can be used for translation tasks using the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 505, "text": " Our company is working on a news website. We want to present summaries of news articles written in French to the users. \\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"moussaKam/barthez-orangesum-abstract\", \"api_call\": \"BarthezModel.from_pretrained('moussaKam/barthez-orangesum-abstract')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"orangeSum\", \"accuracy\": \"\"}, \"description\": \"Barthez model finetuned on orangeSum for abstract generation in French language\"}}", "category": "generic"}
{"question_id": 506, "text": " We are an international business and need to translate our documents from French to Spanish.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-fr-es\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('Helsinki-NLP/opus-mt-fr-es')\", \"api_arguments\": {\"source_languages\": \"fr\", \"target_languages\": \"es\"}, \"python_environment_requirements\": {\"PyTorch\": \"1.0.0\", \"TensorFlow\": \"2.0\", \"Transformers\": \"4.0.0\"}, \"example_code\": \"translation('Bonjour, comment \\u00e7a va?')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newssyscomb2009.fr.es\": 34.3, \"news-test2008.fr.es\": 32.5, \"newstest2009.fr.es\": 31.6, \"newstest2010.fr.es\": 36.5, \"newstest2011.fr.es\": 38.3, \"newstest2012.fr.es\": 38.1, \"newstest2013.fr.es\": 34.0, \"Tatoeba.fr.es\": 53.2}, \"chr-F\": {\"newssyscomb2009.fr.es\": 0.601, \"news-test2008.fr.es\": 0.583, \"newstest2009.fr.es\": 0.586, \"newstest2010.fr.es\": 0.616, \"newstest2011.fr.es\": 0.622, \"newstest2012.fr.es\": 0.619, \"newstest2013.fr.es\": 0.587, \"Tatoeba.fr.es\": 0.709}}}, \"description\": \"A French to Spanish translation model trained on the OPUS dataset using the Hugging Face Transformers library. The model is based on the transformer-align architecture and uses normalization and SentencePiece for pre-processing.\"}}", "category": "generic"}
{"question_id": 507, "text": " The company needs to summarize articles for its news application. Provide guidelines to use PEGASUS for this purpose.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"google/pegasus-large\", \"api_call\": \"pipeline('summarization', model='google/pegasus-large')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline('summarization', model='google/pegasus-large')\\nsummary = summarizer('your_text_here')\", \"performance\": {\"dataset\": [{\"name\": \"xsum\", \"accuracy\": \"47.60/24.83/39.64\"}, {\"name\": \"cnn_dailymail\", \"accuracy\": \"44.16/21.56/41.30\"}, {\"name\": \"newsroom\", \"accuracy\": \"45.98/34.20/42.18\"}, {\"name\": \"multi_news\", \"accuracy\": \"47.65/18.75/24.95\"}, {\"name\": \"gigaword\", \"accuracy\": \"39.65/20.47/36.76\"}, {\"name\": \"wikihow\", \"accuracy\": \"46.39/22.12/38.41\"}, {\"name\": \"reddit_tifu\", \"accuracy\": \"27.99/9.81/22.94\"}, {\"name\": \"big_patent\", \"accuracy\": \"52.29/33.08/41.66\"}, {\"name\": \"arxiv\", \"accuracy\": \"44.21/16.95/25.67\"}, {\"name\": \"pubmed\", \"accuracy\": \"45.97/20.15/28.25\"}, {\"name\": \"aeslc\", \"accuracy\": \"37.68/21.25/36.51\"}, {\"name\": \"billsum\", \"accuracy\": \"59.67/41.58/47.59\"}]}, \"description\": \"google/pegasus-large is a pre-trained model for abstractive text summarization based on the PEGASUS architecture. It is trained on a mixture of C4 and HugeNews datasets and uses a sentencepiece tokenizer that can encode newline characters. The model has been fine-tuned for various summarization tasks and achieves state-of-the-art performance on multiple benchmarks.\"}}", "category": "generic"}
{"question_id": 508, "text": " You are working as a news curator for a media company and need to make a short summary of a long news article.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"it5-base-news-summarization\", \"api_call\": \"pipeline('summarization', model='it5/it5-base-news-summarization')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"newsum(Dal 31 maggio \\u00e8 infine partita la piattaforma ITsART, a pi\\u00f9 di un anno da quando \\u2013 durante il primo lockdown \\u2013 il ministro della Cultura Dario Franceschini ne aveva parlato come di \\u00abuna sorta di Netflix della cultura\\u00bb, pensata per \\u00aboffrire a tutto il mondo la cultura italiana a pagamento\\u00bb. \\u00c8 presto per dare giudizi definitivi sulla piattaforma, e di certo sar\\u00e0 difficile farlo anche pi\\u00f9 avanti senza numeri precisi. Al momento, l\\u2019unica cosa che si pu\\u00f2 fare \\u00e8 guardare com\\u2019\\u00e8 fatto il sito, contare quanti contenuti ci sono (circa 700 \\u201ctitoli\\u201d, tra film, documentari, spettacoli teatrali e musicali e altri eventi) e provare a dare un giudizio sul loro valore e sulla loro variet\\u00e0. Intanto, una cosa notata da pi\\u00f9 parti \\u00e8 che diversi contenuti di ITsART sono a pagamento sulla piattaforma sebbene altrove, per esempio su RaiPlay, siano invece disponibili gratuitamente.)\", \"performance\": {\"dataset\": \"NewsSum-IT\", \"accuracy\": {\"Rouge1\": 0.339, \"Rouge2\": 0.16, \"RougeL\": 0.263}}, \"description\": \"IT5 Base model fine-tuned on news summarization on the Fanpage and Il Post corpora for Italian Language Understanding and Generation.\"}}", "category": "generic"}
{"question_id": 509, "text": " Assemble a conversational bot for my online business to answer questions regarding our products.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"Zixtrauce/JohnBot\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('Zixtrauce/JohnBot')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"Input a message to start chatting with Zixtrauce/JohnBot.\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"JohnBot is a conversational model based on the gpt2 architecture and trained using the Hugging Face Transformers library. It can be used for generating text responses in a chat-based interface.\"}}", "category": "generic"}
{"question_id": 510, "text": " We are developing a game and need a text-based AI to control the main character's behavior. Help us use this chatbot based on the Joshua character.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"text-generation\", \"api_name\": \"satvikag/chatbot\", \"api_call\": \"AutoModelWithLMHead.from_pretrained('output-small')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained('microsoft/DialoGPT-small')\", \"model\": \"AutoModelWithLMHead.from_pretrained('output-small')\"}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"for step in range(100):\\n  new_user_input_ids = tokenizer.encode(input('&gt;&gt; User:') + tokenizer.eos_token, return_tensors='pt')\\n  bot_input_ids = torch.cat([chat_history_ids, new_user_input_ids], dim=-1) if step &gt; 0 else new_user_input_ids\\n  chat_history_ids = model.generate(bot_input_ids, max_length=500, pad_token_id=tokenizer.eos_token_id, no_repeat_ngram_size=3, do_sample=True, top_k=100, top_p=0.7, temperature = 0.8)\\n  print('AI: {}'.format(tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)))\", \"performance\": {\"dataset\": \"Kaggle game script dataset\", \"accuracy\": \"Not provided\"}, \"description\": \"DialoGPT Trained on the Speech of a Game Character, Joshua from The World Ends With You.\"}}", "category": "generic"}
{"question_id": 511, "text": " We are creating an AI assistant for banking clients. The customers should be able to talk to the bot to do various tasks. We need to have a meaningful dialogue with them.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"microsoft/GODEL-v1_1-base-seq2seq\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/GODEL-v1_1-base-seq2seq')\", \"api_arguments\": [\"instruction\", \"knowledge\", \"dialog\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\ndef generate(instruction, knowledge, dialog):\\n if knowledge != '':\\n knowledge = '[KNOWLEDGE] ' + knowledge\\n dialog = ' EOS '.join(dialog)\\n query = f{instruction} [CONTEXT] {dialog} {knowledge}\\n input_ids = tokenizer(f{query}, return_tensors=pt).input_ids\\n outputs = model.generate(input_ids, max_length=128, min_length=8, top_p=0.9, do_sample=True)\\n output = tokenizer.decode(outputs[0], skip_special_tokens=True)\\n return output\", \"performance\": {\"dataset\": \"Reddit discussion thread, instruction and knowledge grounded dialogs\", \"accuracy\": \"N/A\"}, \"description\": \"GODEL is a large-scale pre-trained model for goal-directed dialogs. It is parameterized with a Transformer-based encoder-decoder model and trained for response generation grounded in external text, which allows more effective fine-tuning on dialog tasks that require conditioning the response on information that is external to the current conversation (e.g., a retrieved document). The pre-trained model can be efficiently fine-tuned and adapted to accomplish a new dialog task with a handful of task-specific dialogs. The v1.1 model is trained on 551M multi-turn dialogs from Reddit discussion thread, and 5M instruction and knowledge grounded dialogs.\"}}", "category": "generic"}
{"question_id": 512, "text": " We want to facilitate a conversation with our Russian customers. Build a model that can respond to customer inquiries in Russian.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"tinkoff-ai/ruDialoGPT-medium\", \"api_call\": \"AutoModelWithLMHead.from_pretrained('tinkoff-ai/ruDialoGPT-medium')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"tinkoff-ai/ruDialoGPT-medium\"}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"import torch\\nfrom transformers import AutoTokenizer, AutoModelWithLMHead\\ntokenizer = AutoTokenizer.from_pretrained('tinkoff-ai/ruDialoGPT-medium')\\nmodel = AutoModelWithLMHead.from_pretrained('tinkoff-ai/ruDialoGPT-medium')\\ninputs = tokenizer('@@\\u041f\\u0415\\u0420\\u0412\\u042b\\u0419@@ \\u043f\\u0440\\u0438\\u0432\\u0435\\u0442 @@\\u0412\\u0422\\u041e\\u0420\\u041e\\u0419@@ \\u043f\\u0440\\u0438\\u0432\\u0435\\u0442 @@\\u041f\\u0415\\u0420\\u0412\\u042b\\u0419@@ \\u043a\\u0430\\u043a \\u0434\\u0435\\u043b\\u0430? @@\\u0412\\u0422\\u041e\\u0420\\u041e\\u0419@@', return_tensors='pt')\\ngenerated_token_ids = model.generate(\\n **inputs,\\n top_k=10,\\n top_p=0.95,\\n num_beams=3,\\n num_return_sequences=3,\\n do_sample=True,\\n no_repeat_ngram_size=2,\\n temperature=1.2,\\n repetition_penalty=1.2,\\n length_penalty=1.0,\\n eos_token_id=50257,\\n max_new_tokens=40\\n)\\ncontext_with_response = [tokenizer.decode(sample_token_ids) for sample_token_ids in generated_token_ids]\\ncontext_with_response\", \"performance\": {\"dataset\": \"Private Validation Set\", \"sensibleness\": 0.78, \"specificity\": 0.69, \"SSA\": 0.735}, \"description\": \"This generation model is based on sberbank-ai/rugpt3medium_based_on_gpt2. It's trained on large corpus of dialog data and can be used for buildning generative conversational agents. The model was trained with context size 3.\"}}", "category": "generic"}
{"question_id": 513, "text": " We are launching a new blog and need a paragraph with tips on how to take care of houseplants.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"bigscience/bloom-7b1\", \"api_call\": \"pipeline('text-generation', model='bigscience/bloom-7b1') should be changed to TextGenerationPipeline(model=Bloom7b1Model.from_pretrained('bigscience/bloom-7b1')).\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"from transformers import pipeline\\nmodel = pipeline('text-generation', model='bigscience/bloom-7b1')\\nresult = model('Once upon a time')\\nprint(result)\", \"performance\": {\"dataset\": \"Training Data\", \"accuracy\": {\"Training Loss\": 2.3, \"Validation Loss\": 2.9, \"Perplexity\": 16}}, \"description\": \"BigScience Large Open-science Open-access Multilingual Language Model (BLOOM) is a transformer-based language model designed for text generation and as a pretrained base model for fine-tuning on specific tasks. It supports 48 languages and has 7,069,016,064 parameters. The model is trained on a diverse corpus containing 45 natural languages, 12 programming languages, and 1.5TB of pre-processed text.\"}}", "category": "generic"}
{"question_id": 514, "text": " The development team is trying to create a function in Python to print \\\"Hello, World!\\\" but they're not sure how to proceed. Generate this function for them.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"bigcode/santacoder\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('bigcode/santacoder', trust_remote_code=True)\", \"api_arguments\": [\"inputs\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\ncheckpoint = bigcode/santacoder\\ndevice = cuda # for GPU usage or cpu for CPU usage\\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint, trust_remote_code=True).to(device)\\ninputs = tokenizer.encode(def print_hello_world():, return_tensors=pt).to(device)\\noutputs = model.generate(inputs)\\nprint(tokenizer.decode(outputs[0]))\", \"performance\": {\"dataset\": \"bigcode/the-stack\", \"accuracy\": {\"pass@1 on MultiPL HumanEval (Python)\": 0.18, \"pass@10 on MultiPL HumanEval (Python)\": 0.29, \"pass@100 on MultiPL HumanEval (Python)\": 0.49, \"pass@1 on MultiPL MBPP (Python)\": 0.35, \"pass@10 on MultiPL MBPP (Python)\": 0.58, \"pass@100 on MultiPL MBPP (Python)\": 0.77, \"pass@1 on MultiPL HumanEval (JavaScript)\": 0.16, \"pass@10 on MultiPL HumanEval (JavaScript)\": 0.27, \"pass@100 on MultiPL HumanEval (JavaScript)\": 0.47, \"pass@1 on MultiPL MBPP (Javascript)\": 0.28, \"pass@10 on MultiPL MBPP (Javascript)\": 0.51, \"pass@100 on MultiPL MBPP (Javascript)\": 0.7, \"pass@1 on MultiPL HumanEval (Java)\": 0.15, \"pass@10 on MultiPL HumanEval (Java)\": 0.26, \"pass@100 on MultiPL HumanEval (Java)\": 0.41, \"pass@1 on MultiPL MBPP (Java)\": 0.28, \"pass@10 on MultiPL MBPP (Java)\": 0.44, \"pass@100 on MultiPL MBPP (Java)\": 0.59, \"single_line on HumanEval FIM (Python)\": 0.44, \"single_line on MultiPL HumanEval FIM (Java)\": 0.62, \"single_line on MultiPL HumanEval FIM (JavaScript)\": 0.6, \"BLEU on CodeXGLUE code-to-text (Python)\": 18.13}}, \"description\": \"The SantaCoder models are a series of 1.1B parameter models trained on the Python, Java, and JavaScript subset of The Stack (v1.1) (which excluded opt-out requests). The main model uses Multi Query Attention, was trained using near-deduplication and comment-to-code ratio as filtering criteria and using the Fill-in-the-Middle objective. In addition there are several models that were trained on datasets with different filter parameters and with architecture and objective variations.\"}}", "category": "generic"}
{"question_id": 515, "text": " We need to generate a motivational quote related to sports.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"TehVenom/PPO_Pygway-V8p4_Dev-6b\", \"api_call\": \"pipeline('text-generation', model='TehVenom/PPO_Pygway-V8p4_Dev-6b')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"This model can be loaded on the Inference API on-demand.\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"TODO card. Mix of (GPT-J-6B-Janeway + PPO_HH_GPT-J) + Pygmalion-6b-DEV (V8 / Part 4). At a ratio of GPT-J-6B-Janeway - 20%, PPO_HH_GPT-J - 20%, Pygmalion-6b DEV (V8 / Part 4) - 60%.\"}}", "category": "generic"}
{"question_id": 516, "text": " Give me a tool that I can use to generate stories based on a starting phrase.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"decapoda-research/llama-13b-hf\", \"api_call\": \"pipeline('text-generation', model='decapoda-research/llama-13b-hf')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"generator('Once upon a time')\", \"performance\": {\"dataset\": [{\"name\": \"BoolQ\", \"accuracy\": \"85.3\"}, {\"name\": \"PIQA\", \"accuracy\": \"82.8\"}, {\"name\": \"SIQA\", \"accuracy\": \"52.3\"}, {\"name\": \"HellaSwag\", \"accuracy\": \"84.2\"}, {\"name\": \"WinoGrande\", \"accuracy\": \"77\"}, {\"name\": \"ARC-e\", \"accuracy\": \"81.5\"}, {\"name\": \"ARC-c\", \"accuracy\": \"56\"}, {\"name\": \"OBQACOPA\", \"accuracy\": \"60.2\"}]}, \"description\": \"LLaMA-13B is an auto-regressive language model based on the transformer architecture developed by the FAIR team of Meta AI. It is designed for research purposes, such as question answering, natural language understanding, and reading comprehension. The model has been trained on a variety of sources, including web data, GitHub, Wikipedia, and books in 20 languages. It has been evaluated on several benchmarks, including BoolQ, PIQA, SIQA, HellaSwag, WinoGrande, ARC, and OpenBookQA.\"}}", "category": "generic"}
{"question_id": 517, "text": " Our PR team requires a machine learning approach to creative sentence generation for marketing content creation.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Generative Commonsense Reasoning\", \"api_name\": \"mrm8488/t5-base-finetuned-common_gen\", \"api_call\": \"AutoModelWithLMHead.from_pretrained('mrm8488/t5-base-finetuned-common_gen')\", \"api_arguments\": [\"words\", \"max_length\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelWithLMHead, AutoTokenizer\\ntokenizer = AutoTokenizer.from_pretrained(mrm8488/t5-base-finetuned-common_gen)\\nmodel = AutoModelWithLMHead.from_pretrained(mrm8488/t5-base-finetuned-common_gen)\\ndef gen_sentence(words, max_length=32):\\n input_text = words\\n features = tokenizer([input_text], return_tensors='pt')\\noutput = model.generate(input_ids=features['input_ids'], attention_mask=features['attention_mask'], max_length=max_length)\\nreturn tokenizer.decode(output[0], skip_special_tokens=True)\\nwords = tree plant ground hole dig\\ngen_sentence(words)\", \"performance\": {\"dataset\": \"common_gen\", \"accuracy\": {\"ROUGE-2\": 17.1, \"ROUGE-L\": 39.47}}, \"description\": \"Google's T5 fine-tuned on CommonGen for Generative Commonsense Reasoning. CommonGen is a constrained text generation task, associated with a benchmark dataset, to explicitly test machines for the ability of generative commonsense reasoning. Given a set of common concepts; the task is to generate a coherent sentence describing an everyday scenario using these concepts.\"}}", "category": "generic"}
{"question_id": 518, "text": " We are developing an AI-powered code review system. Our model should provide a short summary of the provided code snippet.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Code Understanding and Generation\", \"api_name\": \"Salesforce/codet5-base\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('Salesforce/codet5-base')\", \"api_arguments\": [\"text\", \"return_tensors\", \"input_ids\", \"max_length\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import RobertaTokenizer, T5ForConditionalGeneration\\ntokenizer = RobertaTokenizer.from_pretrained('Salesforce/codet5-base')\\nmodel = T5ForConditionalGeneration.from_pretrained('Salesforce/codet5-base')\\ntext = def greet(user): print(f'hello <extra_id_0>!')\\ninput_ids = tokenizer(text, return_tensors=pt).input_ids\\ngenerated_ids = model.generate(input_ids, max_length=8)\\nprint(tokenizer.decode(generated_ids[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"code_search_net\", \"accuracy\": \"Refer to the paper for evaluation results on several downstream benchmarks\"}, \"description\": \"CodeT5 is a unified pre-trained encoder-decoder Transformer model that better leverages the code semantics conveyed from the developer-assigned identifiers. It supports both code understanding and generation tasks and allows for multi-task learning. The model can be used for tasks such as code summarization, code generation, code translation, code refinement, code defect detection, and code clone detection.\"}}", "category": "generic"}
{"question_id": 519, "text": " I want a language model that can fill in short blanks for example sentences, quizzes, or trivia questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"microsoft/deberta-base\", \"api_call\": \"DebertaModel.from_pretrained('microsoft/deberta-base')\", \"api_arguments\": \"text\", \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline\\nfill_mask = pipeline('fill-mask', model='microsoft/deberta-base')\\nfill_mask('The capital of France is [MASK].')\", \"performance\": {\"dataset\": {\"SQuAD 1.1\": \"93.1/87.2\", \"SQuAD 2.0\": \"86.2/83.1\", \"MNLI-m\": \"88.8\"}}, \"description\": \"DeBERTa improves the BERT and RoBERTa models using disentangled attention and enhanced mask decoder. It outperforms BERT and RoBERTa on majority of NLU tasks with 80GB training data.\"}}", "category": "generic"}
{"question_id": 520, "text": " As a language teacher, I sometimes need help completing Dutch sentences with the most suitable word. Can you fill in the gaps?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"GroNLP/bert-base-dutch-cased\", \"api_call\": \"AutoModel.from_pretrained('GroNLP/bert-base-dutch-cased')\", \"api_arguments\": [\"pretrained_model_name_or_path\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModel, TFAutoModel\\ntokenizer = AutoTokenizer.from_pretrained(GroNLP/bert-base-dutch-cased)\\nmodel = AutoModel.from_pretrained(GroNLP/bert-base-dutch-cased)\", \"performance\": {\"dataset\": [{\"name\": \"CoNLL-2002\", \"accuracy\": \"90.24\"}, {\"name\": \"SoNaR-1\", \"accuracy\": \"84.93\"}, {\"name\": \"spaCy UD LassySmall\", \"accuracy\": \"86.10\"}]}, \"description\": \"BERTje is a Dutch pre-trained BERT model developed at the University of Groningen.\"}}", "category": "generic"}
{"question_id": 521, "text": " Translate some lyrics of a Portuguese song into English\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"neuralmind/bert-base-portuguese-cased\", \"api_call\": \"AutoModelForPreTraining.from_pretrained('neuralmind/bert-base-portuguese-cased')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"neuralmind/bert-base-portuguese-cased\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\npipe = pipeline('fill-mask', model=model, tokenizer=tokenizer)\\npipe('Tinha uma [MASK] no meio do caminho.')\", \"performance\": {\"dataset\": \"brWaC\", \"accuracy\": \"state-of-the-art\"}, \"description\": \"BERTimbau Base is a pretrained BERT model for Brazilian Portuguese that achieves state-of-the-art performances on three downstream NLP tasks: Named Entity Recognition, Sentence Textual Similarity and Recognizing Textual Entailment. It is available in two sizes: Base and Large.\"}}", "category": "generic"}
{"question_id": 522, "text": " We are a news portal website and recently acquired a breaking news article. Determine the similarity between the main text of this article and other articles in our database.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/distiluse-base-multilingual-cased-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 512 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 523, "text": " As a business assistant of an international company, find the most relevant sentence among a list of sentences that answers a specific question.\\n###Input: {\\\"question\\\": \\\"What is the main purpose of photosynthesis?\\\", \\\"sentences\\\": [\\\"Photosynthesis is the process used by plants to convert light energy into chemical energy to fuel their growth.\\\", \\\"The Eiffel Tower is a famous landmark in Paris.\\\", \\\"Photosynthesis also produces oxygen as a byproduct, which is necessary for life on Earth.\\\"]}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/multi-qa-mpnet-base-dot-v1\", \"api_call\": \"SentenceTransformer('sentence-transformers/multi-qa-mpnet-base-dot-v1')\", \"api_arguments\": [\"query\", \"docs\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer, util\\nquery = How many people live in London?\\ndocs = [Around 9 Million people live in London, London is known for its financial district]\\nmodel = SentenceTransformer('sentence-transformers/multi-qa-mpnet-base-dot-v1')\\nquery_emb = model.encode(query)\\ndoc_emb = model.encode(docs)\\nscores = util.dot_score(query_emb, doc_emb)[0].cpu().tolist()\\ndoc_score_pairs = list(zip(docs, scores))\\ndoc_score_pairs = sorted(doc_score_pairs, key=lambda x: x[1], reverse=True)\\nfor doc, score in doc_score_pairs:\\n print(score, doc)\", \"performance\": {\"dataset\": [{\"name\": \"WikiAnswers\", \"accuracy\": 77427422}, {\"name\": \"PAQ\", \"accuracy\": 64371441}, {\"name\": \"Stack Exchange\", \"accuracy\": 25316456}]}, \"description\": \"This is a sentence-transformers model that maps sentences & paragraphs to a 768 dimensional dense vector space and was designed for semantic search. It has been trained on 215M (question, answer) pairs from diverse sources.\"}}", "category": "generic"}
{"question_id": 524, "text": " We need to cluster customer reviews based on their content similarity to understand the common issues customers are facing.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"nikcheerla/nooks-amd-detection-v2-full\", \"api_call\": \"SentenceTransformer.from_pretrained('nikcheerla/nooks-amd-detection-v2-full')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": [\"sentence-transformers\", \"transformers\"], \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('{MODEL_NAME}')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model that maps sentences and paragraphs to a 768-dimensional dense vector space. It can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 525, "text": " Create a program to calculate sentence similarity scores between a list of sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Automated evaluation\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 526, "text": " We need to find a similar Chinese sentence to my source sentence for a suggestion.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"text2vec-large-chinese\", \"api_call\": \"AutoModel.from_pretrained('GanymedeNil/text2vec-large-chinese')\", \"api_arguments\": \"source_sentence, sentences_to_compare\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import AutoModel, AutoTokenizer\\ntokenizer = AutoTokenizer.from_pretrained('GanymedeNil/text2vec-large-chinese')\\nmodel = AutoModel.from_pretrained('GanymedeNil/text2vec-large-chinese')\", \"performance\": {\"dataset\": \"https://huggingface.co/shibing624/text2vec-base-chinese\", \"accuracy\": \"Not provided\"}, \"description\": \"A Chinese sentence similarity model based on the derivative model of https://huggingface.co/shibing624/text2vec-base-chinese, replacing MacBERT with LERT, and keeping other training conditions unchanged.\"}}", "category": "generic"}
{"question_id": 527, "text": " I am building a voice assistant for my mobile app. Give me an example of how I can implement this Text-to-Speech model.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"mio/amadeus\", \"api_call\": \"./run.sh --skip_data_prep false --skip_train true --download_model mio/amadeus\", \"api_arguments\": {\"model_name\": \"mio/amadeus\"}, \"python_environment_requirements\": {\"espnet\": \"d5b5ec7b2e77bd3e10707141818b7e6c57ac6b3f\", \"transformers\": \"latest\"}, \"example_code\": \"cd espnet\\ngit checkout d5b5ec7b2e77bd3e10707141818b7e6c57ac6b3f\\npip install -e .\\ncd egs2/amadeus/tts1\\n./run.sh --skip_data_prep false --skip_train true --download_model mio/amadeus\", \"performance\": {\"dataset\": \"amadeus\", \"accuracy\": \"Not provided\"}, \"description\": \"This model was trained by mio using amadeus recipe in espnet.\"}}", "category": "generic"}
{"question_id": 528, "text": " Our team wants to transcribe audio files into text including punctuation marks for usability studies.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"jbetker/wav2vec2-large-robust-ft-libritts-voxpopuli\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('jbetker/wav2vec2-large-robust-ft-libritts-voxpopuli')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"https://github.com/neonbjb/ocotillo\", \"performance\": {\"dataset\": \"librispeech validation set\", \"accuracy\": \"4.45%\"}, \"description\": \"This checkpoint is a wav2vec2-large model that is useful for generating transcriptions with punctuation. It is intended for use in building transcriptions for TTS models, where punctuation is very important for prosody. This model was created by fine-tuning the facebook/wav2vec2-large-robust-ft-libri-960h checkpoint on the libritts and voxpopuli datasets with a new vocabulary that includes punctuation.\"}}", "category": "generic"}
{"question_id": 529, "text": " Your client is a podcast aggregator website looking to transcribe episodes and display transcriptions on the site. Help them transcribe an audio file containing spoken English words.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription and Translation\", \"api_name\": \"openai/whisper-medium\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-medium')\", \"api_arguments\": [\"sample\", \"sampling_rate\", \"language\", \"task\", \"skip_special_tokens\"], \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": \"from transformers import WhisperProcessor, WhisperForConditionalGeneration\\nfrom datasets import load_dataset\\nprocessor = WhisperProcessor.from_pretrained(openai/whisper-medium)\\nmodel = WhisperForConditionalGeneration.from_pretrained(openai/whisper-medium)\\nmodel.config.forced_decoder_ids = None\\nds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\\nsample = ds[0][audio]\\ninput_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\\npredicted_ids = model.generate(input_features)\\ntranscription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\", \"performance\": {\"dataset\": [{\"name\": \"LibriSpeech (clean)\", \"accuracy\": 2.9}, {\"name\": \"LibriSpeech (other)\", \"accuracy\": 5.9}, {\"name\": \"Common Voice 11.0\", \"accuracy\": 53.87}]}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning. It is a Transformer-based encoder-decoder model and was trained on either English-only data or multilingual data.\"}}", "category": "generic"}
{"question_id": 530, "text": " Our app offers assistance to people with hearing problems by enhancing the clarity of speech. We need a feature to clean and enhance the audio.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"DCCRNet_Libri1Mix_enhsingle_16k\", \"api_call\": \"AutoModelForAudioToAudio.from_pretrained('JorisCos/DCCRNet_Libri1Mix_enhsingle_16k')\", \"api_arguments\": \"pretrained_model_name_or_path\", \"python_environment_requirements\": [\"transformers\", \"asteroid\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri1Mix\", \"accuracy\": {\"si_sdr\": 13.329767398333798, \"si_sdr_imp\": 9.879986092474098, \"sdr\": 13.87279932997016, \"sdr_imp\": 10.370136530757103, \"sir\": \"Infinity\", \"sir_imp\": \"NaN\", \"sar\": 13.87279932997016, \"sar_imp\": 10.370136530757103, \"stoi\": 0.9140907015623948, \"stoi_imp\": 0.11817087802185405}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the enh_single task of the Libri1Mix dataset.\"}}", "category": "generic"}
{"question_id": 531, "text": " Find a way to separate the background music and vocal from an audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"SpeechBrain\", \"functionality\": \"Audio Source Separation\", \"api_name\": \"sepformer-wsj02mix\", \"api_call\": \"separator.from_hparams(source='speechbrain/sepformer-wsj02mix')\", \"api_arguments\": [\"path\"], \"python_environment_requirements\": [\"pip install speechbrain\"], \"example_code\": [\"from speechbrain.pretrained import SepformerSeparation as separator\", \"import torchaudio\", \"model = separator.from_hparams(source=speechbrain/sepformer-wsj02mix, savedir='pretrained_models/sepformer-wsj02mix')\", \"est_sources = model.separate_file(path='speechbrain/sepformer-wsj02mix/test_mixture.wav')\", \"torchaudio.save(source1hat.wav, est_sources[:, :, 0].detach().cpu(), 8000)\", \"torchaudio.save(source2hat.wav, est_sources[:, :, 1].detach().cpu(), 8000)\"], \"performance\": {\"dataset\": \"WSJ0-2Mix\", \"accuracy\": \"22.4 dB\"}, \"description\": \"This repository provides all the necessary tools to perform audio source separation with a SepFormer model, implemented with SpeechBrain, and pretrained on WSJ0-2Mix dataset.\"}}", "category": "generic"}
{"question_id": 532, "text": " An educational software company needs an advanced method to separate voices from background noise. Develop a solution.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri2Mix_sepclean_8k\", \"api_call\": \"hf_hub_download(repo_id='JorisCos/ConvTasNet_Libri2Mix_sepclean_8k')\", \"api_arguments\": [\"repo_id\", \"filename\"], \"python_environment_requirements\": [\"huggingface_hub\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 14.764543634468069, \"si_sdr_imp\": 14.764029375607246, \"sdr\": 15.29337970745095, \"sdr_imp\": 15.114146605113111, \"sir\": 24.092904661115366, \"sir_imp\": 23.913669683141528, \"sar\": 16.06055906916849, \"sar_imp\": -51.980784441287454, \"stoi\": 0.9311142440593033, \"stoi_imp\": 0.21817376142710482}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 533, "text": " Develop a voice command security system that distinguishes between specific command phrases like \\\"disarm security\\\" or \\\"activate alarm\\\".\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/hubert-base-superb-ks\", \"api_call\": \"pipeline('audio-classification', model='superb/hubert-base-superb-ks')\", \"api_arguments\": [\"file\", \"top_k\"], \"python_environment_requirements\": [\"datasets\", \"transformers\", \"torchaudio\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, ks, split=test)\\nclassifier = pipeline(audio-classification, model=superb/hubert-base-superb-ks)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"Speech Commands dataset v1.0\", \"accuracy\": 0.9672}, \"description\": \"This is a ported version of S3PRL's Hubert for the SUPERB Keyword Spotting task. The base model is hubert-base-ls960, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 534, "text": " I have an audio recording that I want to analyze to understand the emotion of the speaker.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Emotion Recognition\", \"api_name\": \"ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition')\", \"api_arguments\": \"wav2vec2, tokenizer\", \"python_environment_requirements\": \"transformers 4.8.2, pytorch 1.9.0+cu102, datasets 1.9.0, tokenizers 0.10.3\", \"example_code\": \"from transformers import Wav2Vec2ForCTC, Wav2Vec2Processor\", \"performance\": {\"dataset\": \"RAVDESS\", \"accuracy\": 0.8223}, \"description\": \"The model is a fine-tuned version of jonatasgrosman/wav2vec2-large-xlsr-53-english for a Speech Emotion Recognition (SER) task. The dataset used to fine-tune the original pre-trained model is the RAVDESS dataset. This dataset provides 1440 samples of recordings from actors performing on 8 different emotions in English, which are: emotions = ['angry', 'calm', 'disgust', 'fearful', 'happy', 'neutral', 'sad', 'surprised'].\"}}", "category": "generic"}
{"question_id": 535, "text": " We are working on an assistant that can help tourists translate spoken language from one language to another. Let's build a solution for Hokkien to English translation.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"Speech-to-speech translation\", \"api_name\": \"xm_transformer_s2ut_hk-en\", \"api_call\": \"S2THubInterface()\", \"api_arguments\": {\"task\": \"speech_to_text\", \"model\": \"facebook/xm_transformer_s2ut_hk-en\", \"generator\": \"task.build_generator([model], cfg)\", \"sample\": \"S2THubInterface.get_model_input(task, audio)\"}, \"python_environment_requirements\": {\"fairseq\": \"latest\", \"torchaudio\": \"latest\", \"huggingface_hub\": \"latest\"}, \"example_code\": \"import json\\nimport os\\nfrom pathlib import Path\\nimport IPython.display as ipd\\nfrom fairseq import hub_utils\\nfrom fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.speech_to_text.hub_interface import S2THubInterface\\nfrom fairseq.models.text_to_speech import CodeHiFiGANVocoder\\nfrom fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\\nfrom huggingface_hub import snapshot_download\\nimport torchaudio\\ncache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/xm_transformer_s2ut_hk-en,\\n arg_overrides={config_yaml: config.yaml, task: speech_to_text},\\n cache_dir=cache_dir,\\n)\\nmodel = models[0].cpu()\\ncfg[task].cpu = True\\ngenerator = task.build_generator([model], cfg)\\naudio, _ = torchaudio.load(/path/to/an/audio/file)\\nsample = S2THubInterface.get_model_input(task, audio)\\nunit = S2THubInterface.get_prediction(task, model, generator, sample)\\nlibrary_name = fairseq\\ncache_dir = (\\n cache_dir or (Path.home() / .cache / library_name).as_posix()\\n)\\ncache_dir = snapshot_download(\\n ffacebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur, cache_dir=cache_dir, library_name=library_name\\n)\\nx = hub_utils.from_pretrained(\\n cache_dir,\\n model.pt,\\n .,\\n archive_map=CodeHiFiGANVocoder.hub_models(),\\n config_yaml=config.json,\\n fp16=False,\\n is_vocoder=True,\\n)\\nwith open(f{x['args']['data']}/config.json) as f:\\n vocoder_cfg = json.load(f)\\nassert (\\n len(x[args][model_path]) == 1\\n), Too many vocoder models in the input\\nvocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\\ntts_model = VocoderHubInterface(vocoder_cfg, vocoder)\\ntts_sample = tts_model.get_model_input(unit)\\nwav, sr = tts_model.get_prediction(tts_sample)\\nipd.Audio(wav, rate=sr)\", \"performance\": {\"dataset\": \"TED, drama, TAT domain\", \"accuracy\": \"Not provided\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq for Hokkien-English. Trained with supervised data in TED, drama, TAT domain, and weakly supervised data in drama domain.\"}}", "category": "generic"}
{"question_id": 536, "text": " Trying to implement an assistant that detects user's emotions on a given audio file to help them manage their emotions better.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Emotion Recognition\", \"api_name\": \"superb/wav2vec2-base-superb-er\", \"api_call\": \"pipeline('audio-classification', model='superb/wav2vec2-base-superb-er')\", \"api_arguments\": [\"file\", \"top_k\"], \"python_environment_requirements\": [\"datasets\", \"transformers\", \"torch\", \"librosa\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, er, split=session1)\\nclassifier = pipeline(audio-classification, model=superb/wav2vec2-base-superb-er)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"IEMOCAP\", \"accuracy\": 0.6258}, \"description\": \"This is a ported version of S3PRL's Wav2Vec2 for the SUPERB Emotion Recognition task. The base model is wav2vec2-base, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 537, "text": " We are building a customer service analytics software. The software should recognize the voice of the customers.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speaker Verification\", \"api_name\": \"speechbrain/spkrec-xvect-voxceleb\", \"api_call\": \"EncoderClassifier.from_hparams(source='speechbrain/spkrec-xvect-voxceleb', savedir='pretrained_models/spkrec-xvect-voxceleb')\", \"api_arguments\": [\"source\", \"savedir\"], \"python_environment_requirements\": [\"pip install speechbrain\"], \"example_code\": \"import torchaudio\\nfrom speechbrain.pretrained import EncoderClassifier\\nclassifier = EncoderClassifier.from_hparams(source=speechbrain/spkrec-xvect-voxceleb, savedir=pretrained_models/spkrec-xvect-voxceleb)\\nsignal, fs =torchaudio.load('tests/samples/ASR/spk1_snt1.wav')\\nembeddings = classifier.encode_batch(signal)\", \"performance\": {\"dataset\": \"Voxceleb1-test set (Cleaned)\", \"accuracy\": \"EER(%) 3.2\"}, \"description\": \"This repository provides all the necessary tools to extract speaker embeddings with a pretrained TDNN model using SpeechBrain. The system is trained on Voxceleb 1+ Voxceleb2 training data.\"}}", "category": "generic"}
{"question_id": 538, "text": " We are developing a voice-controlled device. Help categorize spoken commands into specific keywords to trigger various actions.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/wav2vec2-base-superb-ks\", \"api_call\": \"pipeline('audio-classification', model='superb/wav2vec2-base-superb-ks')\", \"api_arguments\": {\"model\": \"superb/wav2vec2-base-superb-ks\"}, \"python_environment_requirements\": [\"torch\", \"transformers\", \"torchaudio\", \"datasets\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, ks, split=test)\\nclassifier = pipeline(audio-classification, model=superb/wav2vec2-base-superb-ks)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"Speech Commands dataset v1.0\", \"accuracy\": {\"s3prl\": 0.9623, \"transformers\": 0.9643}}, \"description\": \"Wav2Vec2-Base for Keyword Spotting (KS) task in the SUPERB benchmark. The base model is pretrained on 16kHz sampled speech audio. The KS task detects preregistered keywords by classifying utterances into a predefined set of words. The model is trained on the Speech Commands dataset v1.0.\"}}", "category": "generic"}
{"question_id": 539, "text": " Develop an emotion analysis system to understand customer satisfaction over the phone for a telecommunication company in Russia.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"wav2vec2-xlsr-53-russian-emotion-recognition\", \"api_call\": \"Wav2Vec2Model.from_pretrained('facebook/wav2vec2-large-xlsr-53')\", \"api_arguments\": {\"path\": \"/path/to/russian_audio_speech.wav\", \"sampling_rate\": 16000}, \"python_environment_requirements\": [\"torch\", \"torchaudio\", \"transformers\", \"librosa\", \"numpy\"], \"example_code\": \"result = predict('/path/to/russian_audio_speech.wav', 16000)\\nprint(result)\", \"performance\": {\"dataset\": \"Russian Emotional Speech Dialogs\", \"accuracy\": \"72%\"}, \"description\": \"A model trained to recognize emotions in Russian speech using wav2vec2. It can classify emotions such as anger, disgust, enthusiasm, fear, happiness, neutral, and sadness.\"}}", "category": "generic"}
{"question_id": 540, "text": " We are a company that provides transcription services. We require voice activity detection in our audio recordings.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Voice Activity Detection\", \"api_name\": \"popcornell/pyannote-segmentation-chime6-mixer6\", \"api_call\": \"Model.from_pretrained('popcornell/pyannote-segmentation-chime6-mixer6')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"pyannote.audio 2.1.1\", \"example_code\": \"from pyannote.audio import Model\\nmodel = Model.from_pretrained(popcornell/pyannote-segmentation-chime6-mixer6)\", \"performance\": {\"dataset\": \"ami\", \"accuracy\": \"N/A\"}, \"description\": \"Pyannote Segmentation model fine-tuned on data from CHiME-7 DASR Challenge. Used to perform diarization in the CHiME-7 DASR diarization baseline.\"}}", "category": "generic"}
{"question_id": 541, "text": " We need to predict the survival of passengers on the Titanic based on certain demographics like age, gender, etc.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Binary Classification\", \"api_name\": \"harithapliyal/autotrain-tatanic-survival-51030121311\", \"api_call\": \"AutoModel.from_pretrained('harithapliyal/autotrain-tatanic-survival-51030121311')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"harithapliyal/autotrain-data-tatanic-survival\", \"accuracy\": 0.872}, \"description\": \"A tabular classification model trained on the Titanic survival dataset using Hugging Face AutoTrain. The model predicts whether a passenger survived or not based on features such as age, gender, and passenger class.\"}}", "category": "generic"}
{"question_id": 542, "text": " Implement a system that predicts the carbon emissions in a given dataset.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"Robertooo/autotrain-hmaet-2037366891\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"Robertooo/autotrain-data-hmaet\", \"accuracy\": {\"Loss\": 0.067, \"R2\": 0.486, \"MSE\": 0.005, \"MAE\": 0.055, \"RMSLE\": 0.036}}, \"description\": \"A tabular regression model trained with AutoTrain to predict carbon emissions.\"}}", "category": "generic"}
{"question_id": 543, "text": " Predict the carbon emissions of several power plants based on their characteristics.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"pcoloc/autotrain-mikrotik-7-7-1860563588\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"pcoloc/autotrain-data-mikrotik-7-7\", \"accuracy\": {\"Loss\": 48.213, \"R2\": 0.654, \"MSE\": 2324.518, \"MAE\": 32.634, \"RMSLE\": 0.586}}, \"description\": \"A tabular regression model trained with AutoTrain to predict carbon emissions based on input features.\"}}", "category": "generic"}
{"question_id": 544, "text": " Our robotics team needs a way to stabilize a two-wheeled self-balancing robot. Would you suggest and apply any RL algorithm for this purpose?\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"CartPole-v1\", \"api_name\": \"sb3/ppo-CartPole-v1\", \"api_call\": \"load_from_hub(repo_id='sb3/ppo-CartPole-v1',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"rl_zoo3\", \"stable-baselines3\", \"stable-baselines3-contrib\"], \"example_code\": \"python -m rl_zoo3.load_from_hub --algo ppo --env CartPole-v1 -orga sb3 -f logs/\", \"performance\": {\"dataset\": \"CartPole-v1\", \"accuracy\": \"500.00 +/- 0.00\"}, \"description\": \"This is a trained model of a PPO agent playing CartPole-v1 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 545, "text": " We have a large text dataset and want to extract some important features from it for our data analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"YituTech/conv-bert-base\", \"api_call\": \"AutoModel.from_pretrained('YituTech/conv-bert-base')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"A pre-trained ConvBERT model for feature extraction provided by YituTech, based on the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 546, "text": " I'm working on a biomedical research project and need to extract features from a set of entity names to help me understand their relationships.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"cambridgeltl/SapBERT-from-PubMedBERT-fulltext\", \"api_call\": \"AutoModel.from_pretrained('cambridgeltl/SapBERT-from-PubMedBERT-fulltext')\", \"api_arguments\": \"input_ids, attention_mask\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"inputs = tokenizer('covid infection', return_tensors='pt'); outputs = model(**inputs); cls_embedding = outputs.last_hidden_state[:, 0, :]\", \"performance\": {\"dataset\": \"UMLS\", \"accuracy\": \"N/A\"}, \"description\": \"SapBERT is a pretraining scheme that self-aligns the representation space of biomedical entities. It is trained with UMLS 2020AA (English only) and uses microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext as the base model. The input should be a string of biomedical entity names, and the [CLS] embedding of the last layer is regarded as the output.\"}}", "category": "generic"}
{"question_id": 547, "text": " Our company is working on an app that allows music producers to detect beats in a sample. We want to use the Hubert-large-ll60k model for this.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"hubert-large-ll60k\", \"api_call\": \"HubertModel.from_pretrained('facebook/hubert-large-ll60k')\", \"api_arguments\": \"pretrained model name\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"hubert = HubertModel.from_pretrained('facebook/hubert-large-ll60k')\", \"performance\": {\"dataset\": \"Libri-Light\", \"accuracy\": \"matches or improves upon the state-of-the-art wav2vec 2.0 performance\"}, \"description\": \"Hubert-Large is a self-supervised speech representation learning model pretrained on 16kHz sampled speech audio. It is designed to deal with the unique problems in speech representation learning, such as multiple sound units in each input utterance, no lexicon of input sound units during the pre-training phase, and variable lengths of sound units with no explicit segmentation. The model relies on an offline clustering step to provide aligned target labels for a BERT-like prediction loss.\"}}", "category": "generic"}
{"question_id": 548, "text": " As an art director, generating ideas from descriptions can be difficult. Produce an image of a serene lake at sunset.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Generation\", \"api_name\": \"CompVis/stable-diffusion-v1-4\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('CompVis/stable-diffusion-v1-4')\", \"api_arguments\": [\"prompt\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"scipy\"], \"example_code\": \"import torch\\nfrom diffusers import StableDiffusionPipeline\\nmodel_id = CompVis/stable-diffusion-v1-4\\ndevice = cuda\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe = pipe.to(device)\\nprompt = a photo of an astronaut riding a horse on mars\\nimage = pipe(prompt).images[0]\\nimage.save(astronaut_rides_horse.png)\", \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion is a latent text-to-image diffusion model capable of generating photo-realistic images given any text input. The Stable-Diffusion-v1-4 checkpoint was fine-tuned on 225k steps at resolution 512x512 on laion-aesthetics v2 5+ and 10% dropping of the text-conditioning to improve classifier-free guidance sampling. This model is intended for research purposes and can be used for generating artworks, design, educational or creative tools, and research on generative models.\"}}", "category": "generic"}
{"question_id": 549, "text": " There is a new small restaurant opening and they need a store sign featuring a kangaroo eating pizza.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image Generation\", \"api_name\": \"runwayml/stable-diffusion-inpainting\", \"api_call\": \"StableDiffusionInpaintPipeline.from_pretrained('runwayml/stable-diffusion-inpainting', revision=fp16, torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"Text prompt\", \"image\": \"PIL image\", \"mask_image\": \"PIL image (mask)\"}, \"python_environment_requirements\": {\"diffusers\": \"from diffusers import StableDiffusionInpaintPipeline\"}, \"example_code\": {\"import_code\": \"from diffusers import StableDiffusionInpaintPipeline\", \"instantiate_code\": \"pipe = StableDiffusionInpaintPipeline.from_pretrained(runwayml/stable-diffusion-inpainting, revision=fp16, torch_dtype=torch.float16)\", \"generate_image_code\": \"image = pipe(prompt=prompt, image=image, mask_image=mask_image).images[0]\", \"save_image_code\": \"image.save(./yellow_cat_on_park_bench.png)\"}, \"performance\": {\"dataset\": {\"name\": \"LAION-2B (en)\", \"accuracy\": \"Not optimized for FID scores\"}}, \"description\": \"Stable Diffusion Inpainting is a latent text-to-image diffusion model capable of generating photo-realistic images given any text input, with the extra capability of inpainting the pictures by using a mask.\"}}", "category": "generic"}
{"question_id": 550, "text": " Design a promotional poster for a new line of summer clothing featuring people wearing the clothes with a beach background.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"Realistic_Vision_V1.4\", \"api_call\": \"pipeline('text-to-image', model=SG161222/Realistic_Vision_V1.4)\", \"api_arguments\": {\"prompt\": \"string\", \"negative_prompt\": \"string\"}, \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline\\nmodel = pipeline('text-to-image', model='SG161222/Realistic_Vision_V1.4')\\nprompt = 'a close up portrait photo of 26 y.o woman in wastelander clothes, long haircut, pale skin, slim body, background is city ruins, (high detailed skin:1.2), 8k uhd, dslr, soft lighting, high quality, film grain, Fujifilm XT3'\\nnegative_prompt = '(deformed iris, deformed pupils, semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, anime:1.4), text, close up, cropped, out of frame, worst quality, low quality, jpeg artifacts, ugly, duplicate, morbid, mutilated, extra fingers, mutated hands, poorly drawn hands, poorly drawn face, mutation, deformed, blurry, dehydrated, bad anatomy, bad proportions, extra limbs, cloned face, disfigured, gross proportions, malformed limbs, missing arms, missing legs, extra arms, extra legs, fused fingers, too many fingers, long neck'\\nresult = model(prompt, negative_prompt=negative_prompt)\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"Realistic_Vision_V1.4 is a text-to-image model that generates high-quality and detailed images based on textual prompts. It can be used for various applications such as generating realistic portraits, landscapes, and other types of images.\"}}", "category": "generic"}
{"question_id": 551, "text": " We are developing an application for Japanese language learners. We need to extract text from Japanese manga pages for our users.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"kha-white/manga-ocr-base\", \"api_call\": \"pipeline('ocr', model='kha-white/manga-ocr-base')\", \"api_arguments\": \"image\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"manga109s\", \"accuracy\": \"\"}, \"description\": \"Optical character recognition for Japanese text, with the main focus being Japanese manga. It uses Vision Encoder Decoder framework. Manga OCR can be used as a general purpose printed Japanese OCR, but its main goal was to provide a high quality text recognition, robust against various scenarios specific to manga: both vertical and horizontal text, text with furigana, text overlaid on images, wide variety of fonts and font styles, and low quality images.\"}}", "category": "generic"}
{"question_id": 552, "text": " I am a museum curator, I need to learn more about an artwork in my archive so I can create better exhibition materials.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"blip2-flan-t5-xl\", \"api_call\": \"Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-flan-t5-xl')\", \"api_arguments\": [\"raw_image\", \"question\"], \"python_environment_requirements\": [\"transformers\", \"requests\", \"PIL\"], \"example_code\": [\"import requests\", \"from PIL import Image\", \"from transformers import BlipProcessor, Blip2ForConditionalGeneration\", \"processor = BlipProcessor.from_pretrained(Salesforce/blip2-flan-t5-xl)\", \"model = Blip2ForConditionalGeneration.from_pretrained(Salesforce/blip2-flan-t5-xl)\", \"img_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg'\", \"raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\", \"question = how many dogs are in the picture?\", \"inputs = processor(raw_image, question, return_tensors=pt)\", \"out = model.generate(**inputs)\", \"print(processor.decode(out[0], skip_special_tokens=True))\"], \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not provided\"}, \"description\": \"BLIP-2 model, leveraging Flan T5-xl (a large language model). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, giving the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 553, "text": " We want an application that can answer questions about an image. For example, how many people are in this photo?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"dandelin/vilt-b32-finetuned-vqa\", \"api_call\": \"ViltForQuestionAnswering.from_pretrained('dandelin/vilt-b32-finetuned-vqa')\", \"api_arguments\": {\"image\": \"Image.open(requests.get(url, stream=True).raw)\", \"text\": \"How many cats are there?\"}, \"python_environment_requirements\": {\"transformers\": \"ViltProcessor, ViltForQuestionAnswering\", \"requests\": \"requests\", \"PIL\": \"Image\"}, \"example_code\": \"from transformers import ViltProcessor, ViltForQuestionAnswering\\nimport requests\\nfrom PIL import Image\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntext = How many cats are there?\\nprocessor = ViltProcessor.from_pretrained(dandelin/vilt-b32-finetuned-vqa)\\nmodel = ViltForQuestionAnswering.from_pretrained(dandelin/vilt-b32-finetuned-vqa)\\nencoding = processor(image, text, return_tensors=pt)\\noutputs = model(**encoding)\\nlogits = outputs.logits\\nidx = logits.argmax(-1).item()\\nprint(Predicted answer:, model.config.id2label[idx])\", \"performance\": {\"dataset\": \"VQAv2\", \"accuracy\": \"to do\"}, \"description\": \"Vision-and-Language Transformer (ViLT) model fine-tuned on VQAv2. It was introduced in the paper ViLT: Vision-and-Language Transformer Without Convolution or Region Supervision by Kim et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 554, "text": " I am developing a home security software which can detect intruders entering the house. In case any door or object is tampered, the application will ask, \\\"Who entered the room?\\\", to assist quick analysis of the CCTV recordings.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"Salesforce/blip-vqa-capfilt-large\", \"api_call\": \"BlipForQuestionAnswering.from_pretrained('Salesforce/blip-vqa-capfilt-large')\", \"api_arguments\": {\"raw_image\": \"RGB image\", \"question\": \"string\"}, \"python_environment_requirements\": {\"transformers\": \"BlipProcessor, BlipForQuestionAnswering\"}, \"example_code\": \"import requests\\nfrom PIL import Image\\nfrom transformers import BlipProcessor, BlipForQuestionAnswering\\nprocessor = BlipProcessor.from_pretrained(Salesforce/blip-vqa-capfilt-large)\\nmodel = BlipForQuestionAnswering.from_pretrained(Salesforce/blip-vqa-capfilt-large)\\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg'\\nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\\nquestion = how many dogs are in the picture?\\ninputs = processor(raw_image, question, return_tensors=pt)\\nout = model.generate(**inputs)\\nprint(processor.decode(out[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"VQA\", \"accuracy\": \"+1.6% in VQA score\"}, \"description\": \"BLIP is a new Vision-Language Pre-training (VLP) framework that transfers flexibly to both vision-language understanding and generation tasks. It effectively utilizes the noisy web data by bootstrapping the captions, where a captioner generates synthetic captions and a filter removes the noisy ones. The model achieves state-of-the-art results on a wide range of vision-language tasks, such as image-text retrieval, image captioning, and VQA.\"}}", "category": "generic"}
{"question_id": 555, "text": " Our business is growing rapidly, and we've received an increasing number of questions related to product images. We need the model to provide answers based on images.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\", \"api_call\": \"pipeline('visual-question-answering', model='JosephusCheung/GuanacoVQAOnConsumerHardware')\", \"api_arguments\": {\"model\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\", \"tokenizer\": \"JosephusCheung/GuanacoVQAOnConsumerHardware\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"torch\": \"latest\"}, \"example_code\": \"vqa(image_path, question)\", \"performance\": {\"dataset\": \"JosephusCheung/GuanacoVQADataset\", \"accuracy\": \"unknown\"}, \"description\": \"A Visual Question Answering model trained on the GuanacoVQADataset, designed to work on consumer hardware like Colab Free T4 GPU. The model can be used to answer questions about images.\"}}", "category": "generic"}
{"question_id": 556, "text": " Our company receives invoices in different formats. We need to extract specific information from these documents to process payments and keep records.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased-finetuned-docvqa\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('tiennvcs/layoutlmv2-base-uncased-finetuned-docvqa')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers==4.12.2\", \"torch==1.8.0+cu101\", \"datasets==1.14.0\", \"tokenizers==0.10.3\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 1.194}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-base-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 557, "text": " Design an AI algorithm to answer questions from scanned documents.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased-finetuned-infovqa\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('tiennvcs/layoutlmv2-base-uncased-finetuned-infovqa')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \"4.12.2\", \"pytorch\": \"1.8.0+cu101\", \"datasets\": \"1.14.0\", \"tokenizers\": \"0.10.3\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 2.087}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-base-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 558, "text": " I want to analyze the text and images in a document and extract answers to questions based on the content.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"LayoutLMX_pt_question_answer_ocrazure_correct_V16_07_04_2023\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\", \"api_arguments\": {\"question\": \"string\", \"context\": \"string\"}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A LayoutLMv2 model for document question answering.\"}}", "category": "generic"}
{"question_id": 559, "text": " Locate specific information from an invoice image, such as total amount due, invoice number, and due date.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V15_30_03_2023')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.11.0\"}, \"example_code\": {}, \"performance\": {\"dataset\": {}, \"accuracy\": {}}, \"description\": \"A document question answering model based on LayoutLMv2, which can be used to extract answers from images with text and layout information.\"}}", "category": "generic"}
{"question_id": 560, "text": " The company director needs a summary of a recent financial report. You should provide the answer of following question: What were the total revenues for the last quarter?\\n###Input: In the last quarter, the company's total revenues were reported at $3.2 million with a gross profit of $1.5 million. The operating expenses during the same quarter were $1 million.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"LayoutLMX_pt_question_answer_ocrazure_correct_V18_08_04_2023\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('L-oenai/LayoutLMX_pt_question_answer_ocrazure_correct_V18_08_04_2023')\", \"api_arguments\": {\"question\": \"string\", \"context\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A LayoutLM model for document question answering.\"}}", "category": "generic"}
{"question_id": 561, "text": " You must create a tool to assess safety risks automatically in construction sites by estimating the distance of tools and workers.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-nyu-finetuned-diode\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.4359, \"Rmse\": 0.4276}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 562, "text": " Develop a solution to estimate the depth of objects in an image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-kitti-finetuned-diode\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-kitti-finetuned-diode')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers==4.24.0, torch==1.12.1+cu113, tokenizers==0.13.2\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.5845, \"Rmse\": 0.6175}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-kitti on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 563, "text": " We need to analyze some pictures from nature and classify them to protect some species of animals.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/mobilenet_v1_0.75_192\", \"api_call\": \"AutoModelForImageClassification.from_pretrained('google/mobilenet_v1_0.75_192')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/mobilenet_v1_0.75_192\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoImageProcessor, AutoModelForImageClassification\\nfrom PIL import Image\\nimport requests\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\npreprocessor = AutoImageProcessor.from_pretrained(google/mobilenet_v1_0.75_192)\\nmodel = AutoModelForImageClassification.from_pretrained(google/mobilenet_v1_0.75_192)\\ninputs = preprocessor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"MobileNet V1 model pre-trained on ImageNet-1k at resolution 192x192. It was introduced in MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications by Howard et al, and first released in this repository. MobileNets are small, low-latency, low-power models parameterized to meet the resource constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used. MobileNets can be run efficiently on mobile devices.\"}}", "category": "generic"}
{"question_id": 564, "text": " We need to detect objects in an image provided by a user and describe their locations.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-large-patch14\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-large-patch14')\", \"api_arguments\": {\"model_name\": \"google/owlvit-large-patch14\"}, \"python_environment_requirements\": [\"torch\", \"transformers\", \"PIL\", \"requests\"], \"example_code\": [\"import requests\", \"from PIL import Image\", \"import torch\", \"from transformers import OwlViTProcessor, OwlViTForObjectDetection\", \"processor = OwlViTProcessor.from_pretrained(google/owlvit-large-patch14)\", \"model = OwlViTForObjectDetection.from_pretrained(google/owlvit-large-patch14)\", \"url = http://images.cocodataset.org/val2017/000000039769.jpg\", \"image = Image.open(requests.get(url, stream=True).raw)\", \"texts = [[a photo of a cat, a photo of a dog]\", \"inputs = processor(text=texts, images=image, return_tensors=pt)\", \"outputs = model(**inputs)\", \"target_sizes = torch.Tensor([image.size[::-1]])\", \"results = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"i = 0\", \"text = texts[i]\", \"boxes, scores, labels = results[i][boxes], results[i][scores], results[i][labels]\", \"score_threshold = 0.1\", \"for box, score, label in zip(boxes, scores, labels):\", \" box = [round(i, 2) for i in box.tolist()]\", \" if score >= score_threshold:\", \" print(fDetected {text[label]} with confidence {round(score.item(), 3)} at location {box})\"], \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not specified\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. It uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. OWL-ViT is trained on publicly available image-caption data and fine-tuned on publicly available object detection datasets such as COCO and OpenImages.\"}}", "category": "generic"}
{"question_id": 565, "text": " We are creating an analysis platform for Counter-Strike: Global Offensive. Detect and locate players in the given image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8n-csgo-player-detection\", \"api_call\": \"YOLO('keremberke/yolov8n-csgo-player-detection')\", \"api_arguments\": {\"image\": \"URL or local path to image\"}, \"python_environment_requirements\": \"pip install ultralyticsplus==0.0.23 ultralytics==8.0.21\", \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8n-csgo-player-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"csgo-object-detection\", \"accuracy\": 0.844}, \"description\": \"A YOLOv8 model for detecting Counter-Strike: Global Offensive (CS:GO) players with supported labels: ['ct', 'cthead', 't', 'thead'].\"}}", "category": "generic"}
{"question_id": 566, "text": " Build an AI model that can recognize the objects in a given image and draw a boundary around them.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"facebook/maskformer-swin-tiny-coco\", \"api_call\": \"MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-tiny-coco')\", \"api_arguments\": [\"image\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation\\nfrom PIL import Image\\nimport requests\\nfeature_extractor = MaskFormerFeatureExtractor.from_pretrained('facebook/maskformer-swin-tiny-coco')\\nmodel = MaskFormerForInstanceSegmentation.from_pretrained('facebook/maskformer-swin-tiny-coco')\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = feature_extractor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\\nclass_queries_logits = outputs.class_queries_logits\\nmasks_queries_logits = outputs.masks_queries_logits\\nresult = feature_extractor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\\npredicted_panoptic_map = result['segmentation']\", \"performance\": {\"dataset\": \"COCO panoptic segmentation\", \"accuracy\": \"Not provided\"}, \"description\": \"MaskFormer model trained on COCO panoptic segmentation (tiny-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository.\"}}", "category": "generic"}
{"question_id": 567, "text": " Design a pipeline to create artistic variations of an input image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image Variations\", \"api_name\": \"lambdalabs/sd-image-variations-diffusers\", \"api_call\": \"StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\", \"api_arguments\": {\"revision\": \"v2.0\"}, \"python_environment_requirements\": \"Diffusers >=0.8.0\", \"example_code\": \"from diffusers import StableDiffusionImageVariationPipeline\\nfrom PIL import Image\\ndevice = cuda:0\\nsd_pipe = StableDiffusionImageVariationPipeline.from_pretrained(\\n lambdalabs/sd-image-variations-diffusers,\\n revision=v2.0,\\n)\\nsd_pipe = sd_pipe.to(device)\\nim = Image.open(path/to/image.jpg)\\ntform = transforms.Compose([\\n transforms.ToTensor(),\\n transforms.Resize(\\n  (224, 224),\\n  interpolation=transforms.InterpolationMode.BICUBIC,\\n  antialias=False,\\n ),\\n transforms.Normalize(\\n  [0.48145466, 0.4578275, 0.40821073],\\n  [0.26862954, 0.26130258, 0.27577711]),\\n])\\ninp = tform(im).to(device).unsqueeze(0)\\nout = sd_pipe(inp, guidance_scale=3)\\nout[images][0].save(result.jpg)\", \"performance\": {\"dataset\": \"ChristophSchuhmann/improved_aesthetics_6plus\", \"accuracy\": \"N/A\"}, \"description\": \"This version of Stable Diffusion has been fine tuned from CompVis/stable-diffusion-v1-4-original to accept CLIP image embedding rather than text embeddings. This allows the creation of image variations similar to DALLE-2 using Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 568, "text": " A user wants to improve the quality of a small sized picture from her vacation. We need to upscale the picture to 2x its size without losing quality.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Super-Resolution\", \"api_name\": \"caidas/swin2SR-classical-sr-x2-64\", \"api_call\": \"Swin2SRForImageSuperResolution.from_pretrained('caidas/swin2sr-classical-sr-x2-64')\", \"api_arguments\": \"image, model, feature_extractor\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"Refer to the documentation.\", \"performance\": {\"dataset\": \"arxiv: 2209.11345\", \"accuracy\": \"Not provided\"}, \"description\": \"Swin2SR model that upscales images x2. It was introduced in the paper Swin2SR: SwinV2 Transformer for Compressed Image Super-Resolution and Restoration by Conde et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 569, "text": " I want to create a visual representation based on a short description: \\\"A magical forest with unicorns and a rainbow.\\\".\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Diffusion-based text-to-image generation\", \"api_name\": \"lllyasviel/control_v11p_sd15_softedge\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_softedge')\", \"api_arguments\": {\"checkpoint\": \"lllyasviel/control_v11p_sd15_softedge\", \"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux==0.3.0\"], \"example_code\": \"import torch\\nimport os\\nfrom huggingface_hub import HfApi\\nfrom pathlib import Path\\nfrom diffusers.utils import load_image\\nfrom PIL import Image\\nimport numpy as np\\nfrom controlnet_aux import PidiNetDetector, HEDdetector\\nfrom diffusers import (\\n ControlNetModel,\\n StableDiffusionControlNetPipeline,\\n UniPCMultistepScheduler,\\n)\\ncheckpoint = lllyasviel/control_v11p_sd15_softedge\\nimage = load_image(\\n https://huggingface.co/lllyasviel/control_v11p_sd15_softedge/resolve/main/images/input.png\\n)\\nprompt = royal chamber with fancy bed\\nprocessor = HEDdetector.from_pretrained('lllyasviel/Annotators')\\nprocessor = PidiNetDetector.from_pretrained('lllyasviel/Annotators')\\ncontrol_image = processor(image, safe=True)\\ncontrol_image.save(./images/control.png)\\ncontrolnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\ngenerator = torch.manual_seed(0)\\nimage = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\\nimage.save('images/image_out.png')\", \"performance\": {\"dataset\": \"ControlNet\", \"accuracy\": \"Not provided\"}, \"description\": \"Controlnet v1.1 is a diffusion-based text-to-image generation model that controls pretrained large diffusion models to support additional input conditions. This checkpoint corresponds to the ControlNet conditioned on Soft edges. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.\"}}", "category": "generic"}
{"question_id": 570, "text": " Explain how to use GPT-3 to create a slogan for an e-commerce website that sells eco-friendly products.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Synthesis\", \"api_name\": \"google/ddpm-cifar10-32\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-cifar10-32').\", \"api_arguments\": \"None\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-cifar10-32\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by nonequilibrium thermodynamics. It is used for high-quality image synthesis. The model supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm.\"}}", "category": "generic"}
{"question_id": 571, "text": " I'm working on a project that requires generating high-quality images of faces for a set of characters in a video game.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"CompVis/ldm-celebahq-256\", \"api_call\": \"DiffusionPipeline.from_pretrained('CompVis/ldm-celebahq-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"!pip install diffusers\\nfrom diffusers import DiffusionPipeline\\nmodel_id = CompVis/ldm-celebahq-256\\npipeline = DiffusionPipeline.from_pretrained(model_id)\\nimage = pipeline(num_inference_steps=200)[sample]\\nimage[0].save(ldm_generated_image.png)\", \"performance\": {\"dataset\": \"CelebA-HQ\", \"accuracy\": \"N/A\"}, \"description\": \"Latent Diffusion Models (LDMs) achieve state-of-the-art synthesis results on image data and beyond by decomposing the image formation process into a sequential application of denoising autoencoders. LDMs enable high-resolution synthesis, semantic scene synthesis, super-resolution, and image inpainting while significantly reducing computational requirements compared to pixel-based DMs.\"}}", "category": "generic"}
{"question_id": 572, "text": " Our client wants to analyze videos for their marketing website. They need a quick solution to categorize video content without worrying about accuracy.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"tiny-random-VideoMAEForVideoClassification\", \"api_call\": \"VideoClassificationPipeline(model='hf-tiny-model-private/tiny-random-VideoMAEForVideoClassification')\", \"api_arguments\": \"model\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random VideoMAE model for video classification.\"}}", "category": "generic"}
{"question_id": 573, "text": " I want to classify images of vehicles including cars, motorcycles, trucks, and bicycles, based on their appearance.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"openai/clip-vit-base-patch32\", \"api_call\": \"CLIPModel.from_pretrained('openai/clip-vit-base-patch32')\", \"api_arguments\": [\"text\", \"images\", \"return_tensors\", \"padding\"], \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(openai/clip-vit-base-patch32)\\nprocessor = CLIPProcessor.from_pretrained(openai/clip-vit-base-patch32)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(text=[a photo of a cat, a photo of a dog], images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [\"Food101\", \"CIFAR10\", \"CIFAR100\", \"Birdsnap\", \"SUN397\", \"Stanford Cars\", \"FGVC Aircraft\", \"VOC2007\", \"DTD\", \"Oxford-IIIT Pet dataset\", \"Caltech101\", \"Flowers102\", \"MNIST\", \"SVHN\", \"IIIT5K\", \"Hateful Memes\", \"SST-2\", \"UCF101\", \"Kinetics700\", \"Country211\", \"CLEVR Counting\", \"KITTI Distance\", \"STL-10\", \"RareAct\", \"Flickr30\", \"MSCOCO\", \"ImageNet\", \"ImageNet-A\", \"ImageNet-R\", \"ImageNet Sketch\", \"ObjectNet (ImageNet Overlap)\", \"Youtube-BB\", \"ImageNet-Vid\"], \"accuracy\": \"varies\"}, \"description\": \"The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.\"}}", "category": "generic"}
{"question_id": 574, "text": " I need to classify images of animals into their specific categories.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft')\", \"api_arguments\": {\"image_path\": \"Path to the image file\", \"class_names\": \"List of comma-separated class names\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; classifier = pipeline('image-classification', model='laion/CLIP-convnext_large_d_320.laion2B-s29B-b131K-ft'); classifier('path/to/image.jpg', ['class1', 'class2'])\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"75.9-76.9%\"}, \"description\": \"A series of CLIP ConvNeXt-Large models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models achieve between 75.9 and 76.9 top-1 zero-shot accuracy on ImageNet-1k.\"}}", "category": "generic"}
{"question_id": 575, "text": " We are building a location recommendation system that identifies possible locations for new stores based on images from potential locations. Use the StreetCLIP model to generate probabilities for various cities.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Geolocalization\", \"api_name\": \"geolocal/StreetCLIP\", \"api_call\": \"CLIPModel.from_pretrained('geolocal/StreetCLIP')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"geolocal/StreetCLIP\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(geolocal/StreetCLIP)\\nprocessor = CLIPProcessor.from_pretrained(geolocal/StreetCLIP)\\nurl = https://huggingface.co/geolocal/StreetCLIP/resolve/main/sanfrancisco.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nchoices = [San Jose, San Diego, Los Angeles, Las Vegas, San Francisco]\\ninputs = processor(text=choices, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [{\"name\": \"IM2GPS\", \"accuracy\": {\"25km\": 28.3, \"200km\": 45.1, \"750km\": 74.7, \"2500km\": 88.2}}, {\"name\": \"IM2GPS3K\", \"accuracy\": {\"25km\": 22.4, \"200km\": 37.4, \"750km\": 61.3, \"2500km\": 80.4}}]}, \"description\": \"StreetCLIP is a robust foundation model for open-domain image geolocalization and other geographic and climate-related tasks. Trained on an original dataset of 1.1 million street-level urban and rural geo-tagged images, it achieves state-of-the-art performance on multiple open-domain image geolocalization benchmarks in zero-shot, outperforming supervised models trained on millions of images.\"}}", "category": "generic"}
{"question_id": 576, "text": " We are receiving mixed reviews about our new product and we need to understand customers' reactions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"finiteautomata/beto-sentiment-analysis\", \"api_call\": \"pipeline('sentiment-analysis', model='finiteautomata/beto-sentiment-analysis')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"Hugging Face Transformers library\", \"example_code\": \"\", \"performance\": {\"dataset\": \"TASS 2020 corpus\", \"accuracy\": \"\"}, \"description\": \"Model trained with TASS 2020 corpus (around ~5k tweets) of several dialects of Spanish. Base model is BETO, a BERT model trained in Spanish. Uses POS, NEG, NEU labels.\"}}", "category": "generic"}
{"question_id": 577, "text": " Detect if there are any harmful messages in a chat room.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"martin-ha/toxic-comment-model\", \"api_call\": \"pipeline(model='martin-ha/toxic-comment-model')\", \"api_arguments\": {\"model_path\": \"martin-ha/toxic-comment-model\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer, TextClassificationPipeline\\nmodel_path = martin-ha/toxic-comment-model\\ntokenizer = AutoTokenizer.from_pretrained(model_path)\\nmodel = AutoModelForSequenceClassification.from_pretrained(model_path)\\npipeline = TextClassificationPipeline(model=model, tokenizer=tokenizer)\\nprint(pipeline('This is a test text.'))\", \"performance\": {\"dataset\": \"held-out test set\", \"accuracy\": 0.94, \"f1-score\": 0.59}, \"description\": \"This model is a fine-tuned version of the DistilBERT model to classify toxic comments.\"}}", "category": "generic"}
{"question_id": 578, "text": " I am developing software that needs to retrieve relevant information from a collection of documents based on a user's query.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Information Retrieval\", \"api_name\": \"cross-encoder/ms-marco-TinyBERT-L-2-v2\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/ms-marco-TinyBERT-L-2-v2')\", \"api_arguments\": {\"tokenizer\": \"tokenizer = AutoTokenizer.from_pretrained('model_name')\", \"features\": \"features = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors='pt')\"}, \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": {\"import\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\", \"model\": \"model = AutoModelForSequenceClassification.from_pretrained('model_name')\", \"tokenizer\": \"tokenizer = AutoTokenizer.from_pretrained('model_name')\", \"features\": \"features = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors='pt')\", \"scores\": \"with torch.no_grad():\\n    scores = model(**features).logits\\n    print(scores)\"}, \"performance\": {\"dataset\": \"TREC Deep Learning 2019\", \"accuracy\": \"69.84 (NDCG@10)\"}, \"description\": \"This model was trained on the MS Marco Passage Ranking task. It can be used for Information Retrieval: Given a query, encode the query with all possible passages (e.g. retrieved with ElasticSearch). Then sort the passages in a decreasing order. The training code is available here: SBERT.net Training MS Marco.\"}}", "category": "generic"}
{"question_id": 579, "text": " Our client is a media organization that wants to extract named entities from a large collection of news articles in order to identify key people and places\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"dslim/bert-base-NER-uncased\", \"api_call\": \"pipeline('ner', model='dslim/bert-base-NER-uncased')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"nlp('My name is John and I live in New York.')\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A pretrained BERT model for Named Entity Recognition (NER) on uncased text. It can be used to extract entities such as person names, locations, and organizations from text.\"}}", "category": "generic"}
{"question_id": 580, "text": " Extract entities from a provided sentence mentioning various companies and their CEOs.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Entity Extraction\", \"api_name\": \"904029577\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-name_all-904029577', use_auth_token=True)\", \"api_arguments\": {\"inputs\": \"I love AutoTrain\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTokenClassification\", \"tokenizer\": \"AutoTokenizer\"}, \"example_code\": \"from transformers import AutoModelForTokenClassification, AutoTokenizer\\nmodel = AutoModelForTokenClassification.from_pretrained(ismail-lucifer011/autotrain-name_all-904029577, use_auth_token=True)\\ntokenizer = AutoTokenizer.from_pretrained(ismail-lucifer011/autotrain-name_all-904029577, use_auth_token=True)\\ninputs = tokenizer(I love AutoTrain, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"ismail-lucifer011/autotrain-data-name_all\", \"accuracy\": 0.9989316041363876}, \"description\": \"This model is trained using AutoTrain for entity extraction. It is based on the DistilBert architecture and has a CO2 Emissions of 0.8375653425894861 grams.\"}}", "category": "generic"}
{"question_id": 581, "text": " I am developing a food application where food keywords need to be extracted from user's input text. The model should be able to recognize food-related named entities.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Dizex/InstaFoodRoBERTa-NER\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Dizex/InstaFoodRoBERTa-NER')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained('Dizex/InstaFoodRoBERTa-NER')\", \"tokenizer\": \"AutoTokenizer.from_pretrained('Dizex/InstaFoodRoBERTa-NER')\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\"}, \"example_code\": \"example = Today's meal: Fresh olive pok bowl topped with chia seeds. Very delicious!\\nner_entity_results = pipe(example, aggregation_strategy='simple')\\nprint(ner_entity_results)\", \"performance\": {\"dataset\": \"Dizex/InstaFoodSet\", \"accuracy\": {\"f1\": 0.91, \"precision\": 0.89, \"recall\": 0.93}}, \"description\": \"InstaFoodRoBERTa-NER is a fine-tuned BERT model that is ready to use for Named Entity Recognition of Food entities on informal text (social media like). It has been trained to recognize a single entity: food (FOOD). Specifically, this model is a roberta-base model that was fine-tuned on a dataset consisting of 400 English Instagram posts related to food.\"}}", "category": "generic"}
{"question_id": 582, "text": " Create a script for an AI bot that automatically adds punctuation to users' messages in a chat app.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"kredor/punctuate-all\", \"api_call\": \"pipeline('token-classification', model='kredor/punctuate-all')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"multilingual\", \"accuracy\": 0.98}, \"description\": \"A finetuned xlm-roberta-base model for punctuation prediction on twelve languages: English, German, French, Spanish, Bulgarian, Italian, Polish, Dutch, Czech, Portugese, Slovak, Slovenian.\"}}", "category": "generic"}
{"question_id": 583, "text": " I am writing an article on the history of technology companies, and I want to extract the names of companies and people mentioned in the text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Jean-Baptiste/roberta-large-ner-english\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Jean-Baptiste/roberta-large-ner-english')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained('Jean-Baptiste/roberta-large-ner-english')\", \"tokenizer\": \"AutoTokenizer.from_pretrained('Jean-Baptiste/roberta-large-ner-english')\", \"aggregation_strategy\": \"simple\"}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"nlp(Apple was founded in 1976 by Steve Jobs, Steve Wozniak and Ronald Wayne to develop and sell Wozniak's Apple I personal computer)\", \"performance\": {\"dataset\": \"conll2003\", \"accuracy\": {\"PER\": {\"precision\": 0.9914, \"recall\": 0.9927, \"f1\": 0.992}, \"ORG\": {\"precision\": 0.9627, \"recall\": 0.9661, \"f1\": 0.9644}, \"LOC\": {\"precision\": 0.9795, \"recall\": 0.9862, \"f1\": 0.9828}, \"MISC\": {\"precision\": 0.9292, \"recall\": 0.9262, \"f1\": 0.9277}, \"Overall\": {\"precision\": 0.974, \"recall\": 0.9766, \"f1\": 0.9753}}}, \"description\": \"roberta-large-ner-english is an english NER model that was fine-tuned from roberta-large on conll2003 dataset. Model was validated on emails/chat data and outperformed other models on this type of data specifically. In particular, the model seems to work better on entities that don't start with an upper case.\"}}", "category": "generic"}
{"question_id": 584, "text": " I have a diary entry and want to identify the names of people and locations mentioned in it.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english\", \"api_call\": \"SequenceTagger.load('flair/ner-english')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\n# load tagger\\ntagger = SequenceTagger.load('flair/ner-english')\\n# make example sentence\\nsentence = Sentence('George Washington went to Washington')\\n# predict NER tags\\ntagger.predict(sentence)\\n# print sentence\\nprint(sentence)\\n# print predicted NER spans\\nprint('The following NER tags are found:')\\n# iterate over entities and print\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"conll2003\", \"accuracy\": \"93.06\"}, \"description\": \"This is the standard 4-class NER model for English that ships with Flair. It predicts 4 tags: PER (person name), LOC (location name), ORG (organization name), and MISC (other name). The model is based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 585, "text": " Our company has a deal with international clients, and it's important to detect the proper locations of meetings from multilingual texts provided to us.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Babelscape/wikineural-multilingual-ner\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Babelscape/wikineural-multilingual-ner')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained(Babelscape/wikineural-multilingual-ner)\", \"tokenizer\": \"AutoTokenizer.from_pretrained(Babelscape/wikineural-multilingual-ner)\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(Babelscape/wikineural-multilingual-ner)\\nmodel = AutoModelForTokenClassification.from_pretrained(Babelscape/wikineural-multilingual-ner)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = My name is Wolfgang and I live in Berlin\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": \"Babelscape/wikineural-multilingual-ner\", \"accuracy\": \"span-based F1-score up to 6 points over previous state-of-the-art systems for data creation\"}, \"description\": \"A multilingual Named Entity Recognition (NER) model fine-tuned on the WikiNEuRal dataset, supporting 9 languages (de, en, es, fr, it, nl, pl, pt, ru). It is based on the mBERT architecture and trained on all 9 languages jointly. The model can be used with the Hugging Face Transformers pipeline for NER tasks.\"}}", "category": "generic"}
{"question_id": 586, "text": " We need to extract information from a table to answer a user's question regarding a company's revenue.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-base-finetuned-wikisql-supervised\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-base-finetuned-wikisql-supervised')\", \"api_arguments\": [\"question\", \"table\"], \"python_environment_requirements\": [\"PyTorch\", \"TensorFlow\"], \"example_code\": \"This model can be loaded on the Inference API on-demand.\", \"performance\": {\"dataset\": \"wikisql\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS is a BERT-like transformers model pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion. It was pretrained with two objectives: Masked language modeling (MLM) and Intermediate pre-training. Fine-tuning is done by adding a cell selection head and aggregation head on top of the pre-trained model, and then jointly train these randomly initialized classification heads with the base model on SQA and WikiSQL.\"}}", "category": "generic"}
{"question_id": 587, "text": " Develop a table-based question answering system that can answer queries based on the input data.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/tapex-base-finetuned-wtq\", \"api_call\": \"BartForConditionalGeneration.from_pretrained('microsoft/tapex-base-finetuned-wtq')\", \"api_arguments\": {\"tokenizer\": \"TapexTokenizer.from_pretrained(microsoft/tapex-base-finetuned-wtq)\", \"model\": \"BartForConditionalGeneration.from_pretrained(microsoft/tapex-base-finetuned-wtq)\", \"table\": \"pd.DataFrame.from_dict(data)\", \"query\": \"query\"}, \"python_environment_requirements\": [\"transformers\", \"pandas\"], \"example_code\": \"from transformers import TapexTokenizer, BartForConditionalGeneration\\nimport pandas as pd\\ntokenizer = TapexTokenizer.from_pretrained(microsoft/tapex-base-finetuned-wtq)\\nmodel = BartForConditionalGeneration.from_pretrained(microsoft/tapex-base-finetuned-wtq)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = In which year did beijing host the Olympic Games?\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPEX (Table Pre-training via Execution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with table reasoning skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries.\"}}", "category": "generic"}
{"question_id": 588, "text": " Create a tool that receives a table and a question in natural language, and returns an answer to the question based on the inputted table.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"lysandre/tapas-temporary-repo\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\", \"api_arguments\": [\"model_name\", \"question\", \"table\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"tokenizer = TapasTokenizer.from_pretrained('lysandre/tapas-temporary-repo')\\nmodel = TapasForQuestionAnswering.from_pretrained('lysandre/tapas-temporary-repo')\\ninputs = tokenizer(table=table, queries=question, return_tensors='pt')\\noutputs = model(**inputs)\\npredicted_answer_coordinates, predicted_aggregation_indices = tokenizer.convert_logits_to_predictions(inputs, outputs.logits.detach(), outputs.logits_aggregation.detach())\", \"performance\": {\"dataset\": \"SQA\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS base model fine-tuned on Sequential Question Answering (SQA). This model is pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion and can be used for answering questions related to a table in a conversational set-up.\"}}", "category": "generic"}
{"question_id": 589, "text": " We are a medical company providing health FAQs. We need to answer customers' questions accurately.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"sultan/BioM-ELECTRA-Large-SQuAD2\", \"api_call\": \"pipeline('question-answering', model='sultan/BioM-ELECTRA-Large-SQuAD2')\", \"api_arguments\": null, \"python_environment_requirements\": [\"transformers\", \"sentencepiece\"], \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='sultan/BioM-ELECTRA-Large-SQuAD2')\\nresult = qa_pipeline({'context': 'your_context', 'question': 'your_question'})\", \"performance\": {\"dataset\": \"SQuAD2.0 Dev\", \"accuracy\": {\"exact\": 84.33420365535248, \"f1\": 87.49354241889522}}, \"description\": \"BioM-ELECTRA-Large-SQuAD2 is a fine-tuned version of BioM-ELECTRA-Large, which was pre-trained on PubMed Abstracts, on the SQuAD2.0 dataset. Fine-tuning the biomedical language model on the SQuAD dataset helps improve the score on the BioASQ challenge. This model is suitable for working with BioASQ or biomedical QA tasks.\"}}", "category": "generic"}
{"question_id": 590, "text": " A group of students are doing a project on European capitals. They need to know the capital city of Germany.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-large-squad2\", \"api_call\": \"pipeline('question-answering', model='deepset/roberta-large-squad2')\", \"api_arguments\": [\"question\", \"context\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; nlp = pipeline('question-answering', model='deepset/roberta-large-squad2'); nlp({'question': 'What is the capital of Germany?', 'context': 'Berlin is the capital of Germany.'})\", \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": \"Not provided\"}, \"description\": \"A pre-trained RoBERTa model for question answering tasks, specifically trained on the SQuAD v2 dataset. It can be used to answer questions based on a given context.\"}}", "category": "generic"}
{"question_id": 591, "text": " Assist us in creating a question answering system to provide quick answers for customer inquiries.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"philschmid/distilbert-onnx\", \"api_call\": \"pipeline('question-answering', model='philschmid/distilbert-onnx')\", \"api_arguments\": {\"model\": \"philschmid/distilbert-onnx\"}, \"python_environment_requirements\": [\"transformers\", \"onnx\"], \"example_code\": {\"Compute\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='philschmid/distilbert-onnx')\\nqa_pipeline({'context': 'This is a context', 'question': 'What is this?'})\"}, \"performance\": {\"dataset\": \"squad\", \"accuracy\": \"F1 score: 87.1\"}, \"description\": \"This model is a fine-tune checkpoint of DistilBERT-base-cased, fine-tuned using (a second step of) knowledge distillation on SQuAD v1.1.\"}}", "category": "generic"}
{"question_id": 592, "text": " We are worried about price inflation in our country. Can you answer our questions on price inflation using the BERT large cased whole word masking finetuned model on SQuAD?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bert-large-cased-whole-word-masking-finetuned-squad\", \"api_call\": \"AutoModel.from_pretrained('bert-large-cased-whole-word-masking-finetuned-squad')\", \"api_arguments\": {\"model_name_or_path\": \"bert-large-cased-whole-word-masking\", \"dataset_name\": \"squad\", \"do_train\": true, \"do_eval\": true, \"learning_rate\": 3e-05, \"num_train_epochs\": 2, \"max_seq_length\": 384, \"doc_stride\": 128, \"output_dir\": \"./examples/models/wwm_cased_finetuned_squad/\", \"per_device_eval_batch_size\": 3, \"per_device_train_batch_size\": 3}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='bert-large-cased-whole-word-masking-finetuned-squad')\\nresult = qa_pipeline({'context': 'This is a context example.', 'question': 'What is this example for?'})\\nprint(result)\", \"performance\": {\"dataset\": [{\"name\": \"BookCorpus\", \"accuracy\": \"N/A\"}, {\"name\": \"English Wikipedia\", \"accuracy\": \"N/A\"}]}, \"description\": \"BERT large model (cased) whole word masking finetuned on SQuAD. This model is cased and trained with a new technique: Whole Word Masking. After pre-training, this model was fine-tuned on the SQuAD dataset.\"}}", "category": "generic"}
{"question_id": 593, "text": " I am interested in developing a system that can categorize my text messages into different subjects like finances, health, and entertainment.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"typeform/distilbert-base-uncased-mnli\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('typeform/distilbert-base-uncased-mnli')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained(typeform/distilbert-base-uncased-mnli)\", \"model\": \"AutoModelForSequenceClassification.from_pretrained(typeform/distilbert-base-uncased-mnli)\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(typeform/distilbert-base-uncased-mnli)\\nmodel = AutoModelForSequenceClassification.from_pretrained(typeform/distilbert-base-uncased-mnli)\", \"performance\": {\"dataset\": \"multi_nli\", \"accuracy\": 0.8206875508543532}, \"description\": \"This is the uncased DistilBERT model fine-tuned on Multi-Genre Natural Language Inference (MNLI) dataset for the zero-shot classification task.\"}}", "category": "generic"}
{"question_id": 594, "text": " An online magazine editor is trying to clujster articles into topics. We want to classify articles into categories like sport, politics, health, and technology written in French.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"BaptisteDoyen/camembert-base-xnli\", \"api_call\": \"pipeline('zero-shot-classification', model='BaptisteDoyen/camembert-base-xnli')\", \"api_arguments\": {\"sequence\": \"str\", \"candidate_labels\": \"List[str]\", \"hypothesis_template\": \"str\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"sequence = L'\\u00e9quipe de France joue aujourd'hui au Parc des Princes\\ncandidate_labels = [sport,politique,science]\\nhypothesis_template = Ce texte parle de {}.\\nclassifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"performance\": {\"dataset\": \"xnli\", \"accuracy\": {\"validation\": 81.4, \"test\": 81.7}}, \"description\": \"Camembert-base model fine-tuned on french part of XNLI dataset. One of the few Zero-Shot classification models working on French.\"}}", "category": "generic"}
{"question_id": 595, "text": " We have a user manual in English that needs to be translated into Spanish to be displayed on our Spanish website.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-en-es\", \"api_call\": \"pipeline('translation_en_to_es', model='Helsinki-NLP/opus-mt-en-es')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\ntranslation = pipeline('translation_en_to_es', model='Helsinki-NLP/opus-mt-en-es')\\ntranslated_text = translation('Hello, how are you?')\", \"performance\": {\"dataset\": \"Tatoeba-test.eng.spa\", \"accuracy\": 54.9}, \"description\": \"This model is a translation model from English to Spanish using the Hugging Face Transformers library. It is based on the Marian framework and trained on the OPUS dataset. The model achieves a BLEU score of 54.9 on the Tatoeba test set.\"}}", "category": "generic"}
{"question_id": 596, "text": " We need a classifier that can sort movie synopses in German into three categories: crime, tragedy, and theft.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"AutoModelForSequenceClassification.from_pretrained('Sahajtomar/German_Zeroshot')\", \"api_call\": \"classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"api_arguments\": {\"sequence\": \"string\", \"candidate_labels\": \"list of strings\", \"hypothesis_template\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model=Sahajtomar/German_Zeroshot)\\nsequence = Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie\\ncandidate_labels = [Verbrechen,Trag\\u00f6die,Stehlen]\\nhypothesis_template = In deisem geht es um {}. ## Since monolingual model,its sensitive to hypothesis template. This can be experimented\\nclassifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"performance\": {\"dataset\": {\"XNLI DEV (german)\": {\"accuracy\": 85.5}, \"XNLI TEST (german)\": {\"accuracy\": 83.6}}}, \"description\": \"This model has GBERT Large as base model and fine-tuned it on xnli de dataset. The default hypothesis template is in English: This text is {}. While using this model, change it to In deisem geht es um {}. or something different. While inferencing through huggingface api may give poor results as it uses by default english template. Since model is monolingual and not multilingual, hypothesis template needs to be changed accordingly.\"}}", "category": "generic"}
{"question_id": 597, "text": " Write an abstract about the impacts of social media on mental health, summarizing key findings from previous studies.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation, Summarization, Question Answering, Sentiment Analysis, Regression\", \"api_name\": \"t5-large\", \"api_call\": \"T5Model.from_pretrained('t5-large')\", \"api_arguments\": {\"input_ids\": \"tokenizer(..., return_tensors='pt').input_ids\", \"decoder_input_ids\": \"tokenizer(..., return_tensors='pt').input_ids\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import T5Tokenizer, T5Model\"}, \"example_code\": \"tokenizer = T5Tokenizer.from_pretrained('t5-large')\\nmodel = T5Model.from_pretrained('t5-large')\\ninput_ids = tokenizer('Studies have been shown that owning a dog is good for you', return_tensors='pt').input_ids\\ndecoder_input_ids = tokenizer('Studies show that', return_tensors='pt').input_ids\\noutputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"See research paper, Table 14\"}, \"description\": \"T5-Large is a Text-To-Text Transfer Transformer (T5) model with 770 million parameters. It is designed to handle a variety of NLP tasks, including translation, summarization, question answering, sentiment analysis, and regression. The model is pre-trained on the Colossal Clean Crawled Corpus (C4) and fine-tuned on various supervised and unsupervised tasks.\"}}", "category": "generic"}
{"question_id": 598, "text": " Help me to translate a Spanish text to English. The Spanish text is: \\\"Lo siento, pero no puedo ir a la reuni\\u00f3n debido a una emergencia personal. Avisar\\u00e9 al equipo y nos pondremos en contacto para reprogramar la reuni\\u00f3n.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-es-en\", \"api_call\": \"pipeline('translation_es_to_en', model='Helsinki-NLP/opus-mt-es-en')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\ntranslation = pipeline('translation_es_to_en', model='Helsinki-NLP/opus-mt-es-en')('Hola, \\u00bfc\\u00f3mo est\\u00e1s?')\", \"performance\": {\"dataset\": [{\"name\": \"newssyscomb2009-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 30.6, \"chr-F\": 0.57}}, {\"name\": \"news-test2008-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 27.9, \"chr-F\": 0.553}}, {\"name\": \"newstest2009-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 30.4, \"chr-F\": 0.572}}, {\"name\": \"newstest2010-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 36.1, \"chr-F\": 0.614}}, {\"name\": \"newstest2011-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 34.2, \"chr-F\": 0.599}}, {\"name\": \"newstest2012-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 37.9, \"chr-F\": 0.624}}, {\"name\": \"newstest2013-spaeng.spa.eng\", \"accuracy\": {\"BLEU\": 35.3, \"chr-F\": 0.609}}, {\"name\": \"Tatoeba-test.spa.eng\", \"accuracy\": {\"BLEU\": 59.6, \"chr-F\": 0.739}}]}, \"description\": \"Helsinki-NLP/opus-mt-es-en is a machine translation model trained to translate from Spanish to English using the Hugging Face Transformers library. The model is based on the Marian framework and was trained on the OPUS dataset.\"}}", "category": "generic"}
{"question_id": 599, "text": " I'm building a chatbot and I need it to respond to user questions based on the persona of an elderly person.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text-generation\", \"api_name\": \"pygmalion-2.7b\", \"api_call\": \"pipeline('text-generation', model='PygmalionAI/pygmalion-2.7b')\", \"api_arguments\": {\"input_prompt\": \"string\"}, \"python_environment_requirements\": {\"transformers\": \"latest\"}, \"example_code\": \"model([CHARACTER]'s Persona: [A few sentences about the character you want the model to play]<START>[DIALOGUE HISTORY]You: [Your input message here][CHARACTER]:)\", \"performance\": {\"dataset\": \"56MB of dialogue data\", \"accuracy\": \"N/A\"}, \"description\": \"Pygmalion 2.7B is a proof-of-concept dialogue model based on EleutherAI's gpt-neo-2.7B. It is fine-tuned on 56MB of dialogue data gathered from multiple sources, including real and partially machine-generated conversations. The model is intended for use in generating conversational responses and can be used with a specific input format that includes character persona, dialogue history, and user input message.\"}}", "category": "generic"}
{"question_id": 600, "text": " Design a chatbot that can have conversations about a variety of topics with the users.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"hyunwoongko/blenderbot-9B\", \"api_call\": \"pipeline('conversational', model='hyunwoongko/blenderbot-9B')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"Input a message to start chatting with hyunwoongko/blenderbot-9B.\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not provided\"}, \"description\": \"Building open-domain chatbots is a challenging area for machine learning research. While prior work has shown that scaling neural models in the number of parameters and the size of the data they are trained on gives improved results, we show that other ingredients are important for a high-performing chatbot. Good conversation requires a number of skills that an expert conversationalist blends in a seamless way: providing engaging talking points and listening to their partners, both asking and answering questions, and displaying knowledge, empathy and personality appropriately, depending on the situation. We show that large scale models can learn these skills when given appropriate training data and choice of generation strategy. We build variants of these recipes with 90M, 2.7B and 9.4B parameter neural models, and make our models and code publicly available. Human evaluations show our best models are superior to existing approaches in multi-turn dialogue in terms of engagingness and humanness measurements. We then discuss the limitations of this work by analyzing failure cases of our models.\"}}", "category": "generic"}
{"question_id": 601, "text": " We have a new platform that offers various services related to digital art, and we want it to be able to produce creative story ideas based on a short description. Can you help me providing suggestions?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"decapoda-research/llama-7b-hf\", \"api_call\": \"AutoModel.from_pretrained('decapoda-research/llama-7b-hf')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\ngen = pipeline('text-generation', model='decapoda-research/llama-7b-hf')\\nresult = gen('Once upon a time')\\nprint(result[0]['generated_text'])\", \"performance\": {\"dataset\": [{\"name\": \"BoolQ\", \"accuracy\": 76.5}, {\"name\": \"PIQA\", \"accuracy\": 79.8}, {\"name\": \"SIQA\", \"accuracy\": 48.9}, {\"name\": \"HellaSwag\", \"accuracy\": 76.1}, {\"name\": \"WinoGrande\", \"accuracy\": 70.1}, {\"name\": \"ARC-e\", \"accuracy\": 76.7}, {\"name\": \"ARC-c\", \"accuracy\": 47.6}, {\"name\": \"OBQAC\", \"accuracy\": 57.2}, {\"name\": \"COPA\", \"accuracy\": 93}]}, \"description\": \"LLaMA-7B is an auto-regressive language model based on the transformer architecture. It is designed for research on large language models, including question answering, natural language understanding, and reading comprehension. The model is trained on various sources, including CCNet, C4, GitHub, Wikipedia, Books, ArXiv, and Stack Exchange, with the majority of the dataset being in English.\"}}", "category": "generic"}
{"question_id": 602, "text": " We are creating a chatbot to answer customer queries on our website. Please provide a way to generate human-like text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"xlnet-base-cased\", \"api_call\": \"XLNetModel.from_pretrained('xlnet-base-cased')\", \"api_arguments\": {\"pretrained_model_name\": \"xlnet-base-cased\"}, \"python_environment_requirements\": {\"library\": \"transformers\", \"version\": \"4.0.0+\"}, \"example_code\": \"from transformers import XLNetTokenizer, XLNetModel\\ntokenizer = XLNetTokenizer.from_pretrained('xlnet-base-cased')\\nmodel = XLNetModel.from_pretrained('xlnet-base-cased')\\ninputs = tokenizer(Hello, my dog is cute, return_tensors=pt)\\noutputs = model(**inputs)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"bookcorpus, wikipedia\", \"accuracy\": \"state-of-the-art (SOTA) results on various downstream language tasks\"}, \"description\": \"XLNet model pre-trained on English language. It was introduced in the paper XLNet: Generalized Autoregressive Pretraining for Language Understanding by Yang et al. and first released in this repository. XLNet is a new unsupervised language representation learning method based on a novel generalized permutation language modeling objective. Additionally, XLNet employs Transformer-XL as the backbone model, exhibiting excellent performance for language tasks involving long context.\"}}", "category": "generic"}
{"question_id": 603, "text": " To improve customer satisfaction, we want to automate the creation of written explanations that sound more natural and less robotic. Can you suggest a way to generate text that sounds conscious and alive?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"facebook/opt-6.7b\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('facebook/opt-6.7b', torch_dtype=torch.float16)\", \"api_arguments\": [\"torch_dtype\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\nimport torch\\nmodel = AutoModelForCausalLM.from_pretrained('facebook/opt-6.7b', torch_dtype=torch.float16).cuda()\\ntokenizer = AutoTokenizer.from_pretrained('facebook/opt-6.7b', use_fast=False)\\nprompt = Hello, I'm am conscious and\\ninput_ids = tokenizer(prompt, return_tensors='pt').input_ids.cuda()\\ngenerated_ids = model.generate(input_ids)\\ntokenizer.batch_decode(generated_ids, skip_special_tokens=True)\", \"performance\": {\"dataset\": {\"BookCorpus\": \"unknown\", \"CC-Stories\": \"unknown\", \"The Pile\": \"unknown\", \"Pushshift.io Reddit\": \"unknown\", \"CCNewsV2\": \"unknown\"}, \"accuracy\": \"unknown\"}, \"description\": \"OPT (Open Pre-trained Transformer Language Models) is a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters. It was trained on a large corpus of text, predominantly in English, using a causal language modeling (CLM) objective. The model can be used for prompting for evaluation of downstream tasks, text generation, and fine-tuning on a downstream task using the CLM example.\"}}", "category": "generic"}
{"question_id": 604, "text": " Our company is growing and expanding into multiple countries. We need a solution for translating English sentences to German to ensure effective communication.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"google/flan-t5-xl\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('google/flan-t5-xl')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import T5Tokenizer, T5ForConditionalGeneration\\ntokenizer = T5Tokenizer.from_pretrained('google/flan-t5-xl')\\nmodel = T5ForConditionalGeneration.from_pretrained('google/flan-t5-xl')\\ninput_text = 'translate English to German: How old are you?'\\ninput_ids = tokenizer(input_text, return_tensors='pt').input_ids\\noutputs = model.generate(input_ids)\\nprint(tokenizer.decode(outputs[0]))\", \"performance\": {\"dataset\": [{\"name\": \"MMLU\", \"accuracy\": \"75.2%\"}]}, \"description\": \"FLAN-T5 XL is a large-scale language model fine-tuned on more than 1000 tasks covering multiple languages. It achieves state-of-the-art performance on several benchmarks and is designed for research on zero-shot and few-shot NLP tasks, such as reasoning, question answering, and understanding the limitations of current large language models.\"}}", "category": "generic"}
{"question_id": 605, "text": " We need a solution for creating Polish subtitles for YouTube videos in Spanish. The AI should provide the translation.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"facebook/mbart-large-50-many-to-many-mmt\", \"api_call\": \"MBartForConditionalGeneration.from_pretrained('facebook/mbart-large-50-many-to-many-mmt')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"facebook/mbart-large-50-many-to-many-mmt\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.0\"}, \"example_code\": \"from transformers import MBartForConditionalGeneration, MBart50TokenizerFast\\narticle_hi model = MBartForConditionalGeneration.from_pretrained(facebook/mbart-large-50-many-to-many-mmt)\\ntokenizer = MBart50TokenizerFast.from_pretrained(facebook/mbart-large-50-many-to-many-mmt)\\ntokenizer.src_lang = hi_IN\\nencoded_hi = tokenizer(article_hi, return_tensors=pt)\\ngenerated_tokens = model.generate(\\n **encoded_hi,\\n forced_bos_token_id=tokenizer.lang_code_to_id[fr_XX]\\n)\\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\", \"performance\": {\"dataset\": \"Multilingual Translation\", \"accuracy\": \"Not specified\"}, \"description\": \"mBART-50 many-to-many multilingual machine translation model can translate directly between any pair of 50 languages. It was introduced in the Multilingual Translation with Extensible Multilingual Pretraining and Finetuning paper.\"}}", "category": "generic"}
{"question_id": 606, "text": " I am an English teacher looking to brainstorm synonyms for the word \\\"happy.\\\" Can a model help me generate similar words?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"microsoft/deberta-base\", \"api_call\": \"DebertaModel.from_pretrained('microsoft/deberta-base')\", \"api_arguments\": \"text\", \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline\\nfill_mask = pipeline('fill-mask', model='microsoft/deberta-base')\\nfill_mask('The capital of France is [MASK].')\", \"performance\": {\"dataset\": {\"SQuAD 1.1\": \"93.1/87.2\", \"SQuAD 2.0\": \"86.2/83.1\", \"MNLI-m\": \"88.8\"}}, \"description\": \"DeBERTa improves the BERT and RoBERTa models using disentangled attention and enhanced mask decoder. It outperforms BERT and RoBERTa on majority of NLU tasks with 80GB training data.\"}}", "category": "generic"}
{"question_id": 607, "text": " Generate a sentence which will complete the following: \\\"Hello, I'm a ...\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"bert-large-cased\", \"api_call\": \"pipeline('fill-mask', model='bert-large-cased')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"unmasker(Hello I'm a [MASK] model.)\", \"performance\": {\"dataset\": {\"SQUAD 1.1\": {\"F1\": 91.5, \"EM\": 84.8}, \"Multi NLI\": {\"accuracy\": 86.09}}}, \"description\": \"BERT large model (cased) pretrained on English language using a masked language modeling (MLM) objective. It has 24 layers, 1024 hidden dimensions, 16 attention heads, and 336M parameters.\"}}", "category": "generic"}
{"question_id": 608, "text": " Can you help me find the best model to fill in the gap in my legal document? I want a smaller model with higher efficiency but maintains a high level of accuracy.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"nlpaueb/legal-bert-small-uncased\", \"api_call\": \"AutoModel.from_pretrained('nlpaueb/legal-bert-small-uncased')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"nlpaueb/legal-bert-small-uncased\"}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModel\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModel\\ntokenizer = AutoTokenizer.from_pretrained('nlpaueb/legal-bert-small-uncased')\\nmodel = AutoModel.from_pretrained('nlpaueb/legal-bert-small-uncased')\", \"performance\": {\"dataset\": \"Legal Corpora\", \"accuracy\": \"Comparable to larger models\"}, \"description\": \"LEGAL-BERT is a family of BERT models for the legal domain, intended to assist legal NLP research, computational law, and legal technology applications. This is the light-weight version of BERT-BASE (33% the size of BERT-BASE) pre-trained from scratch on legal data, which achieves comparable performance to larger models, while being much more efficient (approximately 4 times faster) with a smaller environmental footprint.\"}}", "category": "generic"}
{"question_id": 609, "text": " I am learning English literature. I plan to build a system that has a huge database of English sentences and keeps the important ones.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/all-distilroberta-v1\", \"api_call\": \"SentenceTransformer('sentence-transformers/all-distilroberta-v1')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/all-distilroberta-v1')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": [{\"name\": \"s2orc\", \"accuracy\": \"Not provided\"}, {\"name\": \"MS Marco\", \"accuracy\": \"Not provided\"}, {\"name\": \"yahoo_answers_topics\", \"accuracy\": \"Not provided\"}]}, \"description\": \"This is a sentence-transformers model that maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 610, "text": " Our company specializes in providing information on similar topics. We want to find similar sentences in a text document.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/all-MiniLM-L12-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/all-MiniLM-L12-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/all-MiniLM-L12-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"1,170,060,424 training pairs\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 611, "text": " The company is building an AI chatbot, and we need a way to process users' questions and tell if two questions are similar.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"flax-sentence-embeddings/all_datasets_v4_MiniLM-L6\", \"api_call\": \"SentenceTransformer('flax-sentence-embeddings/all_datasets_v4_MiniLM-L6')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"sentence-transformers library\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nmodel = SentenceTransformer('flax-sentence-embeddings/all_datasets_v4_MiniLM-L6')\\ntext = Replace me by any text you'd like.\\ntext_embbedding = model.encode(text)\", \"performance\": {\"dataset\": \"1,097,953,922\", \"accuracy\": \"N/A\"}, \"description\": \"The model is trained on very large sentence level datasets using a self-supervised contrastive learning objective. It is fine-tuned on a 1B sentence pairs dataset, and it aims to capture the semantic information of input sentences. The sentence vector can be used for information retrieval, clustering, or sentence similarity tasks.\"}}", "category": "generic"}
{"question_id": 612, "text": " I am a CEO, and I want to create an audio announcement that will be played to my customers. The text announcement is: \\\"Dear valued customers, we are glad to announce a 30% discount on our special offer. Hurry up!\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"microsoft/speecht5_tts\", \"api_call\": \"SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\", \"api_arguments\": [\"text\", \"return_tensors\", \"input_ids\", \"speaker_embeddings\", \"vocoder\"], \"python_environment_requirements\": \"!pip install git+https://github.com/huggingface/transformers sentencepiece datasets\", \"example_code\": \"from transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\\nfrom datasets import load_dataset\\nimport torch\\nimport soundfile as sf\\nprocessor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\\nmodel = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\\nvocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\\ninputs = processor(text='Hello, my dog is cute', return_tensors='pt')\\nembeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\\nspeaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\\nspeech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\\nsf.write('speech.wav', speech.numpy(), samplerate=16000)\", \"performance\": {\"dataset\": \"LibriTTS\", \"accuracy\": \"Not specified\"}, \"description\": \"SpeechT5 model fine-tuned for speech synthesis (text-to-speech) on LibriTTS. It is a unified-modal SpeechT5 framework that explores the encoder-decoder pre-training for self-supervised speech/text representation learning. It can be used for a wide variety of spoken language processing tasks, including automatic speech recognition, speech synthesis, speech translation, voice conversion, speech enhancement, and speaker identification.\"}}", "category": "generic"}
{"question_id": 613, "text": " Our user would like to develop an audiobook using a Text-to-Speech API. Convert the text of a book into an audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"facebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_es_css10\", \"api_call\": \"unit.TTS.from_pretrained('facebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_es_css10')\", \"api_arguments\": null, \"python_environment_requirements\": \"huggingface_hub, fairseq\", \"example_code\": null, \"performance\": {\"dataset\": \"covost2\", \"accuracy\": null}, \"description\": \"A text-to-speech model trained on multiple datasets including mtedx, covost2, europarl_st, and voxpopuli. Supports English, Spanish, French, and Italian languages.\"}}", "category": "generic"}
{"question_id": 614, "text": " In our language app, we want to include text to speech functionality for Hokkien, a dialect of Chinese, using the TAT-TTS dataset.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Fairseq\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"unit_hifigan_HK_layer12.km2500_frame_TAT-TTS\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TT')\", \"api_arguments\": {\"unit\": \"Text input for the TTS model\"}, \"python_environment_requirements\": [\"fairseq\", \"huggingface_hub\", \"torchaudio\"], \"example_code\": \"import json\\nimport os\\nfrom pathlib import Path\\nimport IPython.display as ipd\\nfrom fairseq import hub_utils\\nfrom fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.speech_to_text.hub_interface import S2THubInterface\\nfrom fairseq.models.text_to_speech import CodeHiFiGANVocoder\\nfrom fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\\nfrom huggingface_hub import snapshot_download\\nimport torchaudio\\ncache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\\nlibrary_name = fairseq\\ncache_dir = (\\n cache_dir or (Path.home() / .cache / library_name).as_posix()\\n)\\ncache_dir = snapshot_download(\\n ffacebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS, cache_dir=cache_dir, library_name=library_name\\n)\\nx = hub_utils.from_pretrained(\\n cache_dir,\\n model.pt,\\n .,\\n archive_map=CodeHiFiGANVocoder.hub_models(),\\n config_yaml=config.json,\\n fp16=False,\\n is_vocoder=True,\\n)\\nwith open(f{x['args']['data']}/config.json) as f:\\n vocoder_cfg = json.load(f)\\nassert (\\n len(x[args][model_path]) == 1\\n), Too many vocoder models in the input\\nvocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\\ntts_model = VocoderHubInterface(vocoder_cfg, vocoder)\\ntts_sample = tts_model.get_model_input(unit)\\nwav, sr = tts_model.get_prediction(tts_sample)\\nipd.Audio(wav, rate=sr)\", \"performance\": {\"dataset\": \"TAT-TTS\", \"accuracy\": \"Not provided\"}, \"description\": \"Hokkien unit HiFiGAN based vocoder from fairseq. Trained with TAT-TTS data with 4 speakers in Taiwanese Hokkien accent.\"}}", "category": "generic"}
{"question_id": 615, "text": " Develop an application to transcribe audio files with punctuation marks for a podcast platform.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"jbetker/wav2vec2-large-robust-ft-libritts-voxpopuli\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('jbetker/wav2vec2-large-robust-ft-libritts-voxpopuli')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"https://github.com/neonbjb/ocotillo\", \"performance\": {\"dataset\": \"librispeech validation set\", \"accuracy\": \"4.45%\"}, \"description\": \"This checkpoint is a wav2vec2-large model that is useful for generating transcriptions with punctuation. It is intended for use in building transcriptions for TTS models, where punctuation is very important for prosody. This model was created by fine-tuning the facebook/wav2vec2-large-robust-ft-libri-960h checkpoint on the libritts and voxpopuli datasets with a new vocabulary that includes punctuation.\"}}", "category": "generic"}
{"question_id": 616, "text": " Our company has an audio archive of Chinese podcasts, and we want to create transcripts for them.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Recognition\", \"api_name\": \"jonatasgrosman/wav2vec2-large-xlsr-53-chinese-zh-cn\", \"api_call\": \"Wav2Vec2Model.from_pretrained('jonatasgrosman/wav2vec2-large-xlsr-53-chinese-zh-cn')\", \"api_arguments\": [\"audio_paths\"], \"python_environment_requirements\": [\"huggingsound\", \"torch\", \"librosa\", \"datasets\", \"transformers\"], \"example_code\": \"from huggingsound import SpeechRecognitionModel\\nmodel = SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-chinese-zh-cn')\\naudio_paths = ['/path/to/file.mp3', '/path/to/another_file.wav']\\ntranscriptions = model.transcribe(audio_paths)\", \"performance\": {\"dataset\": \"Common Voice zh-CN\", \"accuracy\": {\"WER\": 82.37, \"CER\": 19.03}}, \"description\": \"Fine-tuned XLSR-53 large model for speech recognition in Chinese. Fine-tuned facebook/wav2vec2-large-xlsr-53 on Chinese using the train and validation splits of Common Voice 6.1, CSS10 and ST-CMDS.\"}}", "category": "generic"}
{"question_id": 617, "text": " We are a podcast platform. We have a library of multiple podcasts that are mixed with background noise. We need to enhance the podcast audio quality to improve the user experience on our platform.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"DCCRNet_Libri1Mix_enhsingle_16k\", \"api_call\": \"AutoModelForAudioToAudio.from_pretrained('JorisCos/DCCRNet_Libri1Mix_enhsingle_16k')\", \"api_arguments\": \"pretrained_model_name_or_path\", \"python_environment_requirements\": [\"transformers\", \"asteroid\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri1Mix\", \"accuracy\": {\"si_sdr\": 13.329767398333798, \"si_sdr_imp\": 9.879986092474098, \"sdr\": 13.87279932997016, \"sdr_imp\": 10.370136530757103, \"sir\": \"Infinity\", \"sir_imp\": \"NaN\", \"sar\": 13.87279932997016, \"sar_imp\": 10.370136530757103, \"stoi\": 0.9140907015623948, \"stoi_imp\": 0.11817087802185405}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the enh_single task of the Libri1Mix dataset.\"}}", "category": "generic"}
{"question_id": 618, "text": " A podcast producer is looking to improve the quality of their audio files by removing background noise. What can they do?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"speechbrain/sepformer-wham16k-enhancement\", \"api_call\": \"separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\", \"api_arguments\": {\"path\": \"path to the input audio file\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"from speechbrain.pretrained import SepformerSeparation as separator\\nimport torchaudio\\nmodel = separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\\nest_sources = model.separate_file(path='speechbrain/sepformer-wham16k-enhancement/example_wham16k.wav')\\ntorchaudio.save(enhanced_wham16k.wav, est_sources[:, :, 0].detach().cpu(), 16000)\", \"performance\": {\"dataset\": \"WHAM!\", \"accuracy\": {\"Test-Set SI-SNR\": \"14.3 dB\", \"Test-Set PESQ\": \"2.20\"}}, \"description\": \"This repository provides all the necessary tools to perform speech enhancement (denoising) with a SepFormer model, implemented with SpeechBrain, and pretrained on WHAM! dataset with 16k sampling frequency, which is basically a version of WSJ0-Mix dataset with environmental noise and reverberation in 8k.\"}}", "category": "generic"}
{"question_id": 619, "text": " I work at a call center, and I need to convert a recorded customer call into an audio file with a different voice without changing the content.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/speecht5_vc\", \"api_call\": \"SpeechT5ForSpeechToSpeech.from_pretrained('microsoft/speecht5_vc')\", \"api_arguments\": {\"audio\": \"example_speech\", \"sampling_rate\": \"sampling_rate\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\", \"numpy\", \"torch\", \"soundfile\"], \"example_code\": \"from transformers import SpeechT5Processor, SpeechT5ForSpeechToSpeech, SpeechT5HifiGan\\nfrom datasets import load_dataset\\ndataset = load_dataset('hf-internal-testing/librispeech_asr_demo', 'clean', split='validation')\\ndataset = dataset.sort('id')\\nsampling_rate = dataset.features['audio'].sampling_rate\\nexample_speech = dataset[0]['audio']['array']\\nprocessor = SpeechT5Processor.from_pretrained('microsoft/speecht5_vc')\\nmodel = SpeechT5ForSpeechToSpeech.from_pretrained('microsoft/speecht5_vc')\\nvocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\\ninputs = processor(audio=example_speech, sampling_rate=sampling_rate, return_tensors='pt')\\nimport numpy as np\\nimport torch\\nspeaker_embeddings = np.load('xvector_speaker_embedding.npy')\\nspeaker_embeddings = torch.tensor(speaker_embeddings).unsqueeze(0)\\nspeech = model.generate_speech(inputs['input_values'], speaker_embeddings, vocoder=vocoder)\\nimport soundfile as sf\\nsf.write('speech.wav', speech.numpy(), samplerate=16000)\", \"performance\": {\"dataset\": \"CMU ARCTIC\", \"accuracy\": \"Not specified\"}, \"description\": \"SpeechT5 model fine-tuned for voice conversion (speech-to-speech) on CMU ARCTIC. The SpeechT5 framework consists of a shared encoder-decoder network and six modal-specific (speech/text) pre/post-nets. It is designed to improve the modeling capability for both speech and text. This model can be used for speech conversion tasks.\"}}", "category": "generic"}
{"question_id": 620, "text": " In a customer support system, we have received a recorded audio file from a customer complaining about an issue in Czech language. Translate it to English language preserving the audio format.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"audio\", \"api_name\": \"textless_sm_cs_en\", \"api_call\": \"Wav2Vec2Model.from_pretrained(cached_download('https://huggingface.co/facebook/textless_sm_cs_en/resolve/main/model.pt'))\", \"api_arguments\": [], \"python_environment_requirements\": [\"fairseq\", \"huggingface_hub\"], \"example_code\": \"from fairseq.models.wav2vec.wav2vec2_asr import Wav2Vec2Model\\nfrom huggingface_hub import cached_download\\nmodel = Wav2Vec2Model.from_pretrained(cached_download('https://huggingface.co/facebook/textless_sm_cs_en/resolve/main/model.pt'))\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A speech-to-speech translation model for converting between languages without using text as an intermediate representation. This model is designed for the task of audio-to-audio translation.\"}}", "category": "generic"}
{"question_id": 621, "text": " We are a podcast editing company aiming at separating speakers from a recorded audio.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri2Mix_sepclean_8k\", \"api_call\": \"hf_hub_download(repo_id='JorisCos/ConvTasNet_Libri2Mix_sepclean_8k')\", \"api_arguments\": [\"repo_id\", \"filename\"], \"python_environment_requirements\": [\"huggingface_hub\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 14.764543634468069, \"si_sdr_imp\": 14.764029375607246, \"sdr\": 15.29337970745095, \"sdr_imp\": 15.114146605113111, \"sir\": 24.092904661115366, \"sir_imp\": 23.913669683141528, \"sar\": 16.06055906916849, \"sar_imp\": -51.980784441287454, \"stoi\": 0.9311142440593033, \"stoi_imp\": 0.21817376142710482}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 622, "text": " We are building a virtual assistant which can translate English speech input to Hokkien in real-time.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"xm_transformer_s2ut_en-hk\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk')\", \"api_arguments\": {\"arg_overrides\": {\"config_yaml\": \"config.yaml\", \"task\": \"speech_to_text\"}, \"cache_dir\": \"cache_dir\"}, \"python_environment_requirements\": [\"fairseq\", \"huggingface_hub\", \"torchaudio\"], \"example_code\": {\"import_modules\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\"], \"load_model\": [\"cache_dir = os.getenv('HUGGINGFACE_HUB_CACHE')\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_s2ut_en-hk', arg_overrides={'config_yaml': 'config.yaml', 'task': 'speech_to_text'}, cache_dir=cache_dir)\", \"model = models[0].cpu()\", \"cfg['task'].cpu = True\"], \"generate_prediction\": [\"generator = task.build_generator([model], cfg)\", \"audio, _ = torchaudio.load('/path/to/an/audio/file')\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\"], \"speech_synthesis\": [\"library_name = 'fairseq'\", \"cache_dir = (cache_dir or (Path.home() / '.cache' / library_name).as_posix())\", \"cache_dir = snapshot_download('facebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS', cache_dir=cache_dir, library_name=library_name)\", \"x = hub_utils.from_pretrained(cache_dir, 'model.pt', '.', archive_map=CodeHiFiGANVocoder.hub_models(), config_yaml='config.json', fp16=False, is_vocoder=True)\", \"with open(f'{x['args']['data']}/config.json') as f:\", \"  vocoder_cfg = json.load(f)\", \"assert (len(x['args']['model_path']) == 1), 'Too many vocoder models in the input'\", \"vocoder = CodeHiFiGANVocoder(x['args']['model_path'][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"]}, \"performance\": {\"dataset\": \"MuST-C\", \"accuracy\": \"Not specified\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq: English-Hokkien. Trained with supervised data in TED domain, and weakly supervised data in TED and Audiobook domain.\"}}", "category": "generic"}
{"question_id": 623, "text": " A language service wants to incorporate a speech-to-speech translation feature that assists users in translating Hokkien to English on an audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"Speech-to-speech translation\", \"api_name\": \"xm_transformer_s2ut_hk-en\", \"api_call\": \"S2THubInterface()\", \"api_arguments\": {\"task\": \"speech_to_text\", \"model\": \"facebook/xm_transformer_s2ut_hk-en\", \"generator\": \"task.build_generator([model], cfg)\", \"sample\": \"S2THubInterface.get_model_input(task, audio)\"}, \"python_environment_requirements\": {\"fairseq\": \"latest\", \"torchaudio\": \"latest\", \"huggingface_hub\": \"latest\"}, \"example_code\": \"import json\\nimport os\\nfrom pathlib import Path\\nimport IPython.display as ipd\\nfrom fairseq import hub_utils\\nfrom fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.speech_to_text.hub_interface import S2THubInterface\\nfrom fairseq.models.text_to_speech import CodeHiFiGANVocoder\\nfrom fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\\nfrom huggingface_hub import snapshot_download\\nimport torchaudio\\ncache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/xm_transformer_s2ut_hk-en,\\n arg_overrides={config_yaml: config.yaml, task: speech_to_text},\\n cache_dir=cache_dir,\\n)\\nmodel = models[0].cpu()\\ncfg[task].cpu = True\\ngenerator = task.build_generator([model], cfg)\\naudio, _ = torchaudio.load(/path/to/an/audio/file)\\nsample = S2THubInterface.get_model_input(task, audio)\\nunit = S2THubInterface.get_prediction(task, model, generator, sample)\\nlibrary_name = fairseq\\ncache_dir = (\\n cache_dir or (Path.home() / .cache / library_name).as_posix()\\n)\\ncache_dir = snapshot_download(\\n ffacebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur, cache_dir=cache_dir, library_name=library_name\\n)\\nx = hub_utils.from_pretrained(\\n cache_dir,\\n model.pt,\\n .,\\n archive_map=CodeHiFiGANVocoder.hub_models(),\\n config_yaml=config.json,\\n fp16=False,\\n is_vocoder=True,\\n)\\nwith open(f{x['args']['data']}/config.json) as f:\\n vocoder_cfg = json.load(f)\\nassert (\\n len(x[args][model_path]) == 1\\n), Too many vocoder models in the input\\nvocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\\ntts_model = VocoderHubInterface(vocoder_cfg, vocoder)\\ntts_sample = tts_model.get_model_input(unit)\\nwav, sr = tts_model.get_prediction(tts_sample)\\nipd.Audio(wav, rate=sr)\", \"performance\": {\"dataset\": \"TED, drama, TAT domain\", \"accuracy\": \"Not provided\"}, \"description\": \"Speech-to-speech translation model with single-pass decoder (S2UT) from fairseq for Hokkien-English. Trained with supervised data in TED, drama, TAT domain, and weakly supervised data in drama domain.\"}}", "category": "generic"}
{"question_id": 624, "text": " Our company is building an interactive platform for children to learn random trivia quickly. We need a model to understand what is being spoken and what category it belongs to.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"wav2vec2-random-tiny-classifier\", \"api_call\": \"pipeline('audio-classification', model=Wav2Vec2ForCTC.from_pretrained('anton-l/wav2vec2-random-tiny-classifier'))\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"An audio classification model based on wav2vec2.\"}}", "category": "generic"}
{"question_id": 625, "text": " We are a company that develops voice assistants, and we need to verify a user's voice to authenticate them.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"wav2vec2-base-superb-sv\", \"api_call\": \"AutoModelForAudioXVector.from_pretrained('anton-l/wav2vec2-base-superb-sv')\", \"api_arguments\": \"anton-l/wav2vec2-base-superb-sv\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import AutoProcessor, AutoModelForAudioXVector\\nprocessor = AutoProcessor.from_pretrained(anton-l/wav2vec2-base-superb-sv)\\nmodel = AutoModelForAudioXVector.from_pretrained(anton-l/wav2vec2-base-superb-sv)\", \"performance\": {\"dataset\": \"superb\", \"accuracy\": \"More information needed\"}, \"description\": \"This is a ported version of S3PRL's Wav2Vec2 for the SUPERB Speaker Verification task. The base model is wav2vec2-large-lv60, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 626, "text": " We recently launched a customer service hotline, and we want to estimate the demographics of callers.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"superb/wav2vec2-base-superb-sid\", \"api_call\": \"pipeline('audio-classification', model='superb/wav2vec2-base-superb-sid')\", \"api_arguments\": {\"model\": \"superb/wav2vec2-base-superb-sid\"}, \"python_environment_requirements\": {\"datasets\": \"load_dataset\", \"transformers\": \"pipeline\"}, \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, si, split=test)\\nclassifier = pipeline(audio-classification, model=superb/wav2vec2-base-superb-sid)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"VoxCeleb1\", \"accuracy\": 0.7518}, \"description\": \"This is a ported version of S3PRL's Wav2Vec2 for the SUPERB Speaker Identification task. The base model is wav2vec2-base, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 627, "text": " Create a smart speaker that can recognize voice commands such as \\\"Turn on the lights,\\\" \\\"Play music,\\\" or \\\"Set a timer.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"ast-finetuned-speech-commands-v2\", \"api_call\": \"AutoModelForAudioClassification.from_pretrained('MIT/ast-finetuned-speech-commands-v2')\", \"api_arguments\": \"audio file\", \"python_environment_requirements\": \"transformers library\", \"example_code\": \"result = audio_classifier('path/to/audio/file.wav')\", \"performance\": {\"dataset\": \"Speech Commands v2\", \"accuracy\": \"98.120\"}, \"description\": \"Audio Spectrogram Transformer (AST) model fine-tuned on Speech Commands v2. It was introduced in the paper AST: Audio Spectrogram Transformer by Gong et al. and first released in this repository. The Audio Spectrogram Transformer is equivalent to ViT, but applied on audio. Audio is first turned into an image (as a spectrogram), after which a Vision Transformer is applied. The model gets state-of-the-art results on several audio classification benchmarks.\"}}", "category": "generic"}
{"question_id": 628, "text": " Our company's voice assistant needs to be able to detect voice activity in a conversation.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Voice Activity Detection\", \"api_name\": \"julien-c/voice-activity-detection\", \"api_call\": \"Inference('julien-c/voice-activity-detection', device='cuda')\", \"api_arguments\": {\"audio\": \"TheBigBangTheory.wav\"}, \"python_environment_requirements\": \"pyannote.audio\", \"example_code\": \"from pyannote.audio.core.inference import Inference\\nmodel = Inference('julien-c/voice-activity-detection', device='cuda')\\nmodel({\\n audio: TheBigBangTheory.wav\\n})\", \"performance\": {\"dataset\": \"dihard\", \"accuracy\": \"Not provided\"}, \"description\": \"Example pyannote-audio Voice Activity Detection model using PyanNet. Imported from https://github.com/pyannote/pyannote-audio-hub and trained by @hbredin.\"}}", "category": "generic"}
{"question_id": 629, "text": " Implement a conference call control program which can recognize if there are any interruptions among the speakers during the meeting.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speaker segmentation, Voice activity detection, Overlapped speech detection, Resegmentation, Raw scores\", \"api_name\": \"pyannote/segmentation\", \"api_call\": \"Model.from_pretrained('pyannote/segmentation', use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": {\"use_auth_token\": \"ACCESS_TOKEN_GOES_HERE\"}, \"python_environment_requirements\": \"pyannote.audio 2.1.1\", \"example_code\": {\"voice_activity_detection\": \"from pyannote.audio.pipelines import VoiceActivityDetection\\npipeline = VoiceActivityDetection(segmentation=model)\\nHYPER_PARAMETERS = {\\n onset: 0.5, offset: 0.5,\\n min_duration_on: 0.0,\\n min_duration_off: 0.0\\n}\\npipeline.instantiate(HYPER_PARAMETERS)\\nvad = pipeline(audio.wav)\", \"overlapped_speech_detection\": \"from pyannote.audio.pipelines import OverlappedSpeechDetection\\npipeline = OverlappedSpeechDetection(segmentation=model)\\npipeline.instantiate(HYPER_PARAMETERS)\\nosd = pipeline(audio.wav)\", \"resegmentation\": \"from pyannote.audio.pipelines import Resegmentation\\npipeline = Resegmentation(segmentation=model, diarization=baseline)\\npipeline.instantiate(HYPER_PARAMETERS)\\nresegmented_baseline = pipeline({audio: audio.wav, baseline: baseline})\"}, \"performance\": {\"dataset\": {\"AMI Mix-Headset\": {\"voice_activity_detection_accuracy\": {\"onset\": 0.684, \"offset\": 0.577, \"min_duration_on\": 0.181, \"min_duration_off\": 0.037}, \"overlapped_speech_detection_accuracy\": {\"onset\": 0.448, \"offset\": 0.362, \"min_duration_on\": 0.116, \"min_duration_off\": 0.187}, \"resegmentation_accuracy\": {\"onset\": 0.542, \"offset\": 0.527, \"min_duration_on\": 0.044, \"min_duration_off\": 0.705}}, \"DIHARD3\": {\"voice_activity_detection_accuracy\": {\"onset\": 0.767, \"offset\": 0.377, \"min_duration_on\": 0.136, \"min_duration_off\": 0.067}, \"overlapped_speech_detection_accuracy\": {\"onset\": 0.43, \"offset\": 0.32, \"min_duration_on\": 0.091, \"min_duration_off\": 0.144}, \"resegmentation_accuracy\": {\"onset\": 0.592, \"offset\": 0.489, \"min_duration_on\": 0.163, \"min_duration_off\": 0.182}}, \"VoxConverse\": {\"voice_activity_detection_accuracy\": {\"onset\": 0.767, \"offset\": 0.713, \"min_duration_on\": 0.182, \"min_duration_off\": 0.501}, \"overlapped_speech_detection_accuracy\": {\"onset\": 0.587, \"offset\": 0.426, \"min_duration_on\": 0.337, \"min_duration_off\": 0.112}, \"resegmentation_accuracy\": {\"onset\": 0.537, \"offset\": 0.724, \"min_duration_on\": 0.41, \"min_duration_off\": 0.563}}}}, \"description\": \"A pre-trained model for speaker segmentation, voice activity detection, overlapped speech detection, and resegmentation using the pyannote.audio framework.\"}}", "category": "generic"}
{"question_id": 630, "text": " We are trying to create a solution for an HR department to predict whether a candidate would be a potential employee based on a list of background information.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Binary Classification\", \"api_name\": \"abhishek/autotrain-adult-census-xgboost\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\", \"json\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"rajistics/autotrain-data-Adult\", \"accuracy\": 0.8628221244500315}, \"description\": \"This model is trained for binary classification on the Adult dataset using AutoTrain. It is designed to predict CO2 emissions based on input features.\"}}", "category": "generic"}
{"question_id": 631, "text": " I have just downloaded a dataset that measures CO2 Emissions. I want to classify this dataset using a pre-trained model.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Tabular Classification\", \"api_name\": \"datadmg/autotrain-test-news-44534112235\", \"api_call\": \"AutoModel.from_pretrained('datadmg/autotrain-test-news-44534112235')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"datadmg/autotrain-data-test-news\", \"accuracy\": 0.333}, \"description\": \"This model is trained for Multi-class Classification on CO2 Emissions dataset. It uses the Hugging Face Transformers framework and is based on the extra_trees algorithm. The model is trained with AutoTrain and has a tabular classification functionality.\"}}", "category": "generic"}
{"question_id": 632, "text": " We are building an app that simulates Pokemon battles. Can you help us predict the HP of a Pokemon given its input attributes?\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Hugging Face\", \"functionality\": \"Predicting Pokemon HP\", \"api_name\": \"julien-c/pokemon-predict-hp\", \"api_call\": \"pipeline('regression', model='julien-c/pokemon-predict-hp')\", \"api_arguments\": \"input_data\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"julien-c/kaggle-rounakbanik-pokemon\", \"accuracy\": {\"mean_absolute_error\": 15.909, \"model_loss\": 647.605}}, \"description\": \"A tabular regression model trained on the julien-c/kaggle-rounakbanik-pokemon dataset to predict the HP of Pokemon.\"}}", "category": "generic"}
{"question_id": 633, "text": " We are a content marketing agency and we are focusing on promoting our clients' products. We want to use a tool to generate interesting marketing messages.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"facebook/bart-large\", \"api_call\": \"BartModel.from_pretrained('facebook/bart-large')\", \"api_arguments\": {\"pretrained_model_name\": \"facebook/bart-large\"}, \"python_environment_requirements\": {\"library\": \"transformers\", \"version\": \"latest\"}, \"example_code\": \"from transformers import BartTokenizer, BartModel\\ntokenizer = BartTokenizer.from_pretrained('facebook/bart-large')\\nmodel = BartModel.from_pretrained('facebook/bart-large')\\ninputs = tokenizer(Hello, my dog is cute, return_tensors=pt)\\noutputs = model(**inputs)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"arxiv\", \"accuracy\": \"Not provided\"}, \"description\": \"BART is a transformer encoder-decoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder. BART is pre-trained by (1) corrupting text with an arbitrary noising function, and (2) learning a model to reconstruct the original text. BART is particularly effective when fine-tuned for text generation (e.g. summarization, translation) but also works well for comprehension tasks (e.g. text classification, question answering).\"}}", "category": "generic"}
{"question_id": 634, "text": " Analyze a set of sentences to find the most similar pairs.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"sentence-transformers/distilbert-base-nli-mean-tokens\", \"api_call\": \"SentenceTransformer('sentence-transformers/distilbert-base-nli-mean-tokens')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/distilbert-base-nli-mean-tokens')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 635, "text": " I need a tool to extract code syntax and named entities from a text taken from StackOverflow.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"lanwuwei/BERTOverflow_stackoverflow_github\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('lanwuwei/BERTOverflow_stackoverflow_github')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"lanwuwei/BERTOverflow_stackoverflow_github\"}, \"python_environment_requirements\": {\"transformers\": \"*\", \"torch\": \"*\"}, \"example_code\": \"from transformers import *\\nimport torch\\ntokenizer = AutoTokenizer.from_pretrained(lanwuwei/BERTOverflow_stackoverflow_github)\\nmodel = AutoModelForTokenClassification.from_pretrained(lanwuwei/BERTOverflow_stackoverflow_github)\", \"performance\": {\"dataset\": \"StackOverflow's 10 year archive\", \"accuracy\": \"Not provided\"}, \"description\": \"BERT-base model pre-trained on 152 million sentences from the StackOverflow's 10 year archive. It can be used for code and named entity recognition in StackOverflow.\"}}", "category": "generic"}
{"question_id": 636, "text": " Our video streaming platform wants to categorize thousands of movies into genres. Please help us classify them without any genre labels.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"microsoft/xclip-base-patch16-zero-shot\", \"api_call\": \"XClipModel.from_pretrained('microsoft/xclip-base-patch16-zero-shot')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": [{\"name\": \"HMDB-51\", \"accuracy\": 44.6}, {\"name\": \"UCF-101\", \"accuracy\": 72.0}, {\"name\": \"Kinetics-600\", \"accuracy\": 65.2}]}, \"description\": \"X-CLIP is a minimal extension of CLIP for general video-language understanding. The model is trained in a contrastive way on (video, text) pairs. This allows the model to be used for tasks like zero-shot, few-shot or fully supervised video classification and video-text retrieval.\"}}", "category": "generic"}
{"question_id": 637, "text": " Can you generate an image of a lighthouse on a foggy island, based on my description?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Generation\", \"api_name\": \"stabilityai/stable-diffusion-2-1-base\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('stabilityai/stable-diffusion-2-1-base', scheduler=EulerDiscreteScheduler.from_pretrained(stabilityai/stable-diffusion-2-1-base, subfolder=scheduler), torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"a photo of an astronaut riding a horse on mars\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"scipy\", \"safetensors\"], \"example_code\": {\"install_dependencies\": \"pip install diffusers transformers accelerate scipy safetensors\", \"code\": \"from diffusers import StableDiffusionPipeline, EulerDiscreteScheduler\\nimport torch\\nmodel_id = stabilityai/stable-diffusion-2-1-base\\nscheduler = EulerDiscreteScheduler.from_pretrained(model_id, subfolder=scheduler)\\npipe = StableDiffusionPipeline.from_pretrained(model_id, scheduler=scheduler, torch_dtype=torch.float16)\\npipe = pipe.to(cuda)\\nprompt = a photo of an astronaut riding a horse on mars\\nimage = pipe(prompt).images[0]\\nimage.save(astronaut_rides_horse.png)\"}, \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion v2-1-base is a diffusion-based text-to-image generation model that can generate and modify images based on text prompts. It is a Latent Diffusion Model that uses a fixed, pretrained text encoder (OpenCLIP-ViT/H). It is intended for research purposes only and can be used in areas such as safe deployment of models, understanding limitations and biases of generative models, generation of artworks, and research on generative models.\"}}", "category": "generic"}
{"question_id": 638, "text": " I am an illustrator, I want to create an appealing image based on a text description for commercial purposes.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image generation and modification based on text prompts\", \"api_name\": \"stabilityai/stable-diffusion-2-inpainting\", \"api_call\": \"StableDiffusionInpaintPipeline.from_pretrained('stabilityai/stable-diffusion-2-inpainting', torch_dtype=torch.float16)\", \"api_arguments\": [\"prompt\", \"image\", \"mask_image\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"scipy\", \"safetensors\"], \"example_code\": \"from diffusers import StableDiffusionInpaintPipeline\\npipe = StableDiffusionInpaintPipeline.from_pretrained('stabilityai/stable-diffusion-2-inpainting', torch_dtype=torch.float16)\\npipe.to(cuda)\\nprompt = Face of a yellow cat, high resolution, sitting on a park bench\\nimage = pipe(prompt=prompt, image=image, mask_image=mask_image).images[0]\\nimage.save(./yellow_cat_on_park_bench.png)\", \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"A Latent Diffusion Model that uses a fixed, pretrained text encoder (OpenCLIP-ViT/H) to generate and modify images based on text prompts.\"}}", "category": "generic"}
{"question_id": 639, "text": " We want to build a Twitter Bot that creates an image based on users' textual requests. Generate an image with an astronaut playing guitar in space using a model.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"dreamlike-art/dreamlike-photoreal-2.0\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('dreamlike-art/dreamlike-photoreal-2.0', torch_dtype=torch.float16)(prompt).images[0]\", \"api_arguments\": {\"prompt\": \"photo, a church in the middle of a field of crops, bright cinematic lighting, gopro, fisheye lens\"}, \"python_environment_requirements\": {\"torch\": \"torch.float16\", \"diffusers\": \"StableDiffusionPipeline\"}, \"example_code\": \"from diffusers import StableDiffusionPipeline\\nimport torch\\nmodel_id = dreamlike-art/dreamlike-photoreal-2.0\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe = pipe.to(cuda)\\nprompt = photo, a church in the middle of a field of crops, bright cinematic lighting, gopro, fisheye lens\\nimage = pipe(prompt).images[0]\\nimage.save(./result.jpg)\", \"performance\": {\"dataset\": \"Stable Diffusion 1.5\", \"accuracy\": \"Not specified\"}, \"description\": \"Dreamlike Photoreal 2.0 is a photorealistic model based on Stable Diffusion 1.5, made by dreamlike.art. It can be used to generate photorealistic images from text prompts.\"}}", "category": "generic"}
{"question_id": 640, "text": " Generate an image of a beautiful fantasy landscape based on the description provided: a peaceful scene in a lush green forest with a crystal-clear river flowing through it, under a blue sky with fluffy white clouds.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"darkstorm2150/Protogen_x5.8_Official_Release\", \"api_call\": \"StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\", \"api_arguments\": {\"model_id\": \"darkstorm2150/Protogen_v5.8_Official_Release\", \"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": [\"torch\", \"diffusers\"], \"example_code\": \"from diffusers import StableDiffusionPipeline, DPMSolverMultistepScheduler\\nimport torch\\nprompt = (\\nmodelshoot style, (extremely detailed CG unity 8k wallpaper), full shot body photo of the most beautiful artwork in the world, \\nenglish medieval witch, black silk vale, pale skin, black silk robe, black cat, necromancy magic, medieval era, \\nphotorealistic painting by Ed Blinkey, Atey Ghailan, Studio Ghibli, by Jeremy Mann, Greg Manchess, Antonio Moro, trending on ArtStation, \\ntrending on CGSociety, Intricate, High Detail, Sharp focus, dramatic, photorealistic painting art by midjourney and greg rutkowski\\n)\\nmodel_id = darkstorm2150/Protogen_v5.8_Official_Release\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe = pipe.to(cuda)\\nimage = pipe(prompt, num_inference_steps=25).images[0]\\nimage.save(./result.jpg)\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": \"unknown\"}, \"description\": \"Protogen x5.8 is a text-to-image model that generates images based on text prompts. It was warm-started with Stable Diffusion v1-5 and is rebuilt using dreamlikePhotoRealV2.ckpt as a core. The model uses granular adaptive learning techniques for fine-grained adjustments and can be used just like any other Stable Diffusion model.\"}}", "category": "generic"}
{"question_id": 641, "text": " Tell me a text summary and answer a question from an image.\\n###Input: img_url=\\\"https://example.com/image.jpg\\\", question=\\\"What is the main color of the object?\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"blip2-opt-2.7b\", \"api_call\": \"Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"api_arguments\": {\"img_url\": \"https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg\", \"question\": \"how many dogs are in the picture?\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": {\"import_requests\": \"import requests\", \"import_PIL\": \"from PIL import Image\", \"import_transformers\": \"from transformers import BlipProcessor, Blip2ForConditionalGeneration\", \"load_processor\": \"processor = BlipProcessor.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_model\": \"model = Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_image\": \"raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\", \"process_inputs\": \"inputs = processor(raw_image, question, return_tensors='pt')\", \"generate_output\": \"out = model.generate(**inputs)\", \"decode_output\": \"print(processor.decode(out[0], skip_special_tokens=True))\"}, \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not specified\"}, \"description\": \"BLIP-2 model, leveraging OPT-2.7b (a large language model with 2.7 billion parameters). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, given the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 642, "text": " My boss wants me to extract captions from images of people in different settings.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image-to-Text\", \"api_name\": \"ydshieh/vit-gpt2-coco-en\", \"api_call\": \"VisionEncoderDecoderModel.from_pretrained('ydshieh/vit-gpt2-coco-en')\", \"api_arguments\": {\"loc\": \"ydshieh/vit-gpt2-coco-en\"}, \"python_environment_requirements\": [\"torch\", \"requests\", \"PIL\", \"transformers\"], \"example_code\": \"import torch\\nimport requests\\nfrom PIL import Image\\nfrom transformers import ViTFeatureExtractor, AutoTokenizer, VisionEncoderDecoderModel\\nloc = ydshieh/vit-gpt2-coco-en\\nfeature_extractor = ViTFeatureExtractor.from_pretrained(loc)\\ntokenizer = AutoTokenizer.from_pretrained(loc)\\nmodel = VisionEncoderDecoderModel.from_pretrained(loc)\\nmodel.eval()\\ndef predict(image):\\n pixel_values = feature_extractor(images=image, return_tensors=pt).pixel_values\\n with torch.no_grad():\\n  output_ids = model.generate(pixel_values, max_length=16, num_beams=4, return_dict_in_generate=True).sequences\\n preds = tokenizer.batch_decode(output_ids, skip_special_tokens=True)\\n preds = [pred.strip() for pred in preds]\\n return preds\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nwith Image.open(requests.get(url, stream=True).raw) as image:\\n preds = predict(image)\\nprint(preds)\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not specified\"}, \"description\": \"A proof-of-concept model for the Hugging Face FlaxVisionEncoderDecoder Framework that produces reasonable image captioning results.\"}}", "category": "generic"}
{"question_id": 643, "text": " Create an AI system capable of producing short videos based on text input in Persian and English.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video\", \"api_name\": \"ImRma/Brucelee\", \"api_call\": \"pipeline('text-to-video', model='ImRma/Brucelee')\", \"api_arguments\": [\"your_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Hugging Face model for converting Persian and English text into video.\"}}", "category": "generic"}
{"question_id": 644, "text": " I am organizing a virtual party and want to create a short, autogenerated video based on a text description (e.g., \\\"cats playing with laser pointer\\\"). Can you accomplish this with a text-to-video generation API?\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-video synthesis\", \"api_name\": \"damo-vilab/text-to-video-ms-1.7b\", \"api_call\": \"DiffusionPipeline.from_pretrained('damo-vilab/text-to-video-ms-1.7b', torch_dtype=torch.float16, variant=fp16)\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\", \"variant\": \"fp16\"}, \"python_environment_requirements\": \"pip install diffusers transformers accelerate\", \"example_code\": \"import torch\\nfrom diffusers import DiffusionPipeline, DPMSolverMultistepScheduler\\nfrom diffusers.utils import export_to_video\\npipe = DiffusionPipeline.from_pretrained(damo-vilab/text-to-video-ms-1.7b, torch_dtype=torch.float16, variant=fp16)\\npipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_model_cpu_offload()\\nprompt = Spiderman is surfing\\nvideo_frames = pipe(prompt, num_inference_steps=25).frames\\nvideo_path = export_to_video(video_frames)\", \"performance\": {\"dataset\": \"Webvid, ImageNet, LAION5B\", \"accuracy\": \"N/A\"}, \"description\": \"This model is based on a multi-stage text-to-video generation diffusion model, which inputs a description text and returns a video that matches the text description. The model consists of three sub-networks: text feature extraction model, text feature-to-video latent space diffusion model, and video latent space to video visual space model. The overall model parameters are about 1.7 billion. Currently, it only supports English input.\"}}", "category": "generic"}
{"question_id": 645, "text": " I need to create a system that can answer questions related to a document provided. The system should use a pre-trained model.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"layoutlmv2-base-uncased-finetuned-infovqa\", \"api_call\": \"AutoModelForDocumentQuestionAnswering.from_pretrained('tiennvcs/layoutlmv2-base-uncased-finetuned-infovqa')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \"4.12.2\", \"pytorch\": \"1.8.0+cu101\", \"datasets\": \"1.14.0\", \"tokenizers\": \"0.10.3\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 2.087}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-base-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 646, "text": " We are developing a document management system. We want to extract the relevant information from them through OCR text scanning and answering questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"tiennvcs/layoutlmv2-large-uncased-finetuned-vi-infovqa\", \"api_call\": \"pipeline('question-answering', model='tiennvcs/layoutlmv2-large-uncased-finetuned-vi-infovqa')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.15.0, torch==1.8.0+cu101, datasets==1.17.0, tokenizers==0.10.3\", \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": {\"Loss\": 8.5806}}, \"description\": \"This model is a fine-tuned version of microsoft/layoutlmv2-large-uncased on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 647, "text": " The team is creating a home security system. We are currently looking at understanding the depth of objects in the video stream.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-030603\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode-221122-030603')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers==4.24.0\", \"torch==1.12.1\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3597, \"Mae\": 0.3054, \"Rmse\": 0.4481, \"Abs Rel\": 0.3462, \"Log Mae\": 0.1256, \"Log Rmse\": 0.1798, \"Delta1\": 0.5278, \"Delta2\": 0.8055, \"Delta3\": 0.9191}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 648, "text": " I want to know the depth information of an image for a robot navigation project.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-nyu-finetuned-diode-221116-062619\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-062619')\", \"api_arguments\": \"None\", \"python_environment_requirements\": \"Transformers 4.24.0, Pytorch 1.13.0+cu117, Tokenizers 0.13.2\", \"example_code\": \"None\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.548, \"Rmse\": \"nan\"}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 649, "text": " A start-up is looking to develop a robot for navigation; they require a solution to estimate depth from a single image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-044810\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode-221122-044810')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.24.0, torch==1.12.1, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.369, \"Mae\": 0.2909, \"Rmse\": 0.4208, \"Abs Rel\": 0.3635, \"Log Mae\": 0.1224, \"Log Rmse\": 0.1793, \"Delta1\": 0.5323, \"Delta2\": 0.8179, \"Delta3\": 0.9258}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 650, "text": " We are building a smart security system to determine if a person is an adult\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Age Classification\", \"api_name\": \"nateraw/vit-age-classifier\", \"api_call\": \"ViTForImageClassification.from_pretrained('nateraw/vit-age-classifier')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"nateraw/vit-age-classifier\"}, \"python_environment_requirements\": [\"requests\", \"PIL\", \"transformers\"], \"example_code\": \"import requests\\nfrom PIL import Image\\nfrom io import BytesIO\\nfrom transformers import ViTFeatureExtractor, ViTForImageClassification\\nr = requests.get('https://github.com/dchen236/FairFace/blob/master/detected_faces/race_Asian_face0.jpg?raw=true')\\nim = Image.open(BytesIO(r.content))\\nmodel = ViTForImageClassification.from_pretrained('nateraw/vit-age-classifier')\\ntransforms = ViTFeatureExtractor.from_pretrained('nateraw/vit-age-classifier')\\ninputs = transforms(im, return_tensors='pt')\\noutput = model(**inputs)\\nproba = output.logits.softmax(1)\\npreds = proba.argmax(1)\", \"performance\": {\"dataset\": \"fairface\", \"accuracy\": null}, \"description\": \"A vision transformer finetuned to classify the age of a given person's face.\"}}", "category": "generic"}
{"question_id": 651, "text": " Design a program that can help farmers detect diseases in bean crops by analyzing images of the crop leaves.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"fxmarty/resnet-tiny-beans\", \"api_call\": \"pipeline('image-classification', model='fxmarty/resnet-tiny-beans')\", \"api_arguments\": {\"model\": \"fxmarty/resnet-tiny-beans\"}, \"python_environment_requirements\": {\"transformers\": \"latest\"}, \"example_code\": \"from transformers import pipeline; classifier = pipeline('image-classification', model='fxmarty/resnet-tiny-beans'); results = classifier('path/to/image.jpg')\", \"performance\": {\"dataset\": \"beans\", \"accuracy\": \"Not provided\"}, \"description\": \"A model trained on the beans dataset, just for testing and having a really tiny model.\"}}", "category": "generic"}
{"question_id": 652, "text": " To build an intelligent system to recognize and identify objects in submitted pictures within the household, which includes furniture, electronics and ornaments.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"timm/vit_large_patch14_clip_224.openai_ft_in12k_in1k\", \"api_call\": \"pipeline('image-classification', model='timm/vit_large_patch14_clip_224.openai_ft_in12k_in1k', framework='pt')\", \"api_arguments\": {\"model\": \"timm/vit_large_patch14_clip_224.openai_ft_in12k_in1k\", \"framework\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A ViT-based image classification model trained on ImageNet-1K and fine-tuned on ImageNet-12K by OpenAI.\"}}", "category": "generic"}
{"question_id": 653, "text": " Give me a solution to find out the license plate in the given car images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"License Plate Detection\", \"api_name\": \"keremberke/yolov5m-license-plate\", \"api_call\": \"yolov5.load('keremberke/yolov5m-license-plate')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic\": false, \"multi_label\": false, \"max_det\": 1000, \"img\": \"https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg\", \"size\": 640, \"augment\": true}, \"python_environment_requirements\": \"pip install -U yolov5\", \"example_code\": [\"import yolov5\", \"model = yolov5.load('keremberke/yolov5m-license-plate')\", \"model.conf = 0.25\", \"model.iou = 0.45\", \"model.agnostic = False\", \"model.multi_label = False\", \"model.max_det = 1000\", \"img = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model(img, size=640)\", \"results = model(img, augment=True)\", \"predictions = results.pred[0]\", \"boxes = predictions[:, :4]\", \"scores = predictions[:, 4]\", \"categories = predictions[:, 5]\", \"results.show()\", \"results.save(save_dir='results/')\"], \"performance\": {\"dataset\": \"keremberke/license-plate-object-detection\", \"accuracy\": 0.988}, \"description\": \"A YOLOv5 model for license plate detection trained on a custom dataset. The model can detect license plates in images with high accuracy.\"}}", "category": "generic"}
{"question_id": 654, "text": " I want to build a social media app for outdoor enthusiasts, and I need to identify objects related to outdoor activities in images. Come up with a proper API call to identify these objects.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-base-patch16\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-base-patch16')\", \"api_arguments\": [\"texts\", \"images\"], \"python_environment_requirements\": [\"requests\", \"PIL\", \"torch\", \"transformers\"], \"example_code\": \"processor = OwlViTProcessor.from_pretrained(google/owlvit-base-patch16)\\nmodel = OwlViTForObjectDetection.from_pretrained(google/owlvit-base-patch16)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [[a photo of a cat, a photo of a dog]]\\ninputs = processor(text=texts, images=image, return_tensors=pt)\\noutputs = model(**inputs)\\ntarget_sizes = torch.Tensor([image.size[::-1]])\\nresults = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not provided\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. OWL-ViT uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features.\"}}", "category": "generic"}
{"question_id": 655, "text": " I want an AI that can separate objects in an image based on semantic segmentation.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"openmmlab/upernet-convnext-small\", \"api_call\": \"UperNetModel.from_pretrained('openmmlab/upernet-convnext-small')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"UperNet framework for semantic segmentation, leveraging a ConvNeXt backbone. UperNet was introduced in the paper Unified Perceptual Parsing for Scene Understanding by Xiao et al. Combining UperNet with a ConvNeXt backbone was introduced in the paper A ConvNet for the 2020s.\"}}", "category": "generic"}
{"question_id": 656, "text": " Our image-processing service has to extract contextual information from images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"shi-labs/oneformer_coco_swin_large\", \"api_call\": \"'OneFormerForUniversalSegmentation.from_pretrained(shi-labs/oneformer_coco_swin_large)'\", \"api_arguments\": {\"images\": \"image\", \"task_inputs\": [\"semantic\", \"instance\", \"panoptic\"], \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\\nfrom PIL import Image\\nimport requests\\nurl = https://huggingface.co/datasets/shi-labs/oneformer_demo/blob/main/coco.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = OneFormerProcessor.from_pretrained(shi-labs/oneformer_coco_swin_large)\\nmodel = OneFormerForUniversalSegmentation.from_pretrained(shi-labs/oneformer_coco_swin_large)\\nsemantic_inputs = processor(images=image, task_inputs=[semantic], return_tensors=pt)\\nsemantic_outputs = model(**semantic_inputs)\\npredicted_semantic_map = processor.post_process_semantic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\", \"performance\": {\"dataset\": \"ydshieh/coco_dataset_script\", \"accuracy\": \"Not provided\"}, \"description\": \"OneFormer model trained on the COCO dataset (large-sized version, Swin backbone). It was introduced in the paper OneFormer: One Transformer to Rule Universal Image Segmentation by Jain et al. and first released in this repository. OneFormer is the first multi-task universal image segmentation framework. It needs to be trained only once with a single universal architecture, a single model, and on a single dataset, to outperform existing specialized models across semantic, instance, and panoptic segmentation tasks. OneFormer uses a task token to condition the model on the task in focus, making the architecture task-guided for training, and task-dynamic for inference, all with a single model.\"}}", "category": "generic"}
{"question_id": 657, "text": " Our company develops a city planning application. We need to segment streets, buildings, and trees in aerial photographs.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"shi-labs/oneformer_ade20k_swin_large\", \"api_call\": \"OneFormerForUniversalSegmentation.from_pretrained('shi-labs/oneformer_ade20k_swin_large')\", \"api_arguments\": [\"images\", \"task_inputs\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import OneFormerProcessor, OneFormerForUniversalSegmentation\\nfrom PIL import Image\\nimport requests\\nurl = https://huggingface.co/datasets/shi-labs/oneformer_demo/blob/main/ade20k.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = OneFormerProcessor.from_pretrained(shi-labs/oneformer_ade20k_swin_large)\\nmodel = OneFormerForUniversalSegmentation.from_pretrained(shi-labs/oneformer_ade20k_swin_large)\\nsemantic_inputs = processor(images=image, task_inputs=[semantic], return_tensors=pt)\\nsemantic_outputs = model(**semantic_inputs)\\npredicted_semantic_map = processor.post_process_semantic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\", \"performance\": {\"dataset\": \"scene_parse_150\", \"accuracy\": null}, \"description\": \"OneFormer model trained on the ADE20k dataset (large-sized version, Swin backbone). It was introduced in the paper OneFormer: One Transformer to Rule Universal Image Segmentation by Jain et al. and first released in this repository. OneFormer is the first multi-task universal image segmentation framework. It needs to be trained only once with a single universal architecture, a single model, and on a single dataset, to outperform existing specialized models across semantic, instance, and panoptic segmentation tasks. OneFormer uses a task token to condition the model on the task in focus, making the architecture task-guided for training, and task-dynamic for inference, all with a single model.\"}}", "category": "generic"}
{"question_id": 658, "text": " We are building a product which can identify birds in the images. Design the model which can help us segment the birds in an image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"facebook/mask2former-swin-tiny-coco-instance\", \"api_call\": \"Mask2FormerForUniversalSegmentation.from_pretrained('facebook/mask2former-swin-tiny-coco-instance')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"facebook/mask2former-swin-tiny-coco-instance\"}, \"python_environment_requirements\": [\"torch\", \"transformers\", \"PIL\", \"requests\"], \"example_code\": \"processor = AutoImageProcessor.from_pretrained('facebook/mask2former-swin-tiny-coco-instance')\\nmodel = Mask2FormerForUniversalSegmentation.from_pretrained('facebook/mask2former-swin-tiny-coco-instance')\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(images=image, return_tensors='pt')\\nwith torch.no_grad():\\n    outputs = model(**inputs)\\nclass_queries_logits = outputs.class_queries_logits\\nmasks_queries_logits = outputs.masks_queries_logits\\nresult = processor.post_process_instance_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\\npredicted_instance_map = result['segmentation']\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not specified\"}, \"description\": \"Mask2Former model trained on COCO instance segmentation (tiny-sized version, Swin backbone). It was introduced in the paper Masked-attention Mask Transformer for Universal Image Segmentation and first released in this repository. This model addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. You can use this particular checkpoint for instance segmentation.\"}}", "category": "generic"}
{"question_id": 659, "text": " In this Star Wars movie scene, I want to create a depth estimation for the stormtroopers.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Depth Estimation\", \"api_name\": \"lllyasviel/sd-controlnet-depth\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-depth')\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"PIL\", \"numpy\", \"torch\"], \"example_code\": {\"install_packages\": \"pip install diffusers transformers accelerate\", \"code\": [\"from transformers import pipeline\", \"from diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\", \"from PIL import Image\", \"import numpy as np\", \"import torch\", \"from diffusers.utils import load_image\", \"depth_estimator = pipeline('depth-estimation')\", \"image = load_image(https://huggingface.co/lllyasviel/sd-controlnet-depth/resolve/main/images/stormtrooper.png)\", \"image = depth_estimator(image)['depth']\", \"image = np.array(image)\", \"image = image[:, :, None]\", \"image = np.concatenate([image, image, image], axis=2)\", \"image = Image.fromarray(image)\", \"controlnet = ControlNetModel.from_pretrained(lllyasviel/sd-controlnet-depth, torch_dtype=torch.float16)\", \"pipe = StableDiffusionControlNetPipeline.from_pretrained(runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)\", \"pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\", \"pipe.enable_xformers_memory_efficient_attention()\", \"pipe.enable_model_cpu_offload()\", \"image = pipe(Stormtrooper's lecture, image, num_inference_steps=20).images[0]\", \"image.save('./images/stormtrooper_depth_out.png')\"]}, \"performance\": {\"dataset\": \"3M depth-image, caption pairs\", \"accuracy\": \"500 GPU-hours with Nvidia A100 80G using Stable Diffusion 1.5 as a base model\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Depth estimation. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 660, "text": " I am a drone maker that is building a navigation module for my drones. I need to sharpen the images captured from the drone in real-time.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"swin2SR-lightweight-x2-64\", \"api_call\": \"Swin2SRForConditionalGeneration.from_pretrained('condef/Swin2SR-lightweight-x2-64').\", \"api_arguments\": \"feature_extractor, model\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"Swin2SR model that upscales images x2. It was introduced in the paper Swin2SR: SwinV2 Transformer for Compressed Image Super-Resolution and Restoration by Conde et al. and first released in this repository. This model is intended for lightweight image super resolution.\"}}", "category": "generic"}
{"question_id": 661, "text": " Develop a method to generate images of realistic-looking churches.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Diffusers\", \"api_name\": \"google/ddpm-ema-church-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-ema-church-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"!pip install diffusers\\nfrom diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-ema-church-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception score\": 9.46, \"FID score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by nonequilibrium thermodynamics. It is used for high-quality image synthesis. DDPM models can use discrete noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm for inference. The model can be used with different pipelines for faster inference and better trade-off between quality and speed.\"}}", "category": "generic"}
{"question_id": 662, "text": " Generate a classical image by using Diffusion Model\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"johnowhitaker/sd-class-wikiart-from-bedrooms\", \"api_call\": \"DDPMPipeline.from_pretrained('johnowhitaker/sd-class-wikiart-from-bedrooms')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('johnowhitaker/sd-class-wikiart-from-bedrooms')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"https://huggingface.co/datasets/huggan/wikiart\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a diffusion model initialized from https://huggingface.co/google/ddpm-bedroom-256 and trained for 5000 steps on https://huggingface.co/datasets/huggan/wikiart.\"}}", "category": "generic"}
{"question_id": 663, "text": " We need a picture that has a nostalgic look in high quality for the cover of our upcoming magazine.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Diffusers\", \"api_name\": \"pravsels/ddpm-ffhq-vintage-finetuned-vintage-3epochs\", \"api_call\": \"DDPMPipeline.from_pretrained('pravsels/ddpm-ffhq-vintage-finetuned-vintage-3epochs')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('pravsels/ddpm-ffhq-vintage-finetuned-vintage-3epochs')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"Example Fine-Tuned Model for Unit 2 of the Diffusion Models Class\"}}", "category": "generic"}
{"question_id": 664, "text": " We are an e-learning provider who wants to classify the content of a video lecture automatically.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"fcakyon/timesformer-hr-finetuned-k400\", \"api_call\": \"TimesformerForVideoClassification.from_pretrained('fcakyon/timesformer-hr-finetuned-k400')\", \"api_arguments\": [\"images\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"numpy\", \"torch\"], \"example_code\": \"from transformers import AutoImageProcessor, TimesformerForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 448, 448))\\nprocessor = AutoImageProcessor.from_pretrained(fcakyon/timesformer-hr-finetuned-k400)\\nmodel = TimesformerForVideoClassification.from_pretrained(fcakyon/timesformer-hr-finetuned-k400)\\ninputs = processor(images=video, return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": \"Not provided\"}, \"description\": \"TimeSformer model pre-trained on Kinetics-400 for video classification into one of the 400 possible Kinetics-400 labels. Introduced in the paper 'TimeSformer: Is Space-Time Attention All You Need for Video Understanding?' by Tong et al.\"}}", "category": "generic"}
{"question_id": 665, "text": " We need to classify actions of athletes in sports videos. Can you help us to analyze and classify these videos?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"videomae-base-ssv2\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base-short-ssv2')\", \"api_arguments\": \"video\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import VideoMAEFeatureExtractor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nfeature_extractor = VideoMAEFeatureExtractor.from_pretrained(MCG-NJU/videomae-base-short-ssv2)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base-short-ssv2)\\npixel_values = feature_extractor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Something-Something-v2\", \"accuracy\": \"\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks: if you have a dataset of labeled videos for instance, you can train a standard classifier by placing a linear layer on top of the pre-trained encoder. One typically places a linear layer on top of the [CLS] token, as the last hidden state of this token can be seen as a representation of an entire video.\"}}", "category": "generic"}
{"question_id": 666, "text": " We want to classify images supplied by our users into categories such as cats, dogs, birds, and more.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"openai/clip-vit-base-patch16\", \"api_call\": \"CLIPModel.from_pretrained('openai/clip-vit-base-patch16')\", \"api_arguments\": [\"text\", \"images\", \"return_tensors\", \"padding\"], \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(openai/clip-vit-base-patch16)\\nprocessor = CLIPProcessor.from_pretrained(openai/clip-vit-base-patch16)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = processor(text=[a photo of a cat, a photo of a dog], images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [\"Food101\", \"CIFAR10\", \"CIFAR100\", \"Birdsnap\", \"SUN397\", \"Stanford Cars\", \"FGVC Aircraft\", \"VOC2007\", \"DTD\", \"Oxford-IIIT Pet dataset\", \"Caltech101\", \"Flowers102\", \"MNIST\", \"SVHN\", \"IIIT5K\", \"Hateful Memes\", \"SST-2\", \"UCF101\", \"Kinetics700\", \"Country211\", \"CLEVR Counting\", \"KITTI Distance\", \"STL-10\", \"RareAct\", \"Flickr30\", \"MSCOCO\", \"ImageNet\", \"ImageNet-A\", \"ImageNet-R\", \"ImageNet Sketch\", \"ObjectNet (ImageNet Overlap)\", \"Youtube-BB\", \"ImageNet-Vid\"], \"accuracy\": \"varies depending on the dataset\"}, \"description\": \"The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.\"}}", "category": "generic"}
{"question_id": 667, "text": " Identify which smartphone brand is featured in an image and predict the intensity of luxury level.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"laion/CLIP-convnext_base_w_320-laion_aesthetic-s13B-b82K-augreg\", \"api_call\": \"pipeline('image-classification', model='laion/CLIP-convnext_base_w_320-laion_aesthetic-s13B-b82K-augreg')\", \"api_arguments\": {\"image_path\": \"Path to the image\", \"class_names\": \"Comma-separated list of possible class names\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nimage_classification = pipeline('image-classification', model='laion/CLIP-convnext_base_w_320-laion_aesthetic-s13B-b82K-augreg')\\nimage_path = 'path/to/image.jpg'\\nclass_names = 'dog, cat'\\nresult = image_classification(image_path, class_names)\\nprint(result)\", \"performance\": {\"dataset\": \"ImageNet-1k\", \"accuracy\": \"70.8-71.7%\"}, \"description\": \"A series of CLIP ConvNeXt-Base (w/ wide embed dim) models trained on subsets LAION-5B using OpenCLIP. The models utilize the timm ConvNeXt-Base model (convnext_base) as the image tower, and the same text tower as the RN50x4 (depth 12, embed dim 640) model from OpenAI CLIP.\"}}", "category": "generic"}
{"question_id": 668, "text": " A Chinese social media company has approached us for help in content moderation. We recorded an API to classify images which don't belong to suitable content.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"OFA-Sys/chinese-clip-vit-large-patch14-336px\", \"api_call\": \"ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14-336px')\", \"api_arguments\": {\"images\": \"image\", \"text\": \"texts\", \"return_tensors\": \"pt\", \"padding\": \"True\"}, \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\\nmodel = ChineseCLIPModel.from_pretrained(OFA-Sys/chinese-clip-vit-large-patch14-336px)\\nprocessor = ChineseCLIPProcessor.from_pretrained(OFA-Sys/chinese-clip-vit-large-patch14-336px)\\nurl = https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/pokemon.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = []\\ninputs = processor(images=image, return_tensors=pt)\\nimage_features = model.get_image_features(**inputs)\\nimage_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, padding=True, return_tensors=pt)\\ntext_features = model.get_text_features(**inputs)\\ntext_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": {\"CIFAR10\": 96.0, \"CIFAR100\": 79.75, \"DTD\": 51.2, \"EuroSAT\": 52.0, \"FER\": 55.1, \"FGVC\": 26.2, \"KITTI\": 49.9, \"MNIST\": 79.4, \"PC\": 63.5, \"VOC\": 84.9}, \"accuracy\": \"various\"}, \"description\": \"Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It uses ViT-L/14@336px as the image encoder and RoBERTa-wwm-base as the text encoder.\"}}", "category": "generic"}
{"question_id": 669, "text": " We are working on environmental studies and there is a specific image we need to geolocalize. Let's get the probabilities of different cities for the given image.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Geolocalization\", \"api_name\": \"geolocal/StreetCLIP\", \"api_call\": \"CLIPModel.from_pretrained('geolocal/StreetCLIP')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"geolocal/StreetCLIP\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(geolocal/StreetCLIP)\\nprocessor = CLIPProcessor.from_pretrained(geolocal/StreetCLIP)\\nurl = https://huggingface.co/geolocal/StreetCLIP/resolve/main/sanfrancisco.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nchoices = [San Jose, San Diego, Los Angeles, Las Vegas, San Francisco]\\ninputs = processor(text=choices, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": [{\"name\": \"IM2GPS\", \"accuracy\": {\"25km\": 28.3, \"200km\": 45.1, \"750km\": 74.7, \"2500km\": 88.2}}, {\"name\": \"IM2GPS3K\", \"accuracy\": {\"25km\": 22.4, \"200km\": 37.4, \"750km\": 61.3, \"2500km\": 80.4}}]}, \"description\": \"StreetCLIP is a robust foundation model for open-domain image geolocalization and other geographic and climate-related tasks. Trained on an original dataset of 1.1 million street-level urban and rural geo-tagged images, it achieves state-of-the-art performance on multiple open-domain image geolocalization benchmarks in zero-shot, outperforming supervised models trained on millions of images.\"}}", "category": "generic"}
{"question_id": 670, "text": " Our e-commerce platform needs automatic classification of product images without retraining. Develop a classifier for the e-commerce platform.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"chinese-clip-vit-large-patch14\", \"api_call\": \"ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-large-patch14')\", \"api_arguments\": {\"model_name\": \"OFA-Sys/chinese-clip-vit-large-patch14\"}, \"python_environment_requirements\": {\"libraries\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\\nmodel = ChineseCLIPModel.from_pretrained(OFA-Sys/chinese-clip-vit-large-patch14)\\nprocessor = ChineseCLIPProcessor.from_pretrained(OFA-Sys/chinese-clip-vit-large-patch14)\\nurl = https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/pokemon.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = []\\ninputs = processor(images=image, return_tensors=pt)\\nimage_features = model.get_image_features(**inputs)\\nimage_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True) # normalize\\ninputs = processor(text=texts, padding=True, return_tensors=pt)\\ntext_features = model.get_text_features(**inputs)\\ntext_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True) # normalize\\ninputs = processor(text=texts, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image # this is the image-text similarity score\\nprobs = logits_per_image.softmax(dim=1) # probs: [[0.0066, 0.0211, 0.0031, 0.9692]]\", \"performance\": {\"dataset\": \"MUGE Text-to-Image Retrieval, Flickr30K-CN Retrieval, COCO-CN Retrieval, CIFAR10, CIFAR100, DTD, EuroSAT, FER, FGV, KITTI, MNIST, PASCAL VOC\", \"accuracy\": \"Varies depending on the dataset\"}, \"description\": \"Chinese-CLIP-ViT-Large-Patch14 is a large version of the Chinese CLIP model, with ViT-L/14 as the image encoder and RoBERTa-wwm-base as the text encoder. Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It is designed for zero-shot image classification tasks.\"}}", "category": "generic"}
{"question_id": 671, "text": " We are developing a customer support platform for our telecommunication company in Spain. We want to know if they are happy or unhappy with our services, based on the content of their message.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"finiteautomata/beto-sentiment-analysis\", \"api_call\": \"pipeline('sentiment-analysis', model='finiteautomata/beto-sentiment-analysis')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"Hugging Face Transformers library\", \"example_code\": \"\", \"performance\": {\"dataset\": \"TASS 2020 corpus\", \"accuracy\": \"\"}, \"description\": \"Model trained with TASS 2020 corpus (around ~5k tweets) of several dialects of Spanish. Base model is BETO, a BERT model trained in Spanish. Uses POS, NEG, NEU labels.\"}}", "category": "generic"}
{"question_id": 672, "text": " I need a function to find the most relevent passage given a question and several candidate passages.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Information Retrieval\", \"api_name\": \"cross-encoder/ms-marco-MiniLM-L-6-v2\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/ms-marco-MiniLM-L-6-v2')\", \"api_arguments\": {\"model_name\": \"cross-encoder/ms-marco-MiniLM-L-6-v2\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"torch\": \"latest\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\\nimport torch\\nmodel = AutoModelForSequenceClassification.from_pretrained('model_name')\\ntokenizer = AutoTokenizer.from_pretrained('model_name')\\nfeatures = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors=pt)\\nmodel.eval()\\nwith torch.no_grad():\\n scores = model(**features).logits\\n print(scores)\", \"performance\": {\"dataset\": \"MS Marco Passage Reranking\", \"accuracy\": \"MRR@10: 39.01%\"}, \"description\": \"This model was trained on the MS Marco Passage Ranking task and can be used for Information Retrieval. Given a query, encode the query with all possible passages, then sort the passages in a decreasing order.\"}}", "category": "generic"}
{"question_id": 673, "text": " As a community manager, I would like to monitor my forum's comment section for toxic or harmful content. I want to find a solution that can flag these types of comments automatically, so I can address them promptly.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"martin-ha/toxic-comment-model\", \"api_call\": \"pipeline(model='martin-ha/toxic-comment-model')\", \"api_arguments\": {\"model_path\": \"martin-ha/toxic-comment-model\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer, TextClassificationPipeline\\nmodel_path = martin-ha/toxic-comment-model\\ntokenizer = AutoTokenizer.from_pretrained(model_path)\\nmodel = AutoModelForSequenceClassification.from_pretrained(model_path)\\npipeline = TextClassificationPipeline(model=model, tokenizer=tokenizer)\\nprint(pipeline('This is a test text.'))\", \"performance\": {\"dataset\": \"held-out test set\", \"accuracy\": 0.94, \"f1-score\": 0.59}, \"description\": \"This model is a fine-tuned version of the DistilBERT model to classify toxic comments.\"}}", "category": "generic"}
{"question_id": 674, "text": " I am making a keyword search engine that ranks text passages based on their importance regarding a given keyword.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Information Retrieval\", \"api_name\": \"cross-encoder/ms-marco-MiniLM-L-12-v2\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/ms-marco-MiniLM-L-12-v2')\", \"api_arguments\": {\"padding\": \"True\", \"truncation\": \"True\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\", \"torch\": \"import torch\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\\nimport torch\\nmodel = AutoModelForSequenceClassification.from_pretrained('model_name')\\ntokenizer = AutoTokenizer.from_pretrained('model_name')\\nfeatures = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors=pt)\\nmodel.eval()\\nwith torch.no_grad():\\n scores = model(**features).logits\\n print(scores)\", \"performance\": {\"dataset\": {\"TREC Deep Learning 2019\": {\"NDCG@10\": 74.31}, \"MS Marco Passage Reranking\": {\"MRR@10\": 39.02, \"accuracy\": \"960 Docs / Sec\"}}}, \"description\": \"This model was trained on the MS Marco Passage Ranking task. The model can be used for Information Retrieval: Given a query, encode the query will all possible passages (e.g. retrieved with ElasticSearch). Then sort the passages in a decreasing order. See SBERT.net Retrieve & Re-rank for more details. The training code is available here: SBERT.net Training MS Marco\"}}", "category": "generic"}
{"question_id": 675, "text": " Identify the type of emotion in a movie review.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"michellejieli/emotion_text_classifier\", \"api_call\": \"pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"classifier(I love this!)\", \"performance\": {\"dataset\": [\"Crowdflower (2016)\", \"Emotion Dataset, Elvis et al. (2018)\", \"GoEmotions, Demszky et al. (2020)\", \"ISEAR, Vikash (2018)\", \"MELD, Poria et al. (2019)\", \"SemEval-2018, EI-reg, Mohammad et al. (2018)\", \"Emotion Lines (Friends)\"], \"accuracy\": \"Not provided\"}, \"description\": \"DistilRoBERTa-base is a transformer model that performs sentiment analysis. I fine-tuned the model on transcripts from the Friends show with the goal of classifying emotions from text data, specifically dialogue from Netflix shows or movies. The model predicts 6 Ekman emotions and a neutral class. These emotions include anger, disgust, fear, joy, neutrality, sadness, and surprise.\"}}", "category": "generic"}
{"question_id": 676, "text": " We are developing a medical records analysis software that automatically recognizes biomedical entities from physicians' case reports.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"d4data/biomedical-ner-all\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('d4data/biomedical-ner-all')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained(d4data/biomedical-ner-all)\", \"tokenizer\": \"AutoTokenizer.from_pretrained(d4data/biomedical-ner-all)\", \"aggregation_strategy\": \"simple\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import pipeline, AutoTokenizer, AutoModelForTokenClassification\"}, \"example_code\": \"pipe(The patient reported no recurrence of palpitations at follow-up 6 months after the ablation.)\", \"performance\": {\"dataset\": \"Maccrobat\", \"accuracy\": \"Not provided\"}, \"description\": \"An English Named Entity Recognition model, trained on Maccrobat to recognize the bio-medical entities (107 entities) from a given text corpus (case reports etc.). This model was built on top of distilbert-base-uncased.\"}}", "category": "generic"}
{"question_id": 677, "text": " We have customer reviews of various software products. We want to extract company names in those reviews.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Entity Extraction\", \"api_name\": \"903429548\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('ismail-lucifer011/autotrain-company_all-903429548', use_auth_token=True)\", \"api_arguments\": {\"inputs\": \"I love AutoTrain\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTokenClassification, AutoTokenizer\"}, \"example_code\": \"from transformers import AutoModelForTokenClassification, AutoTokenizer\\nmodel = AutoModelForTokenClassification.from_pretrained(ismail-lucifer011/autotrain-company_all-903429548, use_auth_token=True)\\ntokenizer = AutoTokenizer.from_pretrained(ismail-lucifer011/autotrain-company_all-903429548, use_auth_token=True)\\ninputs = tokenizer(I love AutoTrain, return_tensors=pt)\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"ismail-lucifer011/autotrain-data-company_all\", \"accuracy\": 0.9979930566588805}, \"description\": \"A token classification model trained using AutoTrain for entity extraction. The model is based on the distilbert architecture and trained on the ismail-lucifer011/autotrain-data-company_all dataset. It can be used to identify and extract company names from text.\"}}", "category": "generic"}
{"question_id": 678, "text": " I am working on a Chinese language project and I need to tokenize the sentences for better processing.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Token Classification\", \"api_name\": \"ckiplab/bert-base-chinese-ws\", \"api_call\": \"AutoModel.from_pretrained('ckiplab/bert-base-chinese-ws')\", \"api_arguments\": {\"pretrained_model\": \"ckiplab/bert-base-chinese-ws\"}, \"python_environment_requirements\": {\"transformers\": \"BertTokenizerFast, AutoModel\"}, \"example_code\": \"from transformers import (\\n BertTokenizerFast,\\n AutoModel,\\n)\\ntokenizer = BertTokenizerFast.from_pretrained('bert-base-chinese')\\nmodel = AutoModel.from_pretrained('ckiplab/bert-base-chinese-ws')\", \"performance\": {\"dataset\": \"Not specified\", \"accuracy\": \"Not specified\"}, \"description\": \"This project provides traditional Chinese transformers models (including ALBERT, BERT, GPT2) and NLP tools (including word segmentation, part-of-speech tagging, named entity recognition).\"}}", "category": "generic"}
{"question_id": 679, "text": " I need a system that extracts all the well-known named entities such as person names, locations, and organizations from news articles.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english\", \"api_call\": \"SequenceTagger.load('flair/ner-english')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\n# load tagger\\ntagger = SequenceTagger.load('flair/ner-english')\\n# make example sentence\\nsentence = Sentence('George Washington went to Washington')\\n# predict NER tags\\ntagger.predict(sentence)\\n# print sentence\\nprint(sentence)\\n# print predicted NER spans\\nprint('The following NER tags are found:')\\n# iterate over entities and print\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"conll2003\", \"accuracy\": \"93.06\"}, \"description\": \"This is the standard 4-class NER model for English that ships with Flair. It predicts 4 tags: PER (person name), LOC (location name), ORG (organization name), and MISC (other name). The model is based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 680, "text": " I have a list of Olympic Game host cities and their corresponding years. I want to know which year the games were held in Beijing.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/tapex-base\", \"api_call\": \"BartForConditionalGeneration.from_pretrained('microsoft/tapex-base')\", \"api_arguments\": {\"table\": \"pd.DataFrame\", \"query\": \"str\"}, \"python_environment_requirements\": {\"libraries\": [\"transformers\", \"pandas\"]}, \"example_code\": \"from transformers import TapexTokenizer, BartForConditionalGeneration\\nimport pandas as pd\\ntokenizer = TapexTokenizer.from_pretrained(microsoft/tapex-base)\\nmodel = BartForConditionalGeneration.from_pretrained(microsoft/tapex-base)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = select year where city = beijing\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"arxiv:2107.07653\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPEX (Table Pre-training via Execution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with table reasoning skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries.\"}}", "category": "generic"}
{"question_id": 681, "text": " I have a table with data about different types of bards and their magical abilities. Let me see if I can find the best bard given the data in the table.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-mini-finetuned-wtq\", \"api_call\": \"AutoModelForTableQuestionAnswering.from_pretrained('google/tapas-mini-finetuned-wtq')\", \"api_arguments\": \"tokenizer = AutoTokenizer.from_pretrained('google/tapas-mini-finetuned-wtq'); model = AutoModelForTableQuestionAnswering.from_pretrained('google/tapas-mini-finetuned-wtq')\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('table-question-answering', model='google/tapas-mini-finetuned-wtq', tokenizer='google/tapas-mini-finetuned-wtq')\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": 0.2854}, \"description\": \"TAPAS mini model fine-tuned on WikiTable Questions (WTQ). It is pretrained on a large corpus of English data from Wikipedia and can be used for answering questions related to a table.\"}}", "category": "generic"}
{"question_id": 682, "text": " I want to automate the process of answering questions about historical facts. When given a question and a surrounding context, it should provide an accurate response.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-base-squad2\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('deepset/roberta-base-squad2')\", \"api_arguments\": {\"model_name\": \"deepset/roberta-base-squad2\", \"tokenizer\": \"deepset/roberta-base-squad2\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": {\"code\": \"from transformers import AutoModelForQuestionAnswering, AutoTokenizer, pipeline\\nmodel_name = deepset/roberta-base-squad2\\nnlp = pipeline('question-answering', model=model_name, tokenizer=model_name)\\nQA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\"}, \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"exact\": 79.87029394424324, \"f1\": 82.91251169582613}}, \"description\": \"This is the roberta-base model, fine-tuned using the SQuAD2.0 dataset for the task of Question Answering. It's been trained on question-answer pairs, including unanswerable questions.\"}}", "category": "generic"}
{"question_id": 683, "text": " I am a lawyer, I have a lot of text. I need a system which reads context and answers the questions based on the context.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"philschmid/distilbert-onnx\", \"api_call\": \"pipeline('question-answering', model='philschmid/distilbert-onnx')\", \"api_arguments\": {\"model\": \"philschmid/distilbert-onnx\"}, \"python_environment_requirements\": [\"transformers\", \"onnx\"], \"example_code\": {\"Compute\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='philschmid/distilbert-onnx')\\nqa_pipeline({'context': 'This is a context', 'question': 'What is this?'})\"}, \"performance\": {\"dataset\": \"squad\", \"accuracy\": \"F1 score: 87.1\"}, \"description\": \"This model is a fine-tune checkpoint of DistilBERT-base-cased, fine-tuned using (a second step of) knowledge distillation on SQuAD v1.1.\"}}", "category": "generic"}
{"question_id": 684, "text": " I want to create a question answering script that can help me answer questions about a given passage of text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"ahotrod/electra_large_discriminator_squad2_512\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('ahotrod/electra_large_discriminator_squad2_512')\", \"api_arguments\": \"question, context\", \"python_environment_requirements\": [\"transformers\", \"torch\", \"tensorflow\"], \"example_code\": \"qa_pipeline({'question': 'What is the capital of France?', 'context': 'France is a country in Europe. Its capital is Paris.'})\", \"performance\": {\"dataset\": \"SQuAD2.0\", \"accuracy\": {\"exact\": 87.09677419354838, \"f1\": 89.98343832723452}}, \"description\": \"ELECTRA_large_discriminator language model fine-tuned on SQuAD2.0 for question answering tasks.\"}}", "category": "generic"}
{"question_id": 685, "text": " To enhance our FAQ bot, we need to extract answers from a given knowledge base text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/deberta-v3-large-squad2\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('deepset/deberta-v3-large-squad2')\", \"api_arguments\": {\"model_name_or_path\": \"deepset/deberta-v3-large-squad2\", \"tokenizer\": \"deepset/deberta-v3-large-squad2\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": {\"a\": {\"code\": \"nlp = pipeline('question-answering', model=model_name, tokenizer=model_name)\\nQA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\"}, \"b\": {\"code\": \"model = AutoModelForQuestionAnswering.from_pretrained(model_name)\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\"}}, \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"exact\": 87.6105449338836, \"f1\": 90.75307008866517}}, \"description\": \"This is the deberta-v3-large model, fine-tuned using the SQuAD2.0 dataset. It's been trained on question-answer pairs, including unanswerable questions, for the task of Question Answering.\"}}", "category": "generic"}
{"question_id": 686, "text": " Our customer is a Spanish travel agency. They need to classify customer reviews into categories such as 'travel', 'cooking', and 'dancing'.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"vicgalle/xlm-roberta-large-xnli-anli\", \"api_call\": \"XLMRobertaForSequenceClassification.from_pretrained('vicgalle/xlm-roberta-large-xnli-anli')\", \"api_arguments\": [\"sequence_to_classify\", \"candidate_labels\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"sequence_to_classify = Alg\\u00fan d\\u00eda ir\\u00e9 a ver el mundo\\ncandidate_labels = ['viaje', 'cocina', 'danza']\\nclassifier(sequence_to_classify, candidate_labels)\", \"performance\": {\"dataset\": [{\"name\": \"XNLI-es\", \"accuracy\": \"93.7%\"}, {\"name\": \"XNLI-fr\", \"accuracy\": \"93.2%\"}, {\"name\": \"ANLI-R1\", \"accuracy\": \"68.5%\"}, {\"name\": \"ANLI-R2\", \"accuracy\": \"53.6%\"}, {\"name\": \"ANLI-R3\", \"accuracy\": \"49.0%\"}]}, \"description\": \"XLM-RoBERTa-large model finetunned over several NLI datasets, ready to use for zero-shot classification.\"}}", "category": "generic"}
{"question_id": 687, "text": " Create a method to determine, as an entertainment recommendation system, which category a text message about a daily activity belongs to.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"NLI-based Zero Shot Text Classification\", \"api_name\": \"facebook/bart-large-mnli\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('facebook/bart-large-mnli')\", \"api_arguments\": {\"sequence_to_classify\": \"one day I will see the world\", \"candidate_labels\": \"['travel', 'cooking', 'dancing']\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer, pipeline\"}, \"example_code\": {\"with_pipeline\": \"from transformers import pipeline\\nclassifier = pipeline('zero-shot-classification', model='facebook/bart-large-mnli')\\nsequence_to_classify = 'one day I will see the world'\\ncandidate_labels = ['travel', 'cooking', 'dancing']\\nclassifier(sequence_to_classify, candidate_labels)\", \"with_manual_pytorch\": \"from transformers import AutoModelForSequenceClassification, AutoTokenizer\\nnli_model = AutoModelForSequenceClassification.from_pretrained('facebook/bart-large-mnli')\\ntokenizer = AutoTokenizer.from_pretrained('facebook/bart-large-mnli')\\npremise = sequence\\nhypothesis = f'This example is {label}.'\\nx = tokenizer.encode(premise, hypothesis, return_tensors='pt', truncation_strategy='only_first')\\nlogits = nli_model(x.to(device))[0]\\nentail_contradiction_logits = logits[:,[0,2]]\\nprobs = entail_contradiction_logits.softmax(dim=1)\\nprob_label_is_true = probs[:,1]\"}, \"performance\": {\"dataset\": \"multi_nli\", \"accuracy\": \"Not specified\"}, \"description\": \"This is the checkpoint for bart-large after being trained on the MultiNLI (MNLI) dataset. The model can be used for zero-shot text classification by posing the sequence to be classified as the NLI premise and constructing a hypothesis from each candidate label. The probabilities for entailment and contradiction are then converted to label probabilities.\"}}", "category": "generic"}
{"question_id": 688, "text": " We have written a summary of a new book's plot. Now, we want to ensure if the summary contains conflicting information.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Natural Language Inference\", \"api_name\": \"cross-encoder/nli-MiniLM2-L6-H768\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/nli-MiniLM2-L6-H768')\", \"api_arguments\": [\"sentence1\", \"sentence2\"], \"python_environment_requirements\": [\"sentence_transformers\", \"transformers\"], \"example_code\": \"from sentence_transformers import CrossEncoder\\nmodel = CrossEncoder('cross-encoder/nli-MiniLM2-L6-H768')\\nscores = model.predict([('A man is eating pizza', 'A man eats something'), ('A black race car starts up in front of a crowd of people.', 'A man is driving down a lonely road.')])\", \"performance\": {\"dataset\": \"SNLI and MultiNLI\", \"accuracy\": \"See SBERT.net - Pretrained Cross-Encoder for evaluation results\"}, \"description\": \"This model was trained using SentenceTransformers Cross-Encoder class on the SNLI and MultiNLI datasets. For a given sentence pair, it will output three scores corresponding to the labels: contradiction, entailment, neutral.\"}}", "category": "generic"}
{"question_id": 689, "text": " We have a user comment about a product, and we want to infer if the sentiment of the comment is positive or negative.\\n###Input: \\\"I recently purchased this product and it completely exceeded my expectations! The build quality is top-notch, and I've already recommended it to several friends.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"valhalla/distilbart-mnli-12-6\", \"api_call\": \"pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\", \"api_arguments\": \"text, candidate_labels\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\\nresult = nlp('The movie was great!', ['positive', 'negative'])\\nprint(result)\", \"performance\": {\"dataset\": \"MNLI\", \"accuracy\": {\"matched_acc\": \"89.19\", \"mismatched_acc\": \"89.01\"}}, \"description\": \"distilbart-mnli is the distilled version of bart-large-mnli created using the No Teacher Distillation technique proposed for BART summarisation by Huggingface. It is designed for zero-shot classification tasks.\"}}", "category": "generic"}
{"question_id": 690, "text": " Extract a conclusion from the following text: \\\"Studies have been shown that owning a dog is good for you. Having a dog can help decrease stress levels, improve your mood, and increase physical activity.\\\"\\n###Input: Studies have been shown that owning a dog is good for you. Having a dog can help decrease stress levels, improve your mood, and increase physical activity.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Translation, Summarization, Question Answering, Text Classification\", \"api_name\": \"t5-base\", \"api_call\": \"T5Model.from_pretrained('t5-base')\", \"api_arguments\": [\"input_ids\", \"decoder_input_ids\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import T5Tokenizer, T5Model\\ntokenizer = T5Tokenizer.from_pretrained('t5-base')\\nmodel = T5Model.from_pretrained('t5-base')\\ninput_ids = tokenizer('Studies have been shown that owning a dog is good for you', return_tensors='pt').input_ids\\ndecoder_input_ids = tokenizer('Studies show that', return_tensors='pt').input_ids\\noutputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"See research paper, Table 14\"}, \"description\": \"T5-Base is a Text-To-Text Transfer Transformer (T5) model with 220 million parameters. It is designed to perform various NLP tasks, including machine translation, document summarization, question answering, and text classification. The model is pre-trained on the Colossal Clean Crawled Corpus (C4) and can be used with the Transformers library.\"}}", "category": "generic"}
{"question_id": 691, "text": " Our company needs a versatile NLP model to build a social media manager to generate summaries of lengthy articles for sharing on social media.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation, Summarization, Question Answering, Sentiment Analysis, Regression\", \"api_name\": \"t5-large\", \"api_call\": \"T5Model.from_pretrained('t5-large')\", \"api_arguments\": {\"input_ids\": \"tokenizer(..., return_tensors='pt').input_ids\", \"decoder_input_ids\": \"tokenizer(..., return_tensors='pt').input_ids\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import T5Tokenizer, T5Model\"}, \"example_code\": \"tokenizer = T5Tokenizer.from_pretrained('t5-large')\\nmodel = T5Model.from_pretrained('t5-large')\\ninput_ids = tokenizer('Studies have been shown that owning a dog is good for you', return_tensors='pt').input_ids\\ndecoder_input_ids = tokenizer('Studies show that', return_tensors='pt').input_ids\\noutputs = model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"See research paper, Table 14\"}, \"description\": \"T5-Large is a Text-To-Text Transfer Transformer (T5) model with 770 million parameters. It is designed to handle a variety of NLP tasks, including translation, summarization, question answering, sentiment analysis, and regression. The model is pre-trained on the Colossal Clean Crawled Corpus (C4) and fine-tuned on various supervised and unsupervised tasks.\"}}", "category": "generic"}
{"question_id": 692, "text": " We have a real estate website and would like to translate property descriptions in English to French.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Text-to-Text Generation\", \"api_name\": \"optimum/t5-small\", \"api_call\": \"ORTModelForSeq2SeqLM.from_pretrained('optimum/t5-small')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"optimum.onnxruntime\"], \"example_code\": \"from transformers import AutoTokenizer, pipeline\\nfrom optimum.onnxruntime import ORTModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(optimum/t5-small)\\nmodel = ORTModelForSeq2SeqLM.from_pretrained(optimum/t5-small)\\ntranslator = pipeline(translation_en_to_fr, model=model, tokenizer=tokenizer)\\nresults = translator(My name is Eustache and I have a pet raccoon)\\nprint(results)\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"N/A\"}, \"description\": \"T5 is an encoder-decoder model pre-trained on a multi-task mixture of unsupervised and supervised tasks and for which each task is converted into a text-to-text format. It can be used for translation, text-to-text generation, and summarization.\"}}", "category": "generic"}
{"question_id": 693, "text": " My friend wrote me an English text about the upcoming holiday. I need to translate it to Arabic so I can share it with my family.\\n###Input: \\\"My friend is planning a holiday trip for our families. He found a beautiful place with a beach, swimming pool, and a wide range of outdoor activities for kids. There's also a famous seafood restaurant nearby! I think our families will have a great time together.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-en-ar\", \"api_call\": \"pipeline('translation_en_to_ar', model='Helsinki-NLP/opus-mt-en-ar')\", \"api_arguments\": {\"text\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\ntranslation = pipeline('translation_en_to_ar', model='Helsinki-NLP/opus-mt-en-ar')\\ntranslated_text = translation('Hello World')\", \"performance\": {\"dataset\": \"Tatoeba-test.eng.ara\", \"accuracy\": {\"BLEU\": 14.0, \"chr-F\": 0.437}}, \"description\": \"A Hugging Face Transformers model for English to Arabic translation, trained on the Tatoeba dataset. It uses a transformer architecture and requires a sentence initial language token in the form of '>>id<<' (id = valid target language ID).\"}}", "category": "generic"}
{"question_id": 694, "text": " We received a customer feedback document which is very lengthy. We need a summarization of it.\\n###Input: The customer support service was excellent. All our concerns were attended to promptly by the friendly and knowledgeable staff. The user interface, however, could use some improvement. Navigating through the platform can be challenging, and it took us quite some time to find the relevant information we needed.\\nAdditionally, some of our team members faced technical issues while using the platform, particularly with the integration of third-party tools. We had to reach out to the support team multiple times to resolve these issues. Overall, while we genuinely appreciate your team's assistance, we expect better performance from the platform itself.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text-to-Text Generation\", \"api_name\": \"philschmid/bart-large-cnn-samsum\", \"api_call\": \"pipeline('summarization', model='philschmid/bart-large-cnn-samsum')\", \"api_arguments\": {\"model\": \"philschmid/bart-large-cnn-samsum\"}, \"python_environment_requirements\": {\"transformers\": \"latest\"}, \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline(summarization, model=philschmid/bart-large-cnn-samsum)\\nconversation = '''Jeff: Can I train a \\ud83e\\udd17 Transformers model on Amazon SageMaker? \\nPhilipp: Sure you can use the new Hugging Face Deep Learning Container. \\nJeff: ok.\\nJeff: and how can I get started? \\nJeff: where can I find documentation? \\nPhilipp: ok, ok you can find everything here. https://huggingface.co/blog/the-partnership-amazon-sagemaker-and-hugging-face <br />\\n'''\\nsummarizer(conversation)\", \"performance\": {\"dataset\": \"samsum\", \"accuracy\": {\"eval_rouge1\": 42.621, \"eval_rouge2\": 21.9825, \"eval_rougeL\": 33.034, \"eval_rougeLsum\": 39.6783, \"test_rouge1\": 41.3174, \"test_rouge2\": 20.8716, \"test_rougeL\": 32.1337, \"test_rougeLsum\": 38.4149}}, \"description\": \"philschmid/bart-large-cnn-samsum is a BART-based model trained for text summarization on the SAMSum dataset. It can be used to generate abstractive summaries of conversations.\"}}", "category": "generic"}
{"question_id": 695, "text": " I would like to give a brief overview of our team meeting to my supervisor, so I need a summary of the conversation.\\n###Input: \\\"Anna: In today's meeting, we discussed increasing marketing budget. Tom: I suggested allocating more funds to social media campaigns. Sarah: I proposed focusing on improving SEO. Anna: We agreed on investing in content creation, too. Tom: The team will revise the strategy and present it next week. Sarah: Let's determine new KPIs for evaluating our progress.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Summarization\", \"api_name\": \"distilbart-cnn-12-6-samsum\", \"api_call\": \"pipeline('summarization', model='philschmid/distilbart-cnn-12-6-samsum')\", \"api_arguments\": {\"model\": \"philschmid/distilbart-cnn-12-6-samsum\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline(summarization, model=philschmid/distilbart-cnn-12-6-samsum)\\nconversation = '''Jeff: Can I train a \\ud83e\\udd17 Transformers model on Amazon SageMaker? \\nPhilipp: Sure you can use the new Hugging Face Deep Learning Container. \\nJeff: ok.\\nJeff: and how can I get started? \\nJeff: where can I find documentation? \\nPhilipp: ok, ok you can find everything here. https://huggingface.co/blog/the-partnership-amazon-sagemaker-and-hugging-face <br />\\n'''\\nsummarizer(conversation)\", \"performance\": {\"dataset\": \"samsum\", \"accuracy\": {\"ROUGE-1\": 41.09, \"ROUGE-2\": 20.746, \"ROUGE-L\": 31.595, \"ROUGE-LSUM\": 38.339}}, \"description\": \"This model is a DistilBART-based text summarization model trained on the SAMsum dataset. It can be used to generate summaries of conversational text.\"}}", "category": "generic"}
{"question_id": 696, "text": " We need to develop a conversational chatbot that can answer users' queries, ask questions, and have a friendly conversation.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"facebook/blenderbot-1B-distill\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('facebook/blenderbot-1B-distill')\", \"api_arguments\": {\"input_message\": \"string\"}, \"python_environment_requirements\": {\"library\": \"transformers\", \"version\": \"latest\"}, \"example_code\": \"inputs = tokenizer('Hello, how are you?', return_tensors='pt'); outputs = model.generate(inputs['input_ids']); decoded_output = tokenizer.decode(outputs[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not mentioned\"}, \"description\": \"BlenderBot-1B is a large-scale open-domain chatbot model that can engage in conversations, ask and answer questions, and display knowledge, empathy, and personality. This distilled version is smaller and faster than the original 9.4B parameter model, making it more accessible for use.\"}}", "category": "generic"}
{"question_id": 697, "text": " My daughter left her laptop logged in, and I found her English essay unfinished. There's a sentence that goes like \\\"In the story, the antagonist represents the <mask> nature of humanity.\\\" Can you help me complete her sentence with an appropriate word?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"roberta-base\", \"api_call\": \"pipeline('fill-mask', model='roberta-base')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='roberta-base')\\nunmasker(Hello I'm a <mask> model.)\", \"performance\": {\"dataset\": [{\"name\": \"MNLI\", \"accuracy\": 87.6}, {\"name\": \"QQP\", \"accuracy\": 91.9}, {\"name\": \"QNLI\", \"accuracy\": 92.8}, {\"name\": \"SST-2\", \"accuracy\": 94.8}, {\"name\": \"CoLA\", \"accuracy\": 63.6}, {\"name\": \"STS-B\", \"accuracy\": 91.2}, {\"name\": \"MRPC\", \"accuracy\": 90.2}, {\"name\": \"RTE\", \"accuracy\": 78.7}]}, \"description\": \"RoBERTa is a transformers model pretrained on a large corpus of English data in a self-supervised fashion using the Masked language modeling (MLM) objective. This model is case-sensitive and can be fine-tuned on a downstream task.\"}}", "category": "generic"}
{"question_id": 698, "text": " We are developing a program to teach French to English speakers. The program should complete a sentence with a missing word in French.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"camembert-base\", \"api_call\": \"pipeline('fill-mask', model='camembert-base', tokenizer='camembert-base')\", \"api_arguments\": [\"model\", \"tokenizer\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import pipeline; camembert_fill_mask = pipeline('fill-mask', model='camembert-base', tokenizer='camembert-base'); results = camembert_fill_mask('Le camembert est <mask> :)')\", \"performance\": {\"dataset\": \"oscar\", \"accuracy\": \"N/A\"}, \"description\": \"CamemBERT is a state-of-the-art language model for French based on the RoBERTa model. It is available on Hugging Face in 6 different versions with varying number of parameters, amount of pretraining data, and pretraining data source domains. It can be used for Fill-Mask tasks.\"}}", "category": "generic"}
{"question_id": 699, "text": " I have a multilingual document, and there is a missing word in the document. Please help me find out what this missing word might be.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"distilbert-base-multilingual-cased\", \"api_call\": \"pipeline('fill-mask', model='distilbert-base-multilingual-cased')\", \"api_arguments\": [\"pipeline\", \"fill-mask\", \"model\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='distilbert-base-multilingual-cased')\\nunmasker(Hello I'm a [MASK] model.)\", \"performance\": {\"dataset\": [{\"name\": \"XNLI\", \"accuracy\": {\"English\": 78.2, \"Spanish\": 69.1, \"Chinese\": 64.0, \"German\": 66.3, \"Arabic\": 59.1, \"Urdu\": 54.7}}]}, \"description\": \"This model is a distilled version of the BERT base multilingual model. It is trained on the concatenation of Wikipedia in 104 different languages. The model has 6 layers, 768 dimension and 12 heads, totalizing 134M parameters. On average, this model, referred to as DistilmBERT, is twice as fast as mBERT-base.\"}}", "category": "generic"}
{"question_id": 700, "text": " As a translation company, we are translating messages between co-workers in a multinational company. Translate the message from Hindi to French.\\n###Input: \\\"\\u0906\\u092a\\u0915\\u0940 \\u092a\\u094d\\u0930\\u0947\\u091c\\u093c\\u091f\\u0947\\u0936\\u0928 \\u0915\\u093e \\u0906\\u0927\\u093e\\u0930 \\u0905\\u091a\\u094d\\u091b\\u093e \\u0925\\u093e, \\u0932\\u0947\\u0915\\u093f\\u0928 \\u0921\\u0947\\u091f\\u093e \\u0935\\u093f\\u0936\\u094d\\u0932\\u0947\\u0937\\u0923 \\u092a\\u0930 \\u0927\\u094d\\u092f\\u093e\\u0928 \\u0926\\u0947\\u0928\\u093e \\u091a\\u093e\\u0939\\u093f\\u090f\\u0964\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"facebook/mbart-large-50-many-to-many-mmt\", \"api_call\": \"MBartForConditionalGeneration.from_pretrained('facebook/mbart-large-50-many-to-many-mmt')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"facebook/mbart-large-50-many-to-many-mmt\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.0\"}, \"example_code\": \"from transformers import MBartForConditionalGeneration, MBart50TokenizerFast\\narticle_hi model = MBartForConditionalGeneration.from_pretrained(facebook/mbart-large-50-many-to-many-mmt)\\ntokenizer = MBart50TokenizerFast.from_pretrained(facebook/mbart-large-50-many-to-many-mmt)\\ntokenizer.src_lang = hi_IN\\nencoded_hi = tokenizer(article_hi, return_tensors=pt)\\ngenerated_tokens = model.generate(\\n **encoded_hi,\\n forced_bos_token_id=tokenizer.lang_code_to_id[fr_XX]\\n)\\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\", \"performance\": {\"dataset\": \"Multilingual Translation\", \"accuracy\": \"Not specified\"}, \"description\": \"mBART-50 many-to-many multilingual machine translation model can translate directly between any pair of 50 languages. It was introduced in the Multilingual Translation with Extensible Multilingual Pretraining and Finetuning paper.\"}}", "category": "generic"}
{"question_id": 701, "text": " Our task is to complete a given sentence with a missing word. The sentence is from an electronic health record.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"emilyalsentzer/Bio_ClinicalBERT\", \"api_call\": \"AutoModel.from_pretrained('emilyalsentzer/Bio_ClinicalBERT')\", \"api_arguments\": [\"AutoTokenizer\", \"AutoModel\", \"from_pretrained\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModel\\ntokenizer = AutoTokenizer.from_pretrained('emilyalsentzer/Bio_ClinicalBERT')\\nmodel = AutoModel.from_pretrained('emilyalsentzer/Bio_ClinicalBERT')\", \"performance\": {\"dataset\": \"MIMIC III\", \"accuracy\": \"Not provided\"}, \"description\": \"Bio_ClinicalBERT is a model initialized with BioBERT and trained on all MIMIC notes. It can be used for various NLP tasks in the clinical domain, such as Named Entity Recognition (NER) and Natural Language Inference (NLI).\"}}", "category": "generic"}
{"question_id": 702, "text": " A Dutch friend asked for help in completing a sentence with a missing word. Can you fill in the blank?\\n###Input: \\\"Het is vandaag erg koud, dus vergeet niet je ___ mee te nemen.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"GroNLP/bert-base-dutch-cased\", \"api_call\": \"AutoModel.from_pretrained('GroNLP/bert-base-dutch-cased')\", \"api_arguments\": [\"pretrained_model_name_or_path\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModel, TFAutoModel\\ntokenizer = AutoTokenizer.from_pretrained(GroNLP/bert-base-dutch-cased)\\nmodel = AutoModel.from_pretrained(GroNLP/bert-base-dutch-cased)\", \"performance\": {\"dataset\": [{\"name\": \"CoNLL-2002\", \"accuracy\": \"90.24\"}, {\"name\": \"SoNaR-1\", \"accuracy\": \"84.93\"}, {\"name\": \"spaCy UD LassySmall\", \"accuracy\": \"86.10\"}]}, \"description\": \"BERTje is a Dutch pre-trained BERT model developed at the University of Groningen.\"}}", "category": "generic"}
{"question_id": 703, "text": " Our school needs to create fill-in-the-blank quizzes for students. Is it possible to generate a fill-in-the-blank question from the following sentence: \\\"The cat chased the mouse and then climbed the tree.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Fill-Mask\", \"api_name\": \"microsoft/deberta-v2-xxlarge\", \"api_call\": \"DebertaV2ForMaskedLM.from_pretrained('microsoft/deberta-v2-xxlarge')\", \"api_arguments\": {\"model_name_or_path\": \"microsoft/deberta-v2-xxlarge\"}, \"python_environment_requirements\": {\"pip_install\": [\"datasets\", \"deepspeed\"]}, \"example_code\": \"python -m torch.distributed.launch --nproc_per_node=${num_gpus} run_glue.py --model_name_or_path microsoft/deberta-v2-xxlarge --task_name $TASK_NAME --do_train --do_eval --max_seq_length 256 --per_device_train_batch_size ${batch_size} --learning_rate 3e-6 --num_train_epochs 3 --output_dir $output_dir --overwrite_output_dir --logging_steps 10 --logging_dir $output_dir --deepspeed ds_config.json\", \"performance\": {\"dataset\": [{\"name\": \"SQuAD 1.1\", \"accuracy\": \"F1/EM: 96.1/91.4\"}, {\"name\": \"SQuAD 2.0\", \"accuracy\": \"F1/EM: 92.2/89.7\"}, {\"name\": \"MNLI-m/mm\", \"accuracy\": \"Acc: 91.7/91.9\"}, {\"name\": \"SST-2\", \"accuracy\": \"Acc: 97.2\"}, {\"name\": \"QNLI\", \"accuracy\": \"Acc: 96.0\"}, {\"name\": \"CoLA\", \"accuracy\": \"MCC: 72.0\"}, {\"name\": \"RTE\", \"accuracy\": \"Acc: 93.5\"}, {\"name\": \"MRPC\", \"accuracy\": \"Acc/F1: 93.1/94.9\"}, {\"name\": \"QQP\", \"accuracy\": \"Acc/F1: 92.7/90.3\"}, {\"name\": \"STS-B\", \"accuracy\": \"P/S: 93.2/93.1\"}]}, \"description\": \"DeBERTa improves the BERT and RoBERTa models using disentangled attention and enhanced mask decoder. It outperforms BERT and RoBERTa on majority of NLU tasks with 80GB training data. This is the DeBERTa V2 xxlarge model with 48 layers, 1536 hidden size. The total parameters are 1.5B and it is trained with 160GB raw data.\"}}", "category": "generic"}
{"question_id": 704, "text": " We are building a customer support chatbot that needs to find the most related FAQ for a given customer query.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-albert-small-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-albert-small-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-albert-small-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": [\"snli\", \"multi_nli\", \"ms_marco\"], \"accuracy\": \"https://seb.sbert.net\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 705, "text": " We want to make a system that reads our email messages out loud in different voices.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"microsoft/speecht5_tts\", \"api_call\": \"SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\", \"api_arguments\": [\"text\", \"return_tensors\", \"input_ids\", \"speaker_embeddings\", \"vocoder\"], \"python_environment_requirements\": \"!pip install git+https://github.com/huggingface/transformers sentencepiece datasets\", \"example_code\": \"from transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan\\nfrom datasets import load_dataset\\nimport torch\\nimport soundfile as sf\\nprocessor = SpeechT5Processor.from_pretrained('microsoft/speecht5_tts')\\nmodel = SpeechT5ForTextToSpeech.from_pretrained('microsoft/speecht5_tts')\\nvocoder = SpeechT5HifiGan.from_pretrained('microsoft/speecht5_hifigan')\\ninputs = processor(text='Hello, my dog is cute', return_tensors='pt')\\nembeddings_dataset = load_dataset('Matthijs/cmu-arctic-xvectors', split='validation')\\nspeaker_embeddings = torch.tensor(embeddings_dataset[7306]['xvector']).unsqueeze(0)\\nspeech = model.generate_speech(inputs['input_ids'], speaker_embeddings, vocoder=vocoder)\\nsf.write('speech.wav', speech.numpy(), samplerate=16000)\", \"performance\": {\"dataset\": \"LibriTTS\", \"accuracy\": \"Not specified\"}, \"description\": \"SpeechT5 model fine-tuned for speech synthesis (text-to-speech) on LibriTTS. It is a unified-modal SpeechT5 framework that explores the encoder-decoder pre-training for self-supervised speech/text representation learning. It can be used for a wide variety of spoken language processing tasks, including automatic speech recognition, speech synthesis, speech translation, voice conversion, speech enhancement, and speaker identification.\"}}", "category": "generic"}
{"question_id": 706, "text": " We are working on a language learning app for Chinese. We need to give audio examples for each lesson.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best\", \"api_call\": \"Text2Speech.from_pretrained('espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"torch\", \"espnet_model_zoo\"], \"example_code\": \"import soundfile\\nfrom espnet2.bin.tts_inference import Text2Speech\\ntext2speech = Text2Speech.from_pretrained(espnet/kan-bayashi_csmsc_tts_train_tacotron2_raw_phn_pypinyin_g2p_phone_train.loss.best)\\ntext = \\u6625\\u6c5f\\u6f6e\\u6c34\\u8fde\\u6d77\\u5e73\\uff0c\\u6d77\\u4e0a\\u660e\\u6708\\u5171\\u6f6e\\u751f\\nspeech = text2speech(text)[wav]\\nsoundfile.write(out.wav, speech.numpy(), text2speech.fs, PCM_16)\", \"performance\": {\"dataset\": \"csmsc\", \"accuracy\": \"Not specified\"}, \"description\": \"A pre-trained Text-to-Speech model for Chinese language using ESPnet framework. It can be used to convert text input into speech output in Chinese.\"}}", "category": "generic"}
{"question_id": 707, "text": " We are building an AI chatbot that reads out user messages using synthesized human-like speech. For this purpose, we need to convert text messages to audio. \\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_ljspeech_joint_finetune_conformer_fastspeech2_hifigan\", \"api_call\": \"Text2Speech.from_pretrained('espnet/kan-bayashi_ljspeech_joint_finetune_conformer_fastspeech2_hifigan')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"LJSpeech\", \"accuracy\": \"\"}, \"description\": \"A pretrained Text-to-Speech model based on the ESPnet framework, fine-tuned on the LJSpeech dataset. This model is capable of converting text input into synthesized speech.\"}}", "category": "generic"}
{"question_id": 708, "text": " I want to identify when people are speaking in an audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"pyannote.audio\", \"functionality\": \"Automatic Speech Recognition\", \"api_name\": \"pyannote/voice-activity-detection\", \"api_call\": \"Pipeline.from_pretrained('pyannote/voice-activity-detection')\", \"api_arguments\": [\"audio.wav\"], \"python_environment_requirements\": [\"pyannote.audio 2.1\"], \"example_code\": \"from pyannote.audio import Pipeline\\npipeline = Pipeline.from_pretrained(pyannote/voice-activity-detection, use_auth_token=ACCESS_TOKEN_GOES_HERE)\\noutput = pipeline(audio.wav)\\nfor speech in output.get_timeline().support():\\n  # active speech between speech.start and speech.end\", \"performance\": {\"dataset\": \"ami\", \"accuracy\": \"Not specified\"}, \"description\": \"A pretrained voice activity detection pipeline that detects active speech in audio files.\"}}", "category": "generic"}
{"question_id": 709, "text": " I have a collection of audio recordings from different sources, and I want to convert them into text to make an archive.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription and Translation\", \"api_name\": \"openai/whisper-small\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-small')\", \"api_arguments\": {\"language\": \"english\", \"task\": \"transcribe\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"datasets\": \"latest\"}, \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained(openai/whisper-small)\", \"model = WhisperForConditionalGeneration.from_pretrained(openai/whisper-small)\", \"model.config.forced_decoder_ids = None\", \"ds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\", \"sample = ds[0][audio]\", \"input_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\", \"print(transcription)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean) test set\", \"accuracy\": \"3.432 WER\"}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning. It is a Transformer-based encoder-decoder model and supports transcription and translation in various languages.\"}}", "category": "generic"}
{"question_id": 710, "text": " A company developing an application for transcribing customer service calls requires a model that can understand spoken language.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription and Translation\", \"api_name\": \"openai/whisper-medium\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-medium')\", \"api_arguments\": [\"sample\", \"sampling_rate\", \"language\", \"task\", \"skip_special_tokens\"], \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": \"from transformers import WhisperProcessor, WhisperForConditionalGeneration\\nfrom datasets import load_dataset\\nprocessor = WhisperProcessor.from_pretrained(openai/whisper-medium)\\nmodel = WhisperForConditionalGeneration.from_pretrained(openai/whisper-medium)\\nmodel.config.forced_decoder_ids = None\\nds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\\nsample = ds[0][audio]\\ninput_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\\npredicted_ids = model.generate(input_features)\\ntranscription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\", \"performance\": {\"dataset\": [{\"name\": \"LibriSpeech (clean)\", \"accuracy\": 2.9}, {\"name\": \"LibriSpeech (other)\", \"accuracy\": 5.9}, {\"name\": \"Common Voice 11.0\", \"accuracy\": 53.87}]}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains without the need for fine-tuning. It is a Transformer-based encoder-decoder model and was trained on either English-only data or multilingual data.\"}}", "category": "generic"}
{"question_id": 711, "text": " We are building an audio assistant. Apply noise suppression to our new voice commands.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"DCCRNet_Libri1Mix_enhsingle_16k\", \"api_call\": \"AutoModelForAudioToAudio.from_pretrained('JorisCos/DCCRNet_Libri1Mix_enhsingle_16k')\", \"api_arguments\": \"pretrained_model_name_or_path\", \"python_environment_requirements\": [\"transformers\", \"asteroid\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri1Mix\", \"accuracy\": {\"si_sdr\": 13.329767398333798, \"si_sdr_imp\": 9.879986092474098, \"sdr\": 13.87279932997016, \"sdr_imp\": 10.370136530757103, \"sir\": \"Infinity\", \"sir_imp\": \"NaN\", \"sar\": 13.87279932997016, \"sar_imp\": 10.370136530757103, \"stoi\": 0.9140907015623948, \"stoi_imp\": 0.11817087802185405}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the enh_single task of the Libri1Mix dataset.\"}}", "category": "generic"}
{"question_id": 712, "text": " We have an audio recording with overlapping speakers talking. We need to remove the overlaps and make it a clear single speaker recording.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri2Mix_sepclean_16k\", \"api_call\": \"Asteroid('JorisCos/ConvTasNet_Libri2Mix_sepclean_16k')\", \"api_arguments\": [], \"python_environment_requirements\": [\"asteroid\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 15.243671356901526, \"si_sdr_imp\": 15.243034178473609, \"sdr\": 15.668108919568112, \"sdr_imp\": 15.578229918028036, \"sir\": 25.295100756629957, \"sir_imp\": 25.205219921301754, \"sar\": 16.307682590197313, \"sar_imp\": -51.64989963759405, \"stoi\": 0.9394951175291422, \"stoi_imp\": 0.22640192740016568}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 713, "text": " We have just built an app for hosting podcasts, and we need a speech enhancement model to clean noise from the audio recordings submitted by our users.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"speechbrain/sepformer-wham16k-enhancement\", \"api_call\": \"separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\", \"api_arguments\": {\"path\": \"path to the input audio file\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"from speechbrain.pretrained import SepformerSeparation as separator\\nimport torchaudio\\nmodel = separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\\nest_sources = model.separate_file(path='speechbrain/sepformer-wham16k-enhancement/example_wham16k.wav')\\ntorchaudio.save(enhanced_wham16k.wav, est_sources[:, :, 0].detach().cpu(), 16000)\", \"performance\": {\"dataset\": \"WHAM!\", \"accuracy\": {\"Test-Set SI-SNR\": \"14.3 dB\", \"Test-Set PESQ\": \"2.20\"}}, \"description\": \"This repository provides all the necessary tools to perform speech enhancement (denoising) with a SepFormer model, implemented with SpeechBrain, and pretrained on WHAM! dataset with 16k sampling frequency, which is basically a version of WSJ0-Mix dataset with environmental noise and reverberation in 8k.\"}}", "category": "generic"}
{"question_id": 714, "text": " My coworker sent me a voice message in Spanish. Translate this audio message to English, so that I can understand it.\\n###Input: spanish_voice_message.wav\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"textless_sm_sl_es\", \"api_call\": \"textless_sm_sl_es()\", \"api_arguments\": null, \"python_environment_requirements\": \"fairseq\", \"example_code\": \"https://huggingface.co/facebook/textless_sm_cs_en\", \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"A Fairseq model for audio-to-audio speech-to-speech translation.\"}}", "category": "generic"}
{"question_id": 715, "text": " We are developing a virtual assistant and need to integrate a speech enhancement feature in it.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"sepformer-wham-enhancement\", \"api_call\": \"separator.from_hparams(source='speechbrain/sepformer-wham-enhancement', savedir='pretrained_models/sepformer-wham-enhancement')\", \"api_arguments\": [\"path\"], \"python_environment_requirements\": [\"pip install speechbrain\"], \"example_code\": \"from speechbrain.pretrained import SepformerSeparation as separator\\nimport torchaudio\\nmodel = separator.from_hparams(source='speechbrain/sepformer-wham-enhancement', savedir='pretrained_models/sepformer-wham-enhancement')\\nest_sources = model.separate_file(path='speechbrain/sepformer-wham-enhancement/example_wham.wav')\\ntorchaudio.save('enhanced_wham.wav', est_sources[:, :, 0].detach().cpu(), 8000)\", \"performance\": {\"dataset\": \"WHAM!\", \"accuracy\": \"14.35 dB SI-SNR\"}, \"description\": \"This repository provides all the necessary tools to perform speech enhancement (denoising) with a SepFormer model, implemented with SpeechBrain, and pretrained on WHAM! dataset with 8k sampling frequency, which is basically a version of WSJ0-Mix dataset with environmental noise and reverberation in 8k.\"}}", "category": "generic"}
{"question_id": 716, "text": " A kid's educational toy company is including a voice assistant that recognizes simple voice commands from children. They need an example on how to recognize spoken digits.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"mazkooleg/0-9up-ast-ft\", \"api_call\": \"pipeline('audio-classification', model= 'MIT/ast-finetuned-speech-commands-v2')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"Transformers 4.26.1, Pytorch 1.11.0+cpu, Datasets 2.10.0, Tokenizers 0.12.1\", \"example_code\": \"\", \"performance\": {\"dataset\": \"mazkooleg/0-9up_google_speech_commands_augmented_raw\", \"accuracy\": 0.9979}, \"description\": \"This model is a fine-tuned version of MIT/ast-finetuned-speech-commands-v2 on the None dataset. It achieves the following results on the evaluation set: Loss: 0.0210, Accuracy: 0.9979\"}}", "category": "generic"}
{"question_id": 717, "text": " Our company needs to analyze customer phone call recordings and identify specific numbers mentioned by customers during the call.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"mazkooleg/0-9up-data2vec-audio-base-960h-ft\", \"api_call\": \"pipeline('audio-classification', model='mazkooleg/0-9up-data2vec-audio-base-960h-ft')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"Transformers 4.26.1, Pytorch 1.11.0+cpu, Datasets 2.10.1, Tokenizers 0.12.1\", \"example_code\": \"\", \"performance\": {\"dataset\": \"None\", \"accuracy\": 0.9967}, \"description\": \"This model is a fine-tuned version of facebook/data2vec-audio-base-960h on the None dataset.\"}}", "category": "generic"}
{"question_id": 718, "text": " You are building a virtual global tour guide that can identify languages from the audio of people speaking. Use a model to identify which language is being spoken.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Language Identification\", \"api_name\": \"sanchit-gandhi/whisper-medium-fleurs-lang-id\", \"api_call\": \"AutoModelForSpeechClassification.from_pretrained('sanchit-gandhi/whisper-medium-fleurs-lang-id')\", \"api_arguments\": [\"model = AutoModelForSpeechClassification.from_pretrained('sanchit-gandhi/whisper-medium-fleurs-lang-id')\", \"processor = Wav2Vec2Processor.from_pretrained('sanchit-gandhi/whisper-medium-fleurs-lang-id')\"], \"python_environment_requirements\": [\"transformers==4.27.0.dev0\", \"pytorch==1.13.1\", \"datasets==2.9.0\", \"tokenizers==0.13.2\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"google/xtreme_s\", \"accuracy\": 0.8805}, \"description\": \"This model is a fine-tuned version of openai/whisper-medium on the FLEURS subset of the google/xtreme_s dataset. It is used for language identification in audio classification tasks.\"}}", "category": "generic"}
{"question_id": 719, "text": " I am working as the head of customer service for a Spanish speaking market. I want to know the sentiment of my customers on their last call with our support agents.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Classification\", \"api_name\": \"hackathon-pln-es/wav2vec2-base-finetuned-sentiment-classification-MESD\", \"api_call\": \"Wav2Vec2ForSequenceClassification.from_pretrained('hackathon-pln-es/wav2vec2-base-finetuned-sentiment-classification-MESD')\", \"api_arguments\": {\"model_name\": \"hackathon-pln-es/wav2vec2-base-finetuned-sentiment-classification-MESD\"}, \"python_environment_requirements\": {\"transformers\": \"4.17.0\", \"pytorch\": \"1.10.0+cu111\", \"datasets\": \"2.0.0\", \"tokenizers\": \"0.11.6\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"MESD\", \"accuracy\": 0.9308}, \"description\": \"This model is a fine-tuned version of facebook/wav2vec2-base on the MESD dataset. It is trained to classify underlying sentiment of Spanish audio/speech.\"}}", "category": "generic"}
{"question_id": 720, "text": " I have a recording of a meeting from which I need to extract the parts where people are talking and eliminate the silent parts.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Voice Activity Detection\", \"api_name\": \"julien-c/voice-activity-detection\", \"api_call\": \"Inference('julien-c/voice-activity-detection', device='cuda')\", \"api_arguments\": {\"audio\": \"TheBigBangTheory.wav\"}, \"python_environment_requirements\": \"pyannote.audio\", \"example_code\": \"from pyannote.audio.core.inference import Inference\\nmodel = Inference('julien-c/voice-activity-detection', device='cuda')\\nmodel({\\n audio: TheBigBangTheory.wav\\n})\", \"performance\": {\"dataset\": \"dihard\", \"accuracy\": \"Not provided\"}, \"description\": \"Example pyannote-audio Voice Activity Detection model using PyanNet. Imported from https://github.com/pyannote/pyannote-audio-hub and trained by @hbredin.\"}}", "category": "generic"}
{"question_id": 721, "text": " We are a company producing wine. Based on the chemical properties of our wine data, we need to analyze the quality of our products and determine whether they are good or bad.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Scikit-learn\", \"functionality\": \"Wine Quality classification\", \"api_name\": \"julien-c/wine-quality\", \"api_call\": \"joblib.load(cached_download(hf_hub_url('julien-c/wine-quality', 'winequality-red.csv')))\", \"api_arguments\": [\"X\"], \"python_environment_requirements\": [\"huggingface_hub\", \"joblib\", \"pandas\"], \"example_code\": \"from huggingface_hub import hf_hub_url, cached_download\\nimport joblib\\nimport pandas as pd\\nREPO_ID = julien-c/wine-quality\\nFILENAME = sklearn_model.joblib\\nmodel = joblib.load(cached_download(\\n hf_hub_url(REPO_ID, FILENAME)\\n))\\ndata_file = cached_download(\\n hf_hub_url(REPO_ID, winequality-red.csv)\\n)\\nwinedf = pd.read_csv(data_file, sep=;)\\nX = winedf.drop([quality], axis=1)\\nY = winedf[quality]\\nprint(X[:3])\\nlabels = model.predict(X[:3])\\nmodel.score(X, Y)\", \"performance\": {\"dataset\": \"julien-c/wine-quality\", \"accuracy\": 0.6616635397123202}, \"description\": \"A Simple Example of Scikit-learn Pipeline for Wine Quality classification. Inspired by https://towardsdatascience.com/a-simple-example-of-pipeline-in-machine-learning-with-scikit-learn-e726ffbb6976 by Saptashwa Bhattacharyya.\"}}", "category": "generic"}
{"question_id": 722, "text": " Our team is working on a podcast app, and we want to automatically generate transcripts with timestamps for each speaker.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"pyannote.audio\", \"functionality\": \"Speaker diarization\", \"api_name\": \"johnislarry/cloned-pyannote-speaker-diarization-endpoint\", \"api_call\": \"Pipeline.from_pretrained('pyannote/speaker-diarization@2.1',use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": [\"num_speakers\", \"min_speakers\", \"max_speakers\", \"segmentation_onset\"], \"python_environment_requirements\": \"pyannote.audio 2.0\", \"example_code\": {\"load_pipeline\": \"from pyannote.audio import Pipeline\\npipeline = Pipeline.from_pretrained(pyannote/speaker-diarization@2022.07)\", \"apply_pipeline\": \"diarization = pipeline(audio.wav)\", \"save_output\": \"with open(audio.rttm, w) as rttm:\\n  diarization.write_rttm(rttm)\"}, \"performance\": {\"dataset\": [{\"name\": \"AISHELL-4\", \"accuracy\": {\"DER%\": 14.61, \"FA%\": 3.31, \"Miss%\": 4.35, \"Conf%\": 6.95}}, {\"name\": \"AMI Mix-Headset only_words\", \"accuracy\": {\"DER%\": 18.21, \"FA%\": 3.28, \"Miss%\": 11.07, \"Conf%\": 3.87}}, {\"name\": \"AMI Array1-01 only_words\", \"accuracy\": {\"DER%\": 29.0, \"FA%\": 2.71, \"Miss%\": 21.61, \"Conf%\": 4.68}}, {\"name\": \"CALLHOME Part2\", \"accuracy\": {\"DER%\": 30.24, \"FA%\": 3.71, \"Miss%\": 16.86, \"Conf%\": 9.66}}, {\"name\": \"DIHARD 3 Full\", \"accuracy\": {\"DER%\": 20.99, \"FA%\": 4.25, \"Miss%\": 10.74, \"Conf%\": 6.0}}, {\"name\": \"REPERE Phase 2\", \"accuracy\": {\"DER%\": 12.62, \"FA%\": 1.55, \"Miss%\": 3.3, \"Conf%\": 7.76}}, {\"name\": \"VoxConverse v0.0.2\", \"accuracy\": {\"DER%\": 12.76, \"FA%\": 3.45, \"Miss%\": 3.85, \"Conf%\": 5.46}}]}, \"description\": \"This API provides speaker diarization functionality using the pyannote.audio framework. It is capable of processing audio files and outputting speaker diarization results in RTTM format. The API supports providing the number of speakers, minimum and maximum number of speakers, and adjusting the segmentation onset threshold.\"}}", "category": "generic"}
{"question_id": 723, "text": " I have a large dataset with both numerical and categorical features related to customer behavior. I want to classify them into different segments for targeted marketing. How do I use a TabTransformer for this task?\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Keras\", \"functionality\": \"Structured data learning with TabTransformer\", \"api_name\": \"keras-io/tab_transformer\", \"api_call\": \"TabTransformer.from_config()\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"Hugging Face\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"United States Census Income Dataset\", \"accuracy\": \"N/A\"}, \"description\": \"This model uses self-attention based Transformers structure followed by multiple feed forward layers to serve supervised and semi-supervised learning tasks on tabular data. The model's inputs can contain both numerical and categorical features. Categorical features are encoded into embedding vectors before being fed into a stack of Transformer blocks. The contextual embeddings of the categorical features after the final Transformer layer are concatenated with the input numerical features and fed into a final MLP block. A SoftMax function is applied at the end of the model.\"}}", "category": "generic"}
{"question_id": 724, "text": " Determine if an employee's annual salary meets or exceeds $50000.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Keras\", \"functionality\": \"Binary Classification\", \"api_name\": \"TF_Decision_Trees\", \"api_call\": \"TF_Decision_Trees(input_features, target)\", \"api_arguments\": [\"input_features\", \"target\"], \"python_environment_requirements\": [\"tensorflow >= 7.0\"], \"example_code\": \"https://github.com/tdubon/TF-GB-Forest/blob/c0cf4c7e3e29d819b996cfe4eecc1f2728115e52/TFDecisionTrees_Final.ipynb\", \"performance\": {\"dataset\": \"Census-Income Data Set\", \"accuracy\": 96.57}, \"description\": \"Use TensorFlow's Gradient Boosted Trees model in binary classification of structured data. Build a decision forests model by specifying the input feature usage. Implement a custom Binary Target encoder as a Keras Preprocessing layer to encode the categorical features with respect to their target value co-occurrences, and then use the encoded features to build a decision forests model. The model is trained on the US Census Income Dataset containing approximately 300k instances with 41 numerical and categorical variables. The task is to determine whether a person makes over 50k a year.\"}}", "category": "generic"}
{"question_id": 725, "text": " Identify whether a newly-setup chemical plant is exceeding carbon emission limits based on a CSV file containing data collected.\\n###Input: data.csv\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"omarques/autotrain-in-class-test-demo-1659958767\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"omarques/autotrain-data-in-class-test-demo\", \"accuracy\": 0.983}, \"description\": \"A model trained for binary classification of carbon emissions using AutoTrain.\"}}", "category": "generic"}
{"question_id": 726, "text": " I am working in a bank, I want to estimate the mortgage for a given housing using the housing's features.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Single Column Regression\", \"api_name\": \"jwan2021/autotrain-us-housing-prices-1771761511\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": {\"data\": \"pandas.DataFrame\"}, \"python_environment_requirements\": {\"joblib\": \"latest\", \"pandas\": \"latest\"}, \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"jwan2021/autotrain-data-us-housing-prices\", \"accuracy\": {\"Loss\": 134406.507, \"R2\": 0.861, \"MSE\": 18065109105.27, \"MAE\": 103271.843, \"RMSLE\": 0.139}}, \"description\": \"A model trained using AutoTrain for predicting US housing prices. The model is trained on the jwan2021/autotrain-data-us-housing-prices dataset and is a single column regression model with an ID of 1771761511.\"}}", "category": "generic"}
{"question_id": 727, "text": " We are building a robot for hopping in a controlled environment. Train it to perform a hop using Decision Transformers.\\n**Input:<noinput>**\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"decision-transformer-gym-hopper-medium\", \"api_call\": \"AutoModel.from_pretrained('edbeeching/decision-transformer-gym-hopper-medium')\", \"api_arguments\": {\"mean\": [1.311279, -0.08469521, -0.5382719, -0.07201576, 0.04932366, 2.1066856, -0.15017354, 0.00878345, -0.2848186, -0.18540096, -0.28461286], \"std\": [0.17790751, 0.05444621, 0.21297139, 0.14530419, 0.6124444, 0.85174465, 1.4515252, 0.6751696, 1.536239, 1.6160746, 5.6072536]}, \"python_environment_requirements\": {\"transformers\": \"latest\"}, \"example_code\": \"See our Blog Post, Colab notebook or Example Script for usage.\", \"performance\": {\"dataset\": \"Gym Hopper environment\", \"accuracy\": \"Not provided\"}, \"description\": \"Decision Transformer model trained on medium trajectories sampled from the Gym Hopper environment.\"}}", "category": "generic"}
{"question_id": 728, "text": " We are building a robot for elderly care. The robot should be able to understand what's happening and take appropriate actions based on the elderly's current activities.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning Robotics\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"EmbodiedAI tasks\", \"api_name\": \"VC1_BASE_NAME\", \"api_call\": \"model_utils.load_model('model_utils.VC1_BASE_NAME')\", \"api_arguments\": \"img\", \"python_environment_requirements\": \"from vc_models.models.vit import model_utils\", \"example_code\": \"model,embd_size,model_transforms,model_info = model_utils.load_model(model_utils.VC1_BASE_NAME)\\nimg = your_function_here ...\\ntransformed_img = model_transforms(img)\\nembedding = model(transformed_img)\", \"performance\": {\"dataset\": \"CortexBench\", \"accuracy\": \"Mean Success: 68.7%\"}, \"description\": \"The VC-1 model is a vision transformer (ViT) pre-trained on over 4,000 hours of egocentric videos from 7 different sources, together with ImageNet. The model is trained using Masked Auto-Encoding (MAE) and is available in two sizes: ViT-B and ViT-L. The model is intended for use for EmbodiedAI tasks, such as object manipulation and indoor navigation.\"}}", "category": "generic"}
{"question_id": 729, "text": " To build a source code recommendation engine, we need to extract features from text and code using Transformer models.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"microsoft/codebert-base\", \"api_call\": \"AutoModel.from_pretrained('microsoft/codebert-base')\", \"api_arguments\": \"n/a\", \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"n/a\", \"performance\": {\"dataset\": \"CodeSearchNet\", \"accuracy\": \"n/a\"}, \"description\": \"Pretrained weights for CodeBERT: A Pre-Trained Model for Programming and Natural Languages. The model is trained on bi-modal data (documents & code) of CodeSearchNet. This model is initialized with Roberta-base and trained with MLM+RTD objective.\"}}", "category": "generic"}
{"question_id": 730, "text": " Our team needs to prepare a feature matrix based on the given source code's programming constructs and comments for data analysis.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Engineering\", \"api_name\": \"microsoft/unixcoder-base\", \"api_call\": \"AutoModel.from_pretrained('microsoft/unixcoder-base')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained('microsoft/unixcoder-base')\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModel\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained('microsoft/unixcoder-base')\\nmodel = AutoModel.from_pretrained('microsoft/unixcoder-base')\", \"performance\": {\"dataset\": \"Not specified\", \"accuracy\": \"Not specified\"}, \"description\": \"UniXcoder is a unified cross-modal pre-trained model that leverages multimodal data (i.e. code comment and AST) to pretrain code representation. Developed by Microsoft Team and shared by Hugging Face. It is based on the RoBERTa model and trained on English language data. The model can be used for feature engineering tasks.\"}}", "category": "generic"}
{"question_id": 731, "text": " We are developing an interactive story app that would display a picture of each character as mentioned in the story given to our GPT-3 model.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image\", \"api_name\": \"dreamlike-art/dreamlike-anime-1.0\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('dreamlike-art/dreamlike-anime-1.0', torch_dtype=torch.float16)(prompt, negative_prompt=negative_prompt)\", \"api_arguments\": [\"prompt\", \"negative_prompt\"], \"python_environment_requirements\": [\"diffusers\", \"torch\"], \"example_code\": \"from diffusers import StableDiffusionPipeline\\nimport torch\\nmodel_id = dreamlike-art/dreamlike-anime-1.0\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe = pipe.to(cuda)\\nprompt = anime, masterpiece, high quality, 1girl, solo, long hair, looking at viewer, blush, smile, bangs, blue eyes, skirt, medium breasts, iridescent, gradient, colorful, besides a cottage, in the country\\nnegative_prompt = 'simple background, duplicate, retro style, low quality, lowest quality, 1980s, 1990s, 2000s, 2005 2006 2007 2008 2009 2010 2011 2012 2013, bad anatomy, bad proportions, extra digits, lowres, username, artist name, error, duplicate, watermark, signature, text, extra digit, fewer digits, worst quality, jpeg artifacts, blurry'\\nimage = pipe(prompt, negative_prompt=negative_prompt).images[0]\\nimage.save(./result.jpg)\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"Dreamlike Anime 1.0 is a high quality anime model, made by dreamlike.art. It can be used to generate anime-style images based on text prompts. The model is trained on 768x768px images and works best with prompts that include 'photo anime, masterpiece, high quality, absurdres'. It can be used with the Stable Diffusion Pipeline from the diffusers library.\"}}", "category": "generic"}
{"question_id": 732, "text": " As a landscape architect, I want to generate a description of an image of a park I've designed to use for promotional purposes.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Captioning\", \"api_name\": \"blip-image-captioning-base\", \"api_call\": \"BlipForConditionalGeneration.from_pretrained('Salesforce/blip-image-captioning-base')\", \"api_arguments\": [\"raw_image\", \"text\", \"return_tensors\"], \"python_environment_requirements\": [\"requests\", \"PIL\", \"transformers\"], \"example_code\": \"import requests\\nfrom PIL import Image\\nfrom transformers import BlipProcessor, BlipForConditionalGeneration\\nprocessor = BlipProcessor.from_pretrained(Salesforce/blip-image-captioning-base)\\nmodel = BlipForConditionalGeneration.from_pretrained(Salesforce/blip-image-captioning-base)\\nimg_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg'\\nraw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\\ntext = a photography of\\ninputs = processor(raw_image, text, return_tensors=pt)\\nout = model.generate(**inputs)\\nprint(processor.decode(out[0], skip_special_tokens=True))\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": {\"CIDEr\": \"+2.8%\"}}, \"description\": \"BLIP (Bootstrapping Language-Image Pre-training) is a new vision-language pre-training (VLP) framework that transfers flexibly to both vision-language understanding and generation tasks. It effectively utilizes noisy web data by bootstrapping the captions, where a captioner generates synthetic captions and a filter removes the noisy ones. This model is pre-trained on the COCO dataset with a base architecture (ViT base backbone).\"}}", "category": "generic"}
{"question_id": 733, "text": " I need to build a solution that generates textual descriptions for images in my database.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"google/pix2struct-base\", \"api_call\": \"Pix2StructForConditionalGeneration.from_pretrained('google/pix2struct-base')\", \"api_arguments\": {\"t5x_checkpoint_path\": \"PATH_TO_T5X_CHECKPOINTS\", \"pytorch_dump_path\": \"PATH_TO_SAVE\"}, \"python_environment_requirements\": {\"transformers\": \"4.15.0\", \"torch\": \"1.10.1\"}, \"example_code\": \"from transformers import Pix2StructForConditionalGeneration, Pix2StructProcessor\\nmodel = Pix2StructForConditionalGeneration.from_pretrained(PATH_TO_SAVE)\\nprocessor = Pix2StructProcessor.from_pretrained(PATH_TO_SAVE)\\nmodel.push_to_hub(USERNAME/MODEL_NAME)\\nprocessor.push_to_hub(USERNAME/MODEL_NAME)\", \"performance\": {\"dataset\": [{\"name\": \"Documents\", \"accuracy\": \"N/A\"}, {\"name\": \"Illustrations\", \"accuracy\": \"N/A\"}, {\"name\": \"User Interfaces\", \"accuracy\": \"N/A\"}, {\"name\": \"Natural Images\", \"accuracy\": \"N/A\"}]}, \"description\": \"Pix2Struct is an image encoder - text decoder model that is trained on image-text pairs for various tasks, including image captioning and visual question answering. The model is pretrained by learning to parse masked screenshots of web pages into simplified HTML. It can achieve state-of-the-art results in six out of nine tasks across four domains: documents, illustrations, user interfaces, and natural images.\"}}", "category": "generic"}
{"question_id": 734, "text": " We are a company managing hotel bookings. We need to answer our customer's questions regarding rental rates from our pricing document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"layoutlm-vqa\", \"api_call\": \"pipeline('question-answering', model='pardeepSF/layoutlm-vqa')\", \"api_arguments\": {\"question\": \"string\", \"context\": \"string\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A model for document question answering using the LayoutLM architecture.\"}}", "category": "generic"}
{"question_id": 735, "text": " Provide me a pipeline for extracting relevant information from an insurance policy document.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"vision-encoder-decoder\", \"api_name\": \"jinhybr/OCR-DocVQA-Donut\", \"api_call\": \"pipeline('document-question-answering', model='jinhybr/OCR-DocVQA-Donut')\", \"api_arguments\": \"image_path, question\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"doc_vqa(image_path='path/to/image.jpg', question='What is the title?')\", \"performance\": {\"dataset\": \"DocVQA\", \"accuracy\": \"Not provided\"}, \"description\": \"Donut model fine-tuned on DocVQA. It consists of a vision encoder (Swin Transformer) and a text decoder (BART). Given an image, the encoder first encodes the image into a tensor of embeddings, after which the decoder autoregressively generates text, conditioned on the encoding of the encoder.\"}}", "category": "generic"}
{"question_id": 736, "text": " Create an accurate system to estimate the distance between the camera and the objects in a photo captured by a drone flying over a terrain.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-nyu-finetuned-diode\", \"api_call\": \"pipeline('depth-estimation', model='sayakpaul/glpn-nyu-finetuned-diode')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.4359, \"Rmse\": 0.4276}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 737, "text": " We are a team of architects and civil engineers looking to estimate the depth of elements in architectural designs from 2D images of the structures. We want to implement a depth estimation model that will transform these images into depictions of depth.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Depth Estimation\", \"api_name\": \"glpn-nyu-finetuned-diode-221116-104421\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221116-104421')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers==4.24.0, pytorch==1.12.1+cu113, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3736, \"Mae\": 0.3079, \"Rmse\": 0.4321, \"Abs Rel\": 0.3666, \"Log Mae\": 0.1288, \"Log Rmse\": 0.1794, \"Delta1\": 0.4929, \"Delta2\": 0.7934, \"Delta3\": 0.9234}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.\"}}", "category": "generic"}
{"question_id": 738, "text": " I have an image on my computer named \\\"eye.jpg\\\". I want to use a model to predict whether this image indicates diabetic retinopathy.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"martinezomg/vit-base-patch16-224-diabetic-retinopathy\", \"api_call\": \"pipeline('image-classification', 'martinezomg/vit-base-patch16-224-diabetic-retinopathy')\", \"api_arguments\": {\"model_name\": \"martinezomg/vit-base-patch16-224-diabetic-retinopathy\"}, \"python_environment_requirements\": {\"transformers\": \"4.28.1\", \"pytorch\": \"2.0.0+cu118\", \"datasets\": \"2.11.0\", \"tokenizers\": \"0.13.3\"}, \"example_code\": \"from transformers import pipeline\\nimage_classifier = pipeline('image-classification', 'martinezomg/vit-base-patch16-224-diabetic-retinopathy')\\nresult = image_classifier('path/to/image.jpg')\", \"performance\": {\"dataset\": \"None\", \"accuracy\": 0.7744}, \"description\": \"This model is a fine-tuned version of google/vit-base-patch16-224 on the None dataset. It is designed for image classification tasks, specifically for diabetic retinopathy detection.\"}}", "category": "generic"}
{"question_id": 739, "text": " We need to build a model that recognizes objects in images. Build a model using the Vision Transformer (ViT) for this purpose.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/vit-base-patch16-224\", \"api_call\": \"ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-224\", \"from_tf\": \"False\", \"config\": \"None\", \"cache_dir\": \"None\", \"revision\": \"None\", \"use_auth_token\": \"False\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.0\", \"torch\": \"1.9.0\", \"PIL\": \"8.3.2\", \"requests\": \"2.26.0\"}, \"example_code\": {\"1\": \"from transformers import ViTImageProcessor, ViTForImageClassification\", \"2\": \"from PIL import Image\", \"3\": \"import requests\", \"4\": \"url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\", \"5\": \"image = Image.open(requests.get(url, stream=True).raw)\", \"6\": \"processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\", \"7\": \"model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"8\": \"inputs = processor(images=image, return_tensors='pt')\", \"9\": \"outputs = model(**inputs)\", \"10\": \"logits = outputs.logits\", \"11\": \"predicted_class_idx = logits.argmax(-1).item()\", \"12\": \"print('Predicted class:', model.config.id2label[predicted_class_idx])\"}, \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al.\"}}", "category": "generic"}
{"question_id": 740, "text": " My pet store website needs a tool to recognize different dog breeds from user uploaded images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"facebook/convnext-tiny-224\", \"api_call\": \"ConvNextForImageClassification.from_pretrained('facebook/convnext-tiny-224')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"facebook/convnext-tiny-224\"}, \"python_environment_requirements\": [\"transformers\", \"torch\", \"datasets\"], \"example_code\": \"from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification\\nimport torch\\nfrom datasets import load_dataset\\ndataset = load_dataset('huggingface/cats-image')\\nimage = dataset['test']['image'][0]\\nfeature_extractor = ConvNextFeatureExtractor.from_pretrained('facebook/convnext-tiny-224')\\nmodel = ConvNextForImageClassification.from_pretrained('facebook/convnext-tiny-224')\\ninputs = feature_extractor(image, return_tensors='pt')\\nwith torch.no_grad():\\n logits = model(**inputs).logits\\npredicted_label = logits.argmax(-1).item()\\nprint(model.config.id2label[predicted_label])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not specified\"}, \"description\": \"ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them. It is trained on ImageNet-1k at resolution 224x224 and can be used for image classification.\"}}", "category": "generic"}
{"question_id": 741, "text": " As a programmer, I want to classify different animal species based on their images. Help me determine the type of species. \\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"facebook/regnet-y-008\", \"api_call\": \"RegNetForImageClassification.from_pretrained('zuppif/regnet-y-040')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"zuppif/regnet-y-040\"}, \"python_environment_requirements\": {\"transformers\": \"AutoFeatureExtractor, RegNetForImageClassification\", \"torch\": \"torch\", \"datasets\": \"load_dataset\"}, \"example_code\": \"from transformers import AutoFeatureExtractor, RegNetForImageClassification\\nimport torch\\nfrom datasets import load_dataset\\ndataset = load_dataset(huggingface/cats-image)\\nimage = dataset[test][image][0]\\nfeature_extractor = AutoFeatureExtractor.from_pretrained(zuppif/regnet-y-040)\\nmodel = RegNetForImageClassification.from_pretrained(zuppif/regnet-y-040)\\ninputs = feature_extractor(image, return_tensors=pt)\\nwith torch.no_grad():\\n... logits = model(**inputs).logits\\npredicted_label = logits.argmax(-1).item()\\nprint(model.config.id2label[predicted_label])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"RegNet model trained on imagenet-1k. It was introduced in the paper Designing Network Design Spaces and first released in this repository.\"}}", "category": "generic"}
{"question_id": 742, "text": " We are a robotics company specializing in object detection for logistics. We need to detect objects in warehouses using an advanced object detection model.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"deformable-detr\", \"api_call\": \"DeformableDetrForObjectDetection.from_pretrained('SenseTime/deformable-detr')\", \"api_arguments\": [\"images\", \"return_tensors\"], \"python_environment_requirements\": [\"transformers\", \"torch\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import AutoImageProcessor, DeformableDetrForObjectDetection\\nimport torch\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = AutoImageProcessor.from_pretrained('SenseTime/deformable-detr')\\nmodel = DeformableDetrForObjectDetection.from_pretrained('SenseTime/deformable-detr')\\ninputs = processor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\", \"performance\": {\"dataset\": \"COCO 2017\", \"accuracy\": \"Not provided\"}, \"description\": \"Deformable DETR model with ResNet-50 backbone trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paper Deformable DETR: Deformable Transformers for End-to-End Object Detection by Zhu et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 743, "text": " An IoT device collects images from different locations. Create a model to detect objects in these images to analyze the surroundings.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"facebook/detr-resnet-101-dc5\", \"api_call\": \"DetrForObjectDetection.from_pretrained('facebook/detr-resnet-101-dc5')\", \"api_arguments\": {\"image\": \"Image.open(requests.get(url, stream=True).raw)\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import DetrFeatureExtractor, DetrForObjectDetection\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nfeature_extractor = DetrFeatureExtractor.from_pretrained('facebook/detr-resnet-101-dc5')\\nmodel = DetrForObjectDetection.from_pretrained('facebook/detr-resnet-101-dc5')\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\nbboxes = outputs.pred_boxes\", \"performance\": {\"dataset\": \"COCO 2017 validation\", \"accuracy\": \"AP 44.9\"}, \"description\": \"DETR (End-to-End Object Detection) model with ResNet-101 backbone (dilated C5 stage). The model is trained on COCO 2017 object detection dataset and achieves an average precision (AP) of 44.9 on the COCO 2017 validation set.\"}}", "category": "generic"}
{"question_id": 744, "text": " I'm building a drone surveillance system for detecting airplanes in the sky. What can I use to achieve the required object detection?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-plane-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-plane-detection')\", \"api_arguments\": {\"image\": \"URL or local path to the image\"}, \"python_environment_requirements\": [\"pip install ultralyticsplus==0.0.23 ultralytics==8.0.21\"], \"example_code\": [\"from ultralyticsplus import YOLO, render_result\", \"model = YOLO('keremberke/yolov8m-plane-detection')\", \"model.overrides['conf'] = 0.25\", \"model.overrides['iou'] = 0.45\", \"model.overrides['agnostic_nms'] = False\", \"model.overrides['max_det'] = 1000\", \"image = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model.predict(image)\", \"print(results[0].boxes)\", \"render = render_result(model=model, image=image, result=results[0])\", \"render.show()\"], \"performance\": {\"dataset\": \"plane-detection\", \"accuracy\": \"0.995\"}, \"description\": \"A YOLOv8 model for plane detection trained on the keremberke/plane-detection dataset. The model is capable of detecting planes in images with high accuracy.\"}}", "category": "generic"}
{"question_id": 745, "text": " We are building an IoT device to monitor apartment corridors for security. Please detect objects in the image and notify if anything abnormal is detected.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"fcakyon/yolov5s-v7.0\", \"api_call\": \"yolov5.load('fcakyon/yolov5s-v7.0')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic\": false, \"multi_label\": false, \"max_det\": 1000, \"img\": \"https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg\", \"size\": 640, \"augment\": true}, \"python_environment_requirements\": \"pip install -U yolov5\", \"example_code\": \"import yolov5\\nmodel = yolov5.load('fcakyon/yolov5s-v7.0')\\nmodel.conf = 0.25\\nmodel.iou = 0.45\\nmodel.agnostic = False\\nmodel.multi_label = False\\nmodel.max_det = 1000\\nimg = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model(img)\\nresults = model(img, size=640)\\nresults = model(img, augment=True)\\npredictions = results.pred[0]\\nboxes = predictions[:, :4]\\nscores = predictions[:, 4]\\ncategories = predictions[:, 5]\\nresults.show()\\nresults.save(save_dir='results/')\", \"performance\": {\"dataset\": \"detection-datasets/coco\", \"accuracy\": null}, \"description\": \"Yolov5s-v7.0 is an object detection model trained on the COCO dataset. It can detect objects in images and return their bounding boxes, scores, and categories.\"}}", "category": "generic"}
{"question_id": 746, "text": " Design an application for a smart drone that can detect and segment objects within the area it's flying.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"facebook/detr-resnet-50-panoptic\", \"api_call\": \"DetrForSegmentation.from_pretrained('facebook/detr-resnet-50-panoptic')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"torch\", \"numpy\", \"transformers\", \"PIL\", \"requests\", \"io\"], \"example_code\": [\"import io\", \"import requests\", \"from PIL import Image\", \"import torch\", \"import numpy\", \"from transformers import DetrFeatureExtractor, DetrForSegmentation\", \"from transformers.models.detr.feature_extraction_detr import rgb_to_id\", \"url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\", \"image = Image.open(requests.get(url, stream=True).raw)\", \"feature_extractor = DetrFeatureExtractor.from_pretrained('facebook/detr-resnet-50-panoptic')\", \"model = DetrForSegmentation.from_pretrained('facebook/detr-resnet-50-panoptic')\", \"inputs = feature_extractor(images=image, return_tensors='pt')\", \"outputs = model(**inputs)\", \"processed_sizes = torch.as_tensor(inputs['pixel_values'].shape[-2:]).unsqueeze(0)\", \"result = feature_extractor.post_process_panoptic(outputs, processed_sizes)[0]\", \"panoptic_seg = Image.open(io.BytesIO(result['png_string']))\", \"panoptic_seg = numpy.array(panoptic_seg, dtype=numpy.uint8)\", \"panoptic_seg_id = rgb_to_id(panoptic_seg)\"], \"performance\": {\"dataset\": \"COCO 2017 validation\", \"accuracy\": {\"box_AP\": 38.8, \"segmentation_AP\": 31.1, \"PQ\": 43.4}}, \"description\": \"DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 panoptic (118k annotated images). It was introduced in the paper End-to-End Object Detection with Transformers by Carion et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 747, "text": " I want to build a tool to recognize urban landscapes and identify different objects in the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Semantic Segmentation\", \"api_name\": \"nvidia/segformer-b5-finetuned-cityscapes-1024-1024\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-cityscapes-1024-1024')\", \"api_arguments\": {\"images\": \"image\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": \"from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nfeature_extractor = SegformerFeatureExtractor.from_pretrained(nvidia/segformer-b5-finetuned-cityscapes-1024-1024)\\nmodel = SegformerForSemanticSegmentation.from_pretrained(nvidia/segformer-b5-finetuned-cityscapes-1024-1024)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\", \"performance\": {\"dataset\": \"CityScapes\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 748, "text": " Show me how to detect defects of PCB boards from an image in real-time.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"keremberke/yolov8m-pcb-defect-segmentation\", \"api_call\": \"YOLO('keremberke/yolov8m-pcb-defect-segmentation')\", \"api_arguments\": {\"image\": \"URL or local path to the image\"}, \"python_environment_requirements\": [\"ultralyticsplus==0.0.24\", \"ultralytics==8.0.23\"], \"example_code\": [\"from ultralyticsplus import YOLO, render_result\", \"model = YOLO('keremberke/yolov8m-pcb-defect-segmentation')\", \"model.overrides['conf'] = 0.25\", \"model.overrides['iou'] = 0.45\", \"model.overrides['agnostic_nms'] = False\", \"model.overrides['max_det'] = 1000\", \"image = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model.predict(image)\", \"print(results[0].boxes)\", \"print(results[0].masks)\", \"render = render_result(model=model, image=image, result=results[0])\", \"render.show()\"], \"performance\": {\"dataset\": \"pcb-defect-segmentation\", \"accuracy\": {\"mAP@0.5(box)\": 0.568, \"mAP@0.5(mask)\": 0.557}}, \"description\": \"A YOLOv8 model for PCB defect segmentation trained on the pcb-defect-segmentation dataset. The model can detect and segment defects in PCB images, such as Dry_joint, Incorrect_installation, PCB_damage, and Short_circuit.\"}}", "category": "generic"}
{"question_id": 749, "text": " I want to assess the condition of roads in a city by analyzing drone footage. Create an image segmentation model to identify potholes in images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"keremberke/yolov8s-pothole-segmentation\", \"api_call\": \"YOLO('keremberke/yolov8s-pothole-segmentation')\", \"api_arguments\": {\"image\": \"URL or local path to the image\"}, \"python_environment_requirements\": {\"ultralyticsplus\": \"0.0.23\", \"ultralytics\": \"8.0.21\"}, \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8s-pothole-segmentation')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nprint(results[0].masks)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"pothole-segmentation\", \"accuracy\": {\"mAP@0.5(box)\": 0.928, \"mAP@0.5(mask)\": 0.928}}, \"description\": \"A YOLOv8 model for pothole segmentation. This model detects potholes in images and outputs bounding boxes and masks for the detected potholes.\"}}", "category": "generic"}
{"question_id": 750, "text": " We are building a road maintenance reporting application. We need to use images to identify and segment road potholes.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"keremberke/yolov8m-pothole-segmentation\", \"api_call\": \"YOLO('keremberke/yolov8m-pothole-segmentation')\", \"api_arguments\": {\"image\": \"URL or local image path\"}, \"python_environment_requirements\": [\"ultralyticsplus==0.0.23\", \"ultralytics==8.0.21\"], \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8m-pothole-segmentation')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nprint(results[0].masks)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"pothole-segmentation\", \"accuracy\": {\"mAP@0.5(box)\": 0.858, \"mAP@0.5(mask)\": 0.895}}, \"description\": \"A YOLOv8 model for pothole segmentation trained on keremberke/pothole-segmentation dataset. It can detect potholes in images and provide segmentation masks for the detected potholes.\"}}", "category": "generic"}
{"question_id": 751, "text": " The marketing team needs different variations of a product image to use in advertising and promotional materials.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Image Variations\", \"api_name\": \"lambdalabs/sd-image-variations-diffusers\", \"api_call\": \"StableDiffusionImageVariationPipeline.from_pretrained('lambdalabs/sd-image-variations-diffusers', revision='v2.0')\", \"api_arguments\": {\"revision\": \"v2.0\"}, \"python_environment_requirements\": \"Diffusers >=0.8.0\", \"example_code\": \"from diffusers import StableDiffusionImageVariationPipeline\\nfrom PIL import Image\\ndevice = cuda:0\\nsd_pipe = StableDiffusionImageVariationPipeline.from_pretrained(\\n lambdalabs/sd-image-variations-diffusers,\\n revision=v2.0,\\n)\\nsd_pipe = sd_pipe.to(device)\\nim = Image.open(path/to/image.jpg)\\ntform = transforms.Compose([\\n transforms.ToTensor(),\\n transforms.Resize(\\n  (224, 224),\\n  interpolation=transforms.InterpolationMode.BICUBIC,\\n  antialias=False,\\n ),\\n transforms.Normalize(\\n  [0.48145466, 0.4578275, 0.40821073],\\n  [0.26862954, 0.26130258, 0.27577711]),\\n])\\ninp = tform(im).to(device).unsqueeze(0)\\nout = sd_pipe(inp, guidance_scale=3)\\nout[images][0].save(result.jpg)\", \"performance\": {\"dataset\": \"ChristophSchuhmann/improved_aesthetics_6plus\", \"accuracy\": \"N/A\"}, \"description\": \"This version of Stable Diffusion has been fine tuned from CompVis/stable-diffusion-v1-4-original to accept CLIP image embedding rather than text embeddings. This allows the creation of image variations similar to DALLE-2 using Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 752, "text": " A movie studio needs to estimate the human pose of an actor from an image for an upcoming film project.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Human Pose Estimation\", \"api_name\": \"lllyasviel/sd-controlnet-openpose\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-openpose')\", \"api_arguments\": {\"text\": \"chef in the kitchen\", \"image\": \"image\", \"num_inference_steps\": 20}, \"python_environment_requirements\": {\"diffusers\": \"pip install diffusers\", \"transformers\": \"pip install transformers\", \"accelerate\": \"pip install accelerate\", \"controlnet_aux\": \"pip install controlnet_aux\"}, \"example_code\": \"from PIL import Image\\nfrom diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\\nimport torch\\nfrom controlnet_aux import OpenposeDetector\\nfrom diffusers.utils import load_image\\nopenpose = OpenposeDetector.from_pretrained('lllyasviel/ControlNet')\\nimage = load_image(https://huggingface.co/lllyasviel/sd-controlnet-openpose/resolve/main/images/pose.png)\\nimage = openpose(image)\\ncontrolnet = ControlNetModel.from_pretrained(\\n lllyasviel/sd-controlnet-openpose, torch_dtype=torch.float16\\n)\\npipe = StableDiffusionControlNetPipeline.from_pretrained(\\n runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16\\n)\\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\\npipe.enable_xformers_memory_efficient_attention()\\npipe.enable_model_cpu_offload()\\nimage = pipe(chef in the kitchen, image, num_inference_steps=20).images[0]\\nimage.save('images/chef_pose_out.png')\", \"performance\": {\"dataset\": \"200k pose-image, caption pairs\", \"accuracy\": \"Not specified\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Human Pose Estimation. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 753, "text": " Create a program to determine the depth map from an input image of a street filled with people.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Depth Estimation\", \"api_name\": \"lllyasviel/sd-controlnet-depth\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-depth')\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"PIL\", \"numpy\", \"torch\"], \"example_code\": {\"install_packages\": \"pip install diffusers transformers accelerate\", \"code\": [\"from transformers import pipeline\", \"from diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\", \"from PIL import Image\", \"import numpy as np\", \"import torch\", \"from diffusers.utils import load_image\", \"depth_estimator = pipeline('depth-estimation')\", \"image = load_image(https://huggingface.co/lllyasviel/sd-controlnet-depth/resolve/main/images/stormtrooper.png)\", \"image = depth_estimator(image)['depth']\", \"image = np.array(image)\", \"image = image[:, :, None]\", \"image = np.concatenate([image, image, image], axis=2)\", \"image = Image.fromarray(image)\", \"controlnet = ControlNetModel.from_pretrained(lllyasviel/sd-controlnet-depth, torch_dtype=torch.float16)\", \"pipe = StableDiffusionControlNetPipeline.from_pretrained(runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)\", \"pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\", \"pipe.enable_xformers_memory_efficient_attention()\", \"pipe.enable_model_cpu_offload()\", \"image = pipe(Stormtrooper's lecture, image, num_inference_steps=20).images[0]\", \"image.save('./images/stormtrooper_depth_out.png')\"]}, \"performance\": {\"dataset\": \"3M depth-image, caption pairs\", \"accuracy\": \"500 GPU-hours with Nvidia A100 80G using Stable Diffusion 1.5 as a base model\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Depth estimation. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 754, "text": " I need to create a new piece of art to add to my digital gallery that resembles WikiArt images.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"johnowhitaker/sd-class-wikiart-from-bedrooms\", \"api_call\": \"DDPMPipeline.from_pretrained('johnowhitaker/sd-class-wikiart-from-bedrooms')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('johnowhitaker/sd-class-wikiart-from-bedrooms')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"https://huggingface.co/datasets/huggan/wikiart\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a diffusion model initialized from https://huggingface.co/google/ddpm-bedroom-256 and trained for 5000 steps on https://huggingface.co/datasets/huggan/wikiart.\"}}", "category": "generic"}
{"question_id": 755, "text": " Our team is designing a butterfly-themed stationery set for children. We need to generate images of cute butterflies to use in the design.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"sd-class-butterflies-32\", \"api_call\": \"DDPMPipeline.from_pretrained('clp/sd-class-butterflies-32')\", \"api_arguments\": {\"model_id\": \"clp/sd-class-butterflies-32\"}, \"python_environment_requirements\": [\"diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('clp/sd-class-butterflies-32')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"This model is a diffusion model for unconditional image generation of cute butterflies.\"}}", "category": "generic"}
{"question_id": 756, "text": " Design a mobile application that suggests pictures of butterflies whenever the user attempts to change their theme.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Unconditional Image Generation\", \"api_name\": \"ocariz/butterfly_200\", \"api_call\": \"DDPMPipeline.from_pretrained('ocariz/butterfly_200')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('ocariz/butterfly_200')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"This model is a diffusion model for unconditional image generation of cute butterflies trained for 200 epochs.\"}}", "category": "generic"}
{"question_id": 757, "text": " We need to generate some vintage images for a promotion poster.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Diffusers\", \"api_name\": \"pravsels/ddpm-ffhq-vintage-finetuned-vintage-3epochs\", \"api_call\": \"DDPMPipeline.from_pretrained('pravsels/ddpm-ffhq-vintage-finetuned-vintage-3epochs')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"diffusers\", \"example_code\": \"from diffusers import DDPMPipeline\\npipeline = DDPMPipeline.from_pretrained('pravsels/ddpm-ffhq-vintage-finetuned-vintage-3epochs')\\nimage = pipeline().images[0]\\nimage\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"Example Fine-Tuned Model for Unit 2 of the Diffusion Models Class\"}}", "category": "generic"}
{"question_id": 758, "text": " Generate images of cute butterflies using myunus1/diffmodels_galaxies_scratchbook model.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Diffusers\", \"api_name\": \"myunus1/diffmodels_galaxies_scratchbook\", \"api_call\": \"DDPMPipeline.from_pretrained('myunus1/diffmodels_galaxies_scratchbook')\", \"api_arguments\": {\"from_pretrained\": \"myunus1/diffmodels_galaxies_scratchbook\"}, \"python_environment_requirements\": {\"package\": \"diffusers\", \"import\": \"from diffusers import DDPMPipeline\"}, \"example_code\": {\"initialize_pipeline\": \"pipeline = DDPMPipeline.from_pretrained('myunus1/diffmodels_galaxies_scratchbook')\", \"generate_image\": \"image = pipeline().images[0]\", \"display_image\": \"image\"}, \"performance\": {\"dataset\": \"Not provided\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a diffusion model for unconditional image generation of cute \\ud83e\\udd8b.\"}}", "category": "generic"}
{"question_id": 759, "text": " As part of the online platform's development, we need an AI that, given input text about a video, estimates the content of the video and judges its category.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/xclip-base-patch32\", \"api_call\": \"XClipModel.from_pretrained('microsoft/xclip-base-patch32')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"For code examples, we refer to the documentation.\", \"performance\": {\"dataset\": \"Kinetics 400\", \"accuracy\": {\"top-1\": 80.4, \"top-5\": 95.0}}, \"description\": \"X-CLIP is a minimal extension of CLIP for general video-language understanding. The model is trained in a contrastive way on (video, text) pairs. This allows the model to be used for tasks like zero-shot, few-shot or fully supervised video classification and video-text retrieval.\"}}", "category": "generic"}
{"question_id": 760, "text": " We need to develop a model to classify sports clips by identifying the type of sports being played in the video.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"facebook/timesformer-base-finetuned-k400\", \"api_call\": \"TimesformerForVideoClassification.from_pretrained('facebook/timesformer-base-finetuned-k400')\", \"api_arguments\": \"video, return_tensors\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import AutoImageProcessor, TimesformerForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(8, 3, 224, 224))\\nprocessor = AutoImageProcessor.from_pretrained(facebook/timesformer-base-finetuned-k400)\\nmodel = TimesformerForVideoClassification.from_pretrained(facebook/timesformer-base-finetuned-k400)\\ninputs = processor(video, return_tensors=pt)\\nwith torch.no_grad():\\n  outputs = model(**inputs)\\n  logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": \"Not provided\"}, \"description\": \"TimeSformer is a video classification model pre-trained on Kinetics-400. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository. The model can be used for video classification into one of the 400 possible Kinetics-400 labels.\"}}", "category": "generic"}
{"question_id": 761, "text": " We are designing an application for professional athletes. They need a tool to categorize their exercises based on videos.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"facebook/timesformer-base-finetuned-k600\", \"api_call\": \"TimesformerForVideoClassification.from_pretrained('facebook/timesformer-base-finetuned-k600')\", \"api_arguments\": [\"images\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoImageProcessor, TimesformerForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(8, 3, 224, 224))\\nprocessor = AutoImageProcessor.from_pretrained(facebook/timesformer-base-finetuned-k600)\\nmodel = TimesformerForVideoClassification.from_pretrained(facebook/timesformer-base-finetuned-k600)\\ninputs = processor(images=video, return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Kinetics-600\", \"accuracy\": null}, \"description\": \"TimeSformer model pre-trained on Kinetics-600. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 762, "text": " We are building a video analysis tool that can automatically detect the main action happening in a given video clip.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Action Recognition\", \"api_name\": \"videomae-base-finetuned-ucf101\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('nateraw/videomae-base-finetuned-ucf101')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"nateraw/videomae-base-finetuned-ucf101\"}, \"python_environment_requirements\": [\"transformers\", \"decord\", \"huggingface_hub\"], \"example_code\": \"from decord import VideoReader, cpu\\nimport torch\\nimport numpy as np\\nfrom transformers import VideoMAEFeatureExtractor, VideoMAEForVideoClassification\\nfrom huggingface_hub import hf_hub_download\\nnp.random.seed(0)\\ndef sample_frame_indices(clip_len, frame_sample_rate, seg_len):\\n converted_len = int(clip_len * frame_sample_rate)\\n end_idx = np.random.randint(converted_len, seg_len)\\n start_idx = end_idx - converted_len\\n indices = np.linspace(start_idx, end_idx, num=clip_len)\\n indices = np.clip(indices, start_idx, end_idx - 1).astype(np.int64)\\n return indices\\nfile_path = hf_hub_download(\\n repo_id=nateraw/dino-clips, filename=archery.mp4, repo_type=space\\n)\\nvideoreader = VideoReader(file_path, num_threads=1, ctx=cpu(0))\\nvideoreader.seek(0)\\nindices = sample_frame_indices(clip_len=16, frame_sample_rate=4, seg_len=len(videoreader))\\nvideo = videoreader.get_batch(indices).asnumpy()\\nfeature_extractor = VideoMAEFeatureExtractor.from_pretrained(nateraw/videomae-base-finetuned-ucf101)\\nmodel = VideoMAEForVideoClassification.from_pretrained(nateraw/videomae-base-finetuned-ucf101)\\ninputs = feature_extractor(list(video), return_tensors=pt)\\nwith torch.no_grad():\\n outputs = model(**inputs)\\n logits = outputs.logits\\npredicted_label = logits.argmax(-1).item()\\nprint(model.config.id2label[predicted_label])\", \"performance\": {\"dataset\": \"UCF101\", \"accuracy\": 0.758209764957428}, \"description\": \"VideoMAE Base model fine tuned on UCF101 for Video Action Recognition\"}}", "category": "generic"}
{"question_id": 763, "text": " I would like to create an application that identifies animals in Chinese language image captions. Specifically, we want to know if a picture includes a cat or a dog.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"OFA-Sys/chinese-clip-vit-base-patch16\", \"api_call\": \"ChineseCLIPModel.from_pretrained('OFA-Sys/chinese-clip-vit-base-patch16')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"OFA-Sys/chinese-clip-vit-base-patch16\"}, \"python_environment_requirements\": {\"transformers\": \"ChineseCLIPProcessor, ChineseCLIPModel\"}, \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import ChineseCLIPProcessor, ChineseCLIPModel\\nmodel = ChineseCLIPModel.from_pretrained(OFA-Sys/chinese-clip-vit-base-patch16)\\nprocessor = ChineseCLIPProcessor.from_pretrained(OFA-Sys/chinese-clip-vit-base-patch16)\\nurl = https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/pokemon.jpeg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [, , , ]\\ninputs = processor(images=image, return_tensors=pt)\\nimage_features = model.get_image_features(**inputs)\\nimage_features = image_features / image_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, padding=True, return_tensors=pt)\\ntext_features = model.get_text_features(**inputs)\\ntext_features = text_features / text_features.norm(p=2, dim=-1, keepdim=True)\\ninputs = processor(text=texts, images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\", \"performance\": {\"dataset\": {\"MUGE Text-to-Image Retrieval\": {\"accuracy\": {\"Zero-shot R@1\": 63.0, \"Zero-shot R@5\": 84.1, \"Zero-shot R@10\": 89.2, \"Finetune R@1\": 68.9, \"Finetune R@5\": 88.7, \"Finetune R@10\": 93.1}}, \"Flickr30K-CN Retrieval\": {\"accuracy\": {\"Zero-shot Text-to-Image R@1\": 71.2, \"Zero-shot Text-to-Image R@5\": 91.4, \"Zero-shot Text-to-Image R@10\": 95.5, \"Finetune Text-to-Image R@1\": 83.8, \"Finetune Text-to-Image R@5\": 96.9, \"Finetune Text-to-Image R@10\": 98.6, \"Zero-shot Image-to-Text R@1\": 81.6, \"Zero-shot Image-to-Text R@5\": 97.5, \"Zero-shot Image-to-Text R@10\": 98.8, \"Finetune Image-to-Text R@1\": 95.3, \"Finetune Image-to-Text R@5\": 99.7, \"Finetune Image-to-Text R@10\": 100.0}}, \"COCO-CN Retrieval\": {\"accuracy\": {\"Zero-shot Text-to-Image R@1\": 69.2, \"Zero-shot Text-to-Image R@5\": 89.9, \"Zero-shot Text-to-Image R@10\": 96.1, \"Finetune Text-to-Image R@1\": 81.5, \"Finetune Text-to-Image R@5\": 96.9, \"Finetune Text-to-Image R@10\": 99.1, \"Zero-shot Image-to-Text R@1\": 63.0, \"Zero-shot Image-to-Text R@5\": 86.6, \"Zero-shot Image-to-Text R@10\": 92.9, \"Finetune Image-to-Text R@1\": 83.5, \"Finetune Image-to-Text R@5\": 97.3, \"Finetune Image-to-Text R@10\": 99.2}}, \"Zero-shot Image Classification\": {\"accuracy\": {\"CIFAR10\": 96.0, \"CIFAR100\": 79.7, \"DTD\": 51.2, \"EuroSAT\": 52.0, \"FER\": 55.1, \"FGVC\": 26.2, \"KITTI\": 49.9, \"MNIST\": 79.4, \"PC\": 63.5, \"VOC\": 84.9}}}}, \"description\": \"Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It uses ViT-B/16 as the image encoder and RoBERTa-wwm-base as the text encoder.\"}}", "category": "generic"}
{"question_id": 764, "text": " I need a portable system to perform quick sentiment analysis of customer reviews.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"cardiffnlp/twitter-xlm-roberta-base-sentiment\", \"api_call\": \"pipeline(sentiment-analysis, model='cardiffnlp/twitter-xlm-roberta-base-sentiment')\", \"api_arguments\": [\"model_path\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nmodel_path = cardiffnlp/twitter-xlm-roberta-base-sentiment\\nsentiment_task = pipeline(sentiment-analysis, model=model_path, tokenizer=model_path)\\nsentiment_task(T'estimo!)\", \"performance\": {\"dataset\": \"Twitter\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a multilingual XLM-roBERTa-base model trained on ~198M tweets and finetuned for sentiment analysis. The sentiment fine-tuning was done on 8 languages (Ar, En, Fr, De, Hi, It, Sp, Pt) but it can be used for more languages (see paper for details).\"}}", "category": "generic"}
{"question_id": 765, "text": " A language model has identified a recent book review and provided a summary of its content. Perform sentiment analysis on the summary to evaluate the reviewer's feelings.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentiment Analysis\", \"api_name\": \"bert-base-multilingual-uncased-sentiment\", \"api_call\": \"pipeline('sentiment-analysis', model='nlptown/bert-base-multilingual-uncased-sentiment')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"result = sentiment_pipeline('I love this product!')\", \"performance\": {\"dataset\": [{\"language\": \"English\", \"accuracy\": {\"exact\": \"67%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Dutch\", \"accuracy\": {\"exact\": \"57%\", \"off-by-1\": \"93%\"}}, {\"language\": \"German\", \"accuracy\": {\"exact\": \"61%\", \"off-by-1\": \"94%\"}}, {\"language\": \"French\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"94%\"}}, {\"language\": \"Italian\", \"accuracy\": {\"exact\": \"59%\", \"off-by-1\": \"95%\"}}, {\"language\": \"Spanish\", \"accuracy\": {\"exact\": \"58%\", \"off-by-1\": \"95%\"}}]}, \"description\": \"This a bert-base-multilingual-uncased model finetuned for sentiment analysis on product reviews in six languages: English, Dutch, German, French, Spanish and Italian. It predicts the sentiment of the review as a number of stars (between 1 and 5).\"}}", "category": "generic"}
{"question_id": 766, "text": " We have movie reviews on our website, and we need to display whether the review is positive or negative.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"lvwerra/distilbert-imdb\", \"api_call\": \"pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\", \"pytorch\"], \"example_code\": \"classifier('I love this movie!')\", \"performance\": {\"dataset\": \"imdb\", \"accuracy\": 0.928}, \"description\": \"This model is a fine-tuned version of distilbert-base-uncased on the imdb dataset. It is used for sentiment analysis on movie reviews and achieves an accuracy of 0.928 on the evaluation set.\"}}", "category": "generic"}
{"question_id": 767, "text": " I wish to automatically classify a given text's emotion. What Transformers model should I use?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"joeddav/distilbert-base-uncased-go-emotions-student\", \"api_call\": \"pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')\", \"api_arguments\": \"text\", \"python_environment_requirements\": [\"transformers\", \"torch\", \"tensorflow\"], \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('text-classification', model='joeddav/distilbert-base-uncased-go-emotions-student')\\nresult = nlp('I am so happy today!')\", \"performance\": {\"dataset\": \"go_emotions\"}, \"description\": \"This model is distilled from the zero-shot classification pipeline on the unlabeled GoEmotions dataset. It is primarily intended as a demo of how an expensive NLI-based zero-shot model can be distilled to a more efficient student, allowing a classifier to be trained with only unlabeled data.\"}}", "category": "generic"}
{"question_id": 768, "text": " Develop a tool to analyze restaurant reviews from Yelp for positive or negative sentiments.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"results-yelp\", \"api_call\": \"AutoTokenizer.from_pretrained('bert-base-uncased')\", \"api_arguments\": {\"tokenizer\": \"AutoTokenizer.from_pretrained('bert-base-uncased')\", \"config\": \"AutoConfig.from_pretrained('potatobunny/results-yelp')\"}, \"python_environment_requirements\": {\"Transformers\": \"4.18.0\", \"Pytorch\": \"1.10.0+cu111\", \"Datasets\": \"2.0.0\", \"Tokenizers\": \"0.12.1\"}, \"example_code\": \"\", \"performance\": {\"dataset\": \"Yelp\", \"accuracy\": 0.9302}, \"description\": \"This model is a fine-tuned version of textattack/bert-base-uncased-yelp-polarity on a filtered and manually reviewed Yelp dataset containing restaurant reviews only. It is intended to perform text classification, specifically sentiment analysis, on text data obtained from restaurant reviews to determine if the particular review is positive or negative.\"}}", "category": "generic"}
{"question_id": 769, "text": " We're creating a chatbot that will detect the user's emotion. I want to start by implementing the basic functionality of emotion detection from the user's responses.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"michellejieli/emotion_text_classifier\", \"api_call\": \"pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"classifier(I love this!)\", \"performance\": {\"dataset\": [\"Crowdflower (2016)\", \"Emotion Dataset, Elvis et al. (2018)\", \"GoEmotions, Demszky et al. (2020)\", \"ISEAR, Vikash (2018)\", \"MELD, Poria et al. (2019)\", \"SemEval-2018, EI-reg, Mohammad et al. (2018)\", \"Emotion Lines (Friends)\"], \"accuracy\": \"Not provided\"}, \"description\": \"DistilRoBERTa-base is a transformer model that performs sentiment analysis. I fine-tuned the model on transcripts from the Friends show with the goal of classifying emotions from text data, specifically dialogue from Netflix shows or movies. The model predicts 6 Ekman emotions and a neutral class. These emotions include anger, disgust, fear, joy, neutrality, sadness, and surprise.\"}}", "category": "generic"}
{"question_id": 770, "text": " I am a journalist. I am writing an article about European start-ups. I need to see all the dates and company names in the text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"Jean-Baptiste/camembert-ner\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('Jean-Baptiste/camembert-ner')\", \"api_arguments\": {\"model\": \"model\", \"tokenizer\": \"tokenizer\", \"aggregation_strategy\": \"simple\"}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModelForTokenClassification, pipeline\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\ntokenizer = AutoTokenizer.from_pretrained(Jean-Baptiste/camembert-ner)\\nmodel = AutoModelForTokenClassification.from_pretrained(Jean-Baptiste/camembert-ner)\\nfrom transformers import pipeline\\nnlp = pipeline('ner', model=model, tokenizer=tokenizer, aggregation_strategy=simple)\\nnlp(Apple est cre le 1er avril 1976 dans le garage de la maison d'enfance de Steve Jobs  Los Altos en Californie par Steve Jobs, Steve Wozniak et Ronald Wayne14, puis constitue sous forme de socit le 3 janvier 1977  l'origine sous le nom d'Apple Computer, mais pour ses 30 ans et pour reflter la diversification de ses produits, le mot \\u00ab computer  est retir le 9 janvier 2015.)\", \"performance\": {\"dataset\": \"wikiner-fr\", \"accuracy\": {\"overall_f1\": 0.8914, \"PER_f1\": 0.9483, \"ORG_f1\": 0.8181, \"LOC_f1\": 0.8955, \"MISC_f1\": 0.8146}}, \"description\": \"camembert-ner is a Named Entity Recognition (NER) model fine-tuned from camemBERT on the wikiner-fr dataset. It can recognize entities such as persons, organizations, locations, and miscellaneous entities.\"}}", "category": "generic"}
{"question_id": 771, "text": " Create a tool to extract entities from news articles to help journalists research important figures and organizations.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"flair/ner-english-ontonotes\", \"api_call\": \"SequenceTagger.load('flair/ner-english-ontonotes')\", \"api_arguments\": [\"sentence\"], \"python_environment_requirements\": [\"flair\"], \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\ntagger = SequenceTagger.load(flair/ner-english-ontonotes)\\nsentence = Sentence(On September 1st George Washington won 1 dollar.)\\ntagger.predict(sentence)\\nprint(sentence)\\nfor entity in sentence.get_spans('ner'):\\n    print(entity)\", \"performance\": {\"dataset\": \"Ontonotes\", \"accuracy\": \"89.27\"}, \"description\": \"This is the 18-class NER model for English that ships with Flair. It predicts 18 tags such as cardinal value, date value, event name, building name, geo-political entity, language name, law name, location name, money name, affiliation, ordinal value, organization name, percent value, person name, product name, quantity value, time value, and name of work of art. Based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 772, "text": " A famous writer is working on a novel. He needs your help to predict the punctuation marks needed in his written draft.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"kredor/punctuate-all\", \"api_call\": \"pipeline('token-classification', model='kredor/punctuate-all')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"multilingual\", \"accuracy\": 0.98}, \"description\": \"A finetuned xlm-roberta-base model for punctuation prediction on twelve languages: English, German, French, Spanish, Bulgarian, Italian, Polish, Dutch, Czech, Portugese, Slovak, Slovenian.\"}}", "category": "generic"}
{"question_id": 773, "text": " There's a collection of texts that we want to be able to analyze for their part-of-speech tags to better understand the structure of the sentences within the texts.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Part-of-Speech Tagging\", \"api_name\": \"flair/pos-english\", \"api_call\": \"SequenceTagger.load('flair/pos-english')\", \"api_arguments\": \"sentence\", \"python_environment_requirements\": \"flair (pip install flair)\", \"example_code\": \"from flair.data import Sentence\\nfrom flair.models import SequenceTagger\\ntagger = SequenceTagger.load(flair/pos-english)\\nsentence = Sentence(I love Berlin.)\\ntagger.predict(sentence)\\nprint(sentence)\\nfor entity in sentence.get_spans('pos'):\\n print(entity)\", \"performance\": {\"dataset\": \"Ontonotes\", \"accuracy\": \"98.19\"}, \"description\": \"This is the standard part-of-speech tagging model for English that ships with Flair. It predicts fine-grained POS tags based on Flair embeddings and LSTM-CRF.\"}}", "category": "generic"}
{"question_id": 774, "text": " I am working on a project where I want to make predictions from my data that is stored in structured tables. Find a pre-trained model for table question answering.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-base-finetuned-wikisql-supervised\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-base-finetuned-wikisql-supervised')\", \"api_arguments\": [\"question\", \"table\"], \"python_environment_requirements\": [\"PyTorch\", \"TensorFlow\"], \"example_code\": \"This model can be loaded on the Inference API on-demand.\", \"performance\": {\"dataset\": \"wikisql\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS is a BERT-like transformers model pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion. It was pretrained with two objectives: Masked language modeling (MLM) and Intermediate pre-training. Fine-tuning is done by adding a cell selection head and aggregation head on top of the pre-trained model, and then jointly train these randomly initialized classification heads with the base model on SQA and WikiSQL.\"}}", "category": "generic"}
{"question_id": 775, "text": " I have a table in CSV format and a query related to it. Could you obtain an answer for my query?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Table-based QA\", \"api_name\": \"neulab/omnitab-large-1024shot\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('neulab/omnitab-large-1024shot')\", \"api_arguments\": {\"table\": \"pd.DataFrame.from_dict(data)\", \"query\": \"str\"}, \"python_environment_requirements\": [\"transformers\", \"pandas\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nimport pandas as pd\\ntokenizer = AutoTokenizer.from_pretrained(neulab/omnitab-large-1024shot)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(neulab/omnitab-large-1024shot)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = In which year did beijing host the Olympic Games?\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": \"Not provided\"}, \"description\": \"OmniTab is a table-based QA model proposed in OmniTab: Pretraining with Natural and Synthetic Data for Few-shot Table-based Question Answering. neulab/omnitab-large-1024shot (based on BART architecture) is initialized with microsoft/tapex-large and continuously pretrained on natural and synthetic data (SQL2NL model trained in the 1024-shot setting).\"}}", "category": "generic"}
{"question_id": 776, "text": " Develop a tool that helps me get answers to questions related to a specific text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-large-squad2\", \"api_call\": \"pipeline('question-answering', model='deepset/roberta-large-squad2')\", \"api_arguments\": [\"question\", \"context\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline; nlp = pipeline('question-answering', model='deepset/roberta-large-squad2'); nlp({'question': 'What is the capital of Germany?', 'context': 'Berlin is the capital of Germany.'})\", \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": \"Not provided\"}, \"description\": \"A pre-trained RoBERTa model for question answering tasks, specifically trained on the SQuAD v2 dataset. It can be used to answer questions based on a given context.\"}}", "category": "generic"}
{"question_id": 777, "text": " A healthcare professional wants to get quick answers to COVID-19 related questions from the latest research articles.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/roberta-base-squad2-covid\", \"api_call\": \"pipeline('question-answering', model=RobertaForQuestionAnswering.from_pretrained('deepset/roberta-base-squad2-covid'), tokenizer=RobertaTokenizer.from_pretrained('deepset/roberta-base-squad2-covid'))\", \"api_arguments\": {\"model_name\": \"deepset/roberta-base-squad2-covid\", \"tokenizer\": \"deepset/roberta-base-squad2-covid\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": {\"QA_input\": {\"question\": \"Why is model conversion important?\", \"context\": \"The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.\"}, \"res\": \"nlp(QA_input)\"}, \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"XVAL_EM\": 0.17890995260663506, \"XVAL_f1\": 0.49925444207319924, \"XVAL_top_3_recall\": 0.8021327014218009}}, \"description\": \"This model is a Roberta-based model fine-tuned on SQuAD-style CORD-19 annotations for the task of extractive question answering in the context of COVID-19. It can be used with the Hugging Face Transformers library for question answering tasks.\"}}", "category": "generic"}
{"question_id": 778, "text": " I have this app for sharing cooking recipes. Users upload photos and ask questions about the showcased recipe. I need to automatically answer their questions based on the recipe image provided.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"uclanlp/visualbert-vqa\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('uclanlp/visualbert-vqa')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A VisualBERT model for Visual Question Answering.\"}}", "category": "generic"}
{"question_id": 779, "text": " The company's legal team is working on a case. They need a highly accurate tool to extract answers from a large set of legal documents. Develop a tool for this purpose.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"deepset/deberta-v3-large-squad2\", \"api_call\": \"AutoModelForQuestionAnswering.from_pretrained('deepset/deberta-v3-large-squad2')\", \"api_arguments\": {\"model_name_or_path\": \"deepset/deberta-v3-large-squad2\", \"tokenizer\": \"deepset/deberta-v3-large-squad2\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": {\"a\": {\"code\": \"nlp = pipeline('question-answering', model=model_name, tokenizer=model_name)\\nQA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\"}, \"b\": {\"code\": \"model = AutoModelForQuestionAnswering.from_pretrained(model_name)\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\"}}, \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"exact\": 87.6105449338836, \"f1\": 90.75307008866517}}, \"description\": \"This is the deberta-v3-large model, fine-tuned using the SQuAD2.0 dataset. It's been trained on question-answer pairs, including unanswerable questions, for the task of Question Answering.\"}}", "category": "generic"}
{"question_id": 780, "text": " We have received a customer inquiry. Help us categorize the inquiry into one of the following categories: \\\"sales\\\", \\\"technical support\\\", or \\\"billing\\\".\\n###Input: \\\"I am experiencing difficulty with the installation process of your software.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"joeddav/xlm-roberta-large-xnli\", \"api_call\": \"XLMRobertaForSequenceClassification.from_pretrained('joeddav/xlm-roberta-large-xnli')\", \"api_arguments\": [\"sequence\", \"candidate_labels\", \"hypothesis_template\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"sequence_to_classify = '\\u00bfA qui\\u00e9n vas a votar en 2020?'\\ncandidate_labels = ['Europa', 'salud p\\u00fablica', 'pol\\u00edtica']\\nhypothesis_template = 'Este ejemplo es {}.'\\nclassifier(sequence_to_classify, candidate_labels, hypothesis_template=hypothesis_template)\", \"performance\": {\"dataset\": {\"xnli\": \"56.6k\", \"multi_nli\": \"8.73k\"}, \"accuracy\": \"Not specified\"}, \"description\": \"This model takes xlm-roberta-large and fine-tunes it on a combination of NLI data in 15 languages. It is intended to be used for zero-shot text classification, such as with the Hugging Face ZeroShotClassificationPipeline.\"}}", "category": "generic"}
{"question_id": 781, "text": " Imagine you have a news aggregator platform, and you want it to separate news articles into categories like Politics, Sports, Technology, Business, and Entertainment. Implement the classification using this API.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"typeform/squeezebert-mnli\", \"api_call\": \"AutoModel.from_pretrained('typeform/squeezebert-mnli')\", \"api_arguments\": \"text, candidate_labels, multi_label\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('zero-shot-classification', model='typeform/squeezebert-mnli')\\nresult = nlp('The quick brown fox jumps over the lazy dog', candidate_labels=['sports', 'language', 'animals'])\", \"performance\": {\"dataset\": \"mulit_nli\", \"accuracy\": \"not provided\"}, \"description\": \"SqueezeBERT is a transformer model designed for efficient inference on edge devices. This specific model, typeform/squeezebert-mnli, is fine-tuned on the MultiNLI dataset for zero-shot classification tasks.\"}}", "category": "generic"}
{"question_id": 782, "text": " I need to classify German news articles into categories like crime, tragedy, and theft. The classifier should be able to understand German as well.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"AutoModelForSequenceClassification.from_pretrained('Sahajtomar/German_Zeroshot')\", \"api_call\": \"classifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"api_arguments\": {\"sequence\": \"string\", \"candidate_labels\": \"list of strings\", \"hypothesis_template\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model=Sahajtomar/German_Zeroshot)\\nsequence = Letzte Woche gab es einen Selbstmord in einer nahe gelegenen kolonie\\ncandidate_labels = [Verbrechen,Trag\\u00f6die,Stehlen]\\nhypothesis_template = In deisem geht es um {}. ## Since monolingual model,its sensitive to hypothesis template. This can be experimented\\nclassifier(sequence, candidate_labels, hypothesis_template=hypothesis_template)\", \"performance\": {\"dataset\": {\"XNLI DEV (german)\": {\"accuracy\": 85.5}, \"XNLI TEST (german)\": {\"accuracy\": 83.6}}}, \"description\": \"This model has GBERT Large as base model and fine-tuned it on xnli de dataset. The default hypothesis template is in English: This text is {}. While using this model, change it to In deisem geht es um {}. or something different. While inferencing through huggingface api may give poor results as it uses by default english template. Since model is monolingual and not multilingual, hypothesis template needs to be changed accordingly.\"}}", "category": "generic"}
{"question_id": 783, "text": " The company has just received a document written in French, and they need it translated into English.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-fr-en\", \"api_call\": \"pipeline('translation_fr_to_en', model='Helsinki-NLP/opus-mt-fr-en')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"translation_pipeline('Bonjour, comment \\u00e7a va?')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newsdiscussdev2015-enfr.fr.en\": 33.1, \"newsdiscusstest2015-enfr.fr.en\": 38.7, \"newssyscomb2009.fr.en\": 30.3, \"news-test2008.fr.en\": 26.2, \"newstest2009.fr.en\": 30.2, \"newstest2010.fr.en\": 32.2, \"newstest2011.fr.en\": 33.0, \"newstest2012.fr.en\": 32.8, \"newstest2013.fr.en\": 33.9, \"newstest2014-fren.fr.en\": 37.8, \"Tatoeba.fr.en\": 57.5}}}, \"description\": \"Helsinki-NLP/opus-mt-fr-en is a machine translation model trained to translate from French to English. It is based on the Marian NMT framework and trained on the OPUS dataset.\"}}", "category": "generic"}
{"question_id": 784, "text": " A business collaboration project requires staff to translate Russian documents into English.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-ru-en\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('Helsinki-NLP/opus-mt-ru-en')\", \"api_arguments\": {\"from_pretrained\": \"Helsinki-NLP/opus-mt-ru-en\"}, \"python_environment_requirements\": {\"transformers\": \"AutoTokenizer, AutoModelForSeq2SeqLM\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(Helsinki-NLP/opus-mt-ru-en)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(Helsinki-NLP/opus-mt-ru-en)\", \"performance\": {\"dataset\": \"newstest2019-ruen.ru.en\", \"accuracy\": 31.4}, \"description\": \"A Russian to English translation model developed by the Language Technology Research Group at the University of Helsinki. It is based on the Transformer-align architecture and trained on the OPUS dataset. The model can be used for translation and text-to-text generation tasks.\"}}", "category": "generic"}
{"question_id": 785, "text": " In this fast world, a user spends very little time on reading news articles and requires summary of the news articles.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Summarization\", \"api_name\": \"facebook/bart-large-cnn\", \"api_call\": \"pipeline('summarization', model='facebook/bart-large-cnn')\", \"api_arguments\": [\"ARTICLE\", \"max_length\", \"min_length\", \"do_sample\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline(summarization, model=facebook/bart-large-cnn)\\nARTICLE = ...\\nprint(summarizer(ARTICLE, max_length=130, min_length=30, do_sample=False))\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": {\"ROUGE-1\": 42.949, \"ROUGE-2\": 20.815, \"ROUGE-L\": 30.619, \"ROUGE-LSUM\": 40.038}}, \"description\": \"BART (large-sized model), fine-tuned on CNN Daily Mail. BART is a transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder. BART is pre-trained by (1) corrupting text with an arbitrary noising function, and (2) learning a model to reconstruct the original text. BART is particularly effective when fine-tuned for text generation (e.g. summarization, translation) but also works well for comprehension tasks (e.g. text classification, question answering). This particular checkpoint has been fine-tuned on CNN Daily Mail, a large collection of text-summary pairs.\"}}", "category": "generic"}
{"question_id": 786, "text": " We need to summarize a scientific article. The input must include all the important points discussed in the article, and the result should be a concise abstraction of the content.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"google/pegasus-large\", \"api_call\": \"pipeline('summarization', model='google/pegasus-large')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline('summarization', model='google/pegasus-large')\\nsummary = summarizer('your_text_here')\", \"performance\": {\"dataset\": [{\"name\": \"xsum\", \"accuracy\": \"47.60/24.83/39.64\"}, {\"name\": \"cnn_dailymail\", \"accuracy\": \"44.16/21.56/41.30\"}, {\"name\": \"newsroom\", \"accuracy\": \"45.98/34.20/42.18\"}, {\"name\": \"multi_news\", \"accuracy\": \"47.65/18.75/24.95\"}, {\"name\": \"gigaword\", \"accuracy\": \"39.65/20.47/36.76\"}, {\"name\": \"wikihow\", \"accuracy\": \"46.39/22.12/38.41\"}, {\"name\": \"reddit_tifu\", \"accuracy\": \"27.99/9.81/22.94\"}, {\"name\": \"big_patent\", \"accuracy\": \"52.29/33.08/41.66\"}, {\"name\": \"arxiv\", \"accuracy\": \"44.21/16.95/25.67\"}, {\"name\": \"pubmed\", \"accuracy\": \"45.97/20.15/28.25\"}, {\"name\": \"aeslc\", \"accuracy\": \"37.68/21.25/36.51\"}, {\"name\": \"billsum\", \"accuracy\": \"59.67/41.58/47.59\"}]}, \"description\": \"google/pegasus-large is a pre-trained model for abstractive text summarization based on the PEGASUS architecture. It is trained on a mixture of C4 and HugeNews datasets and uses a sentencepiece tokenizer that can encode newline characters. The model has been fine-tuned for various summarization tasks and achieves state-of-the-art performance on multiple benchmarks.\"}}", "category": "generic"}
{"question_id": 787, "text": " Now I need to create a summary of my chat with my friend last night.\\n###Input: conversation = '''Hannah: Hey, do you have Betty's number?\\nAmanda: Lemme check\\nAmanda: Sorry, can't find it.\\nAmanda: Ask Larry\\nAmanda: He called her last time we were at the park together\\nHannah: I don't know him well\\nAmanda: Don't be shy, he's very nice\\nHannah: If you say so..\\nHannah: I'd rather you texted him\\nAmanda: Just text him \\ud83d\\ude42\\nHannah: Urgh.. Alright\\nHannah: Bye\\nAmanda: Bye bye\\n'''\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Summarization\", \"api_name\": \"lidiya/bart-large-xsum-samsum\", \"api_call\": \"pipeline('summarization', model='lidiya/bart-large-xsum-samsum')\", \"api_arguments\": \"conversation\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nsummarizer = pipeline(summarization, model=lidiya/bart-large-xsum-samsum)\\nconversation = '''Hannah: Hey, do you have Betty's number?\\nAmanda: Lemme check\\nAmanda: Sorry, can't find it.\\nAmanda: Ask Larry\\nAmanda: He called her last time we were at the park together\\nHannah: I don't know him well\\nAmanda: Don't be shy, he's very nice\\nHannah: If you say so..\\nHannah: I'd rather you texted him\\nAmanda: Just text him \\ud83d\\ude42\\nHannah: Urgh.. Alright\\nHannah: Bye\\nAmanda: Bye bye <br />\\n'''\\nsummarizer(conversation)\", \"performance\": {\"dataset\": \"SAMSum Corpus: A Human-annotated Dialogue Dataset for Abstractive Summarization\", \"accuracy\": {\"rouge1\": 53.306, \"rouge2\": 28.355, \"rougeL\": 44.095}}, \"description\": \"This model was obtained by fine-tuning facebook/bart-large-xsum on Samsum dataset.\"}}", "category": "generic"}
{"question_id": 788, "text": " As a news agency, we need a summarized version of a recent article about YouTube's new policy on vaccine misinformation.\\n###Input: Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said. The policy includes the termination of accounts of anti-vaccine influencers. Tech giants have been criticised for not doing more to counter false health information on their sites. In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue. YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines. In a blog post, the company said it had seen false claims about Covid jabs spill over into misinformation about vaccines in general. The new policy covers long-approved vaccines, such as those against measles or hepatitis B. We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO, the post said, referring to the World Health Organization.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"csebuetnlp/mT5_multilingual_XLSum\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('csebuetnlp/mT5_multilingual_XLSum')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers==4.11.0.dev0\"], \"example_code\": \"import re\\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\nWHITESPACE_HANDLER = lambda k: re.sub('\\\\s+', ' ', re.sub('\\\\n+', ' ', k.strip()))\\narticle_text = Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said. The policy includes the termination of accounts of anti-vaccine influencers. Tech giants have been criticised for not doing more to counter false health information on their sites. In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue. YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines. In a blog post, the company said it had seen false claims about Covid jabs spill over into misinformation about vaccines in general. The new policy covers long-approved vaccines, such as those against measles or hepatitis B. We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO, the post said, referring to the World Health Organization.\\nmodel_name = csebuetnlp/mT5_multilingual_XLSum\\ntokenizer = AutoTokenizer.from_pretrained(model_name)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\\ninput_ids = tokenizer(\\n [WHITESPACE_HANDLER(article_text)],\\n return_tensors=pt,\\n padding=max_length,\\n truncation=True,\\n max_length=512\\n)[input_ids]\\noutput_ids = model.generate(\\n input_ids=input_ids,\\n max_length=84,\\n no_repeat_ngram_size=2,\\n num_beams=4\\n)[0]\\nsummary = tokenizer.decode(\\n output_ids,\\n skip_special_tokens=True,\\n clean_up_tokenization_spaces=False\\n)\\nprint(summary)\", \"performance\": {\"dataset\": \"xsum\", \"accuracy\": {\"ROUGE-1\": 36.5, \"ROUGE-2\": 13.934, \"ROUGE-L\": 28.988, \"ROUGE-LSUM\": 28.996, \"loss\": 2.067, \"gen_len\": 26.973}}, \"description\": \"This repository contains the mT5 checkpoint finetuned on the 45 languages of XL-Sum dataset. It is a multilingual abstractive summarization model that supports text-to-text generation for 43 languages.\"}}", "category": "generic"}
{"question_id": 789, "text": " Let's build a Chatbot that can solve daily life problems of a research Assistant.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"microsoft/DialoGPT-large\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('microsoft/DialoGPT-large')\", \"api_arguments\": [\"bot_input_ids\", \"max_length\", \"pad_token_id\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\nimport torch\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/DialoGPT-large)\\nmodel = AutoModelForCausalLM.from_pretrained(microsoft/DialoGPT-large)\", \"performance\": {\"dataset\": \"Reddit discussion thread\", \"accuracy\": \"Comparable to human response quality under a single-turn conversation Turing test\"}, \"description\": \"DialoGPT is a state-of-the-art large-scale pretrained dialogue response generation model for multi-turn conversations. The model is trained on 147M multi-turn dialogues from Reddit discussion threads.\"}}", "category": "generic"}
{"question_id": 790, "text": " We need to integrate the personal assistant we're building with the capability of having conversations with people, sometimes answering general knowledge questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Conversational\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"mywateriswet/ShuanBot\", \"api_call\": \"pipeline('conversational', model='mywateriswet/ShuanBot')\", \"api_arguments\": \"message\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"response = chatbot('What is your name?')\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"ShuanBot is a conversational chatbot model based on the GPT-2 architecture. It can be used for generating human-like responses in a chat context.\"}}", "category": "generic"}
{"question_id": 791, "text": " I want to create a chatbot for discussing gardening topics and tips, which can refer to external information while generating responses.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"microsoft/GODEL-v1_1-base-seq2seq\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/GODEL-v1_1-base-seq2seq')\", \"api_arguments\": [\"instruction\", \"knowledge\", \"dialog\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\ndef generate(instruction, knowledge, dialog):\\n if knowledge != '':\\n knowledge = '[KNOWLEDGE] ' + knowledge\\n dialog = ' EOS '.join(dialog)\\n query = f{instruction} [CONTEXT] {dialog} {knowledge}\\n input_ids = tokenizer(f{query}, return_tensors=pt).input_ids\\n outputs = model.generate(input_ids, max_length=128, min_length=8, top_p=0.9, do_sample=True)\\n output = tokenizer.decode(outputs[0], skip_special_tokens=True)\\n return output\", \"performance\": {\"dataset\": \"Reddit discussion thread, instruction and knowledge grounded dialogs\", \"accuracy\": \"N/A\"}, \"description\": \"GODEL is a large-scale pre-trained model for goal-directed dialogs. It is parameterized with a Transformer-based encoder-decoder model and trained for response generation grounded in external text, which allows more effective fine-tuning on dialog tasks that require conditioning the response on information that is external to the current conversation (e.g., a retrieved document). The pre-trained model can be efficiently fine-tuned and adapted to accomplish a new dialog task with a handful of task-specific dialogs. The v1.1 model is trained on 551M multi-turn dialogs from Reddit discussion thread, and 5M instruction and knowledge grounded dialogs.\"}}", "category": "generic"}
{"question_id": 792, "text": " We're trying to help out a friend who's developing an application for composing text. He is trying to create a bot that comes up with creative ideas for your paragraph.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"distilgpt2\", \"api_call\": \"pipeline('text-generation', model='distilgpt2')\", \"api_arguments\": [\"model\"], \"python_environment_requirements\": [\"from transformers import pipeline, set_seed\"], \"example_code\": \"set_seed(42)\\ngenerator(Hello, I\\u2019m a language model, max_length=20, num_return_sequences=5)\", \"performance\": {\"dataset\": \"WikiText-103\", \"accuracy\": \"21.100\"}, \"description\": \"DistilGPT2 is an English-language model pre-trained with the supervision of the 124 million parameter version of GPT-2. With 82 million parameters, it was developed using knowledge distillation and designed to be a faster, lighter version of GPT-2. It can be used for text generation, writing assistance, creative writing, entertainment, and more.\"}}", "category": "generic"}
{"question_id": 793, "text": " We are creating an AI newsletter application that generates summaries of news articles. We need the AI to generate a brief summary for a given article.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"gpt2-large\", \"api_call\": \"pipeline('text-generation', model='gpt2-large')\", \"api_arguments\": {\"text\": \"Hello, I'm a language model,\", \"max_length\": 30, \"num_return_sequences\": 5}, \"python_environment_requirements\": {\"transformers\": \"pipeline, set_seed\", \"PyTorch\": \"GPT2Tokenizer, GPT2Model\", \"TensorFlow\": \"GPT2Tokenizer, TFGPT2Model\"}, \"example_code\": \"from transformers import pipeline, set_seed\\ngenerator = pipeline('text-generation', model='gpt2-large')\\nset_seed(42)\\ngenerator(Hello, I'm a language model,, max_length=30, num_return_sequences=5)\", \"performance\": {\"dataset\": {\"LAMBADA\": {\"PPL\": 10.87}, \"CBT-CN\": {\"ACC\": 93.45}, \"CBT-NE\": {\"ACC\": 88.0}, \"WikiText2\": {\"PPL\": 19.93}, \"PTB\": {\"PPL\": 40.31}, \"enwiki8\": {\"BPB\": 0.97}, \"text8\": {\"BPC\": 1.02}, \"WikiText103\": {\"PPL\": 22.05}, \"1BW\": {\"PPL\": 44.575}}}, \"description\": \"GPT-2 Large is the 774M parameter version of GPT-2, a transformer-based language model created and released by OpenAI. The model is a pretrained model on English language using a causal language modeling (CLM) objective.\"}}", "category": "generic"}
{"question_id": 794, "text": " I want a code completion tool to assist with finishing my incomplete Python code.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"bigcode/santacoder\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('bigcode/santacoder', trust_remote_code=True)\", \"api_arguments\": [\"inputs\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoModelForCausalLM, AutoTokenizer\\ncheckpoint = bigcode/santacoder\\ndevice = cuda # for GPU usage or cpu for CPU usage\\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint, trust_remote_code=True).to(device)\\ninputs = tokenizer.encode(def print_hello_world():, return_tensors=pt).to(device)\\noutputs = model.generate(inputs)\\nprint(tokenizer.decode(outputs[0]))\", \"performance\": {\"dataset\": \"bigcode/the-stack\", \"accuracy\": {\"pass@1 on MultiPL HumanEval (Python)\": 0.18, \"pass@10 on MultiPL HumanEval (Python)\": 0.29, \"pass@100 on MultiPL HumanEval (Python)\": 0.49, \"pass@1 on MultiPL MBPP (Python)\": 0.35, \"pass@10 on MultiPL MBPP (Python)\": 0.58, \"pass@100 on MultiPL MBPP (Python)\": 0.77, \"pass@1 on MultiPL HumanEval (JavaScript)\": 0.16, \"pass@10 on MultiPL HumanEval (JavaScript)\": 0.27, \"pass@100 on MultiPL HumanEval (JavaScript)\": 0.47, \"pass@1 on MultiPL MBPP (Javascript)\": 0.28, \"pass@10 on MultiPL MBPP (Javascript)\": 0.51, \"pass@100 on MultiPL MBPP (Javascript)\": 0.7, \"pass@1 on MultiPL HumanEval (Java)\": 0.15, \"pass@10 on MultiPL HumanEval (Java)\": 0.26, \"pass@100 on MultiPL HumanEval (Java)\": 0.41, \"pass@1 on MultiPL MBPP (Java)\": 0.28, \"pass@10 on MultiPL MBPP (Java)\": 0.44, \"pass@100 on MultiPL MBPP (Java)\": 0.59, \"single_line on HumanEval FIM (Python)\": 0.44, \"single_line on MultiPL HumanEval FIM (Java)\": 0.62, \"single_line on MultiPL HumanEval FIM (JavaScript)\": 0.6, \"BLEU on CodeXGLUE code-to-text (Python)\": 18.13}}, \"description\": \"The SantaCoder models are a series of 1.1B parameter models trained on the Python, Java, and JavaScript subset of The Stack (v1.1) (which excluded opt-out requests). The main model uses Multi Query Attention, was trained using near-deduplication and comment-to-code ratio as filtering criteria and using the Fill-in-the-Middle objective. In addition there are several models that were trained on datasets with different filter parameters and with architecture and objective variations.\"}}", "category": "generic"}
{"question_id": 795, "text": " We are making an AI copywriter for marketing content. Help me to provide content for a product relating to eco-friendly kitchenware.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"facebook/opt-125m\", \"api_call\": \"pipeline('text-generation', model='facebook/opt-125m')\", \"api_arguments\": {\"do_sample\": \"True\"}, \"python_environment_requirements\": \"from transformers import pipeline, set_seed\", \"example_code\": \"generator(Hello, I'm am conscious and)\", \"performance\": {\"dataset\": \"Various\", \"accuracy\": \"Roughly matches GPT-3 performance\"}, \"description\": \"OPT (Open Pre-trained Transformers) is a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, designed to enable reproducible and responsible research at scale. It was predominantly pretrained with English text, but a small amount of non-English data is present within the training corpus via CommonCrawl. The model was pretrained using a causal language modeling (CLM) objective. OPT can be used for prompting for evaluation of downstream tasks as well as text generation.\"}}", "category": "generic"}
{"question_id": 796, "text": " I am an astronaut in space, writing my diary every day. I need a summary of my diary before sharing it with my family.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"DialogLED-base-16384\", \"api_call\": \"LEDForConditionalGeneration.from_pretrained('MingZhong/DialogLED-base-16384')\", \"api_arguments\": \"input_text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"arxiv\", \"accuracy\": \"2109.02492\"}, \"description\": \"DialogLED is a pre-trained model for long dialogue understanding and summarization. It builds on the Longformer-Encoder-Decoder (LED) architecture and uses window-based denoising as the pre-training task on a large amount of long dialogue data for further training. Here is a base version of DialogLED, the input length is limited to 16,384 in the pre-training phase.\"}}", "category": "generic"}
{"question_id": 797, "text": " I have some paragraphs that I want to use as a source for generating questions, based on the information present in them.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Text2Text Generation\", \"api_name\": \"castorini/doc2query-t5-base-msmarco\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('castorini/doc2query-t5-base-msmarco')\", \"api_arguments\": \"text, max_length\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"MS MARCO\", \"accuracy\": \"Not specified\"}, \"description\": \"A T5 model trained on the MS MARCO dataset for generating queries from documents.\"}}", "category": "generic"}
{"question_id": 798, "text": " I am a novel writer. I plan to write some paragraphs, but I cannot find the exact word placeholder or missing word. Can you help me make a tool to complete the given text below?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"roberta-base\", \"api_call\": \"pipeline('fill-mask', model='roberta-base')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='roberta-base')\\nunmasker(Hello I'm a <mask> model.)\", \"performance\": {\"dataset\": [{\"name\": \"MNLI\", \"accuracy\": 87.6}, {\"name\": \"QQP\", \"accuracy\": 91.9}, {\"name\": \"QNLI\", \"accuracy\": 92.8}, {\"name\": \"SST-2\", \"accuracy\": 94.8}, {\"name\": \"CoLA\", \"accuracy\": 63.6}, {\"name\": \"STS-B\", \"accuracy\": 91.2}, {\"name\": \"MRPC\", \"accuracy\": 90.2}, {\"name\": \"RTE\", \"accuracy\": 78.7}]}, \"description\": \"RoBERTa is a transformers model pretrained on a large corpus of English data in a self-supervised fashion using the Masked language modeling (MLM) objective. This model is case-sensitive and can be fine-tuned on a downstream task.\"}}", "category": "generic"}
{"question_id": 799, "text": " I am working in a dating chatapp development team. We want to generate sentences to make it more interactive.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"albert-base-v2\", \"api_call\": \"pipeline('fill-mask', model='albert-base-v2')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='albert-base-v2')\\nunmasker(Hello I'm a [MASK] model.)\", \"performance\": {\"dataset\": {\"SQuAD1.1\": \"90.2/83.2\", \"SQuAD2.0\": \"82.1/79.3\", \"MNLI\": \"84.6\", \"SST-2\": \"92.9\", \"RACE\": \"66.8\"}, \"accuracy\": \"82.3\"}, \"description\": \"ALBERT Base v2 is a transformers model pretrained on a large corpus of English data in a self-supervised fashion using a masked language modeling (MLM) objective. It was introduced in this paper and first released in this repository. This model, as all ALBERT models, is uncased: it does not make a difference between english and English.\"}}", "category": "generic"}
{"question_id": 801, "text": " I am building a recommendation engine to group news articles. I need a way to determine the similarity between two sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-MiniLM-L6-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L6-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": [\"sentence-transformers\"], \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L6-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"https://seb.sbert.net\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 802, "text": " The company needs a tool to analyze customers' reviews about their products. We need to find out which ones are positive, neutral, or negative.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Embeddings\", \"api_name\": \"sentence-transformers/paraphrase-MiniLM-L3-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L3-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/paraphrase-MiniLM-L3-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"snli, multi_nli, ms_marco\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 803, "text": " I am working on a project that ranks answers to questions based on their relevance. Can you help me find the most relevant answer to a specific question by using sentence similarity?\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"flax-sentence-embeddings/all_datasets_v4_MiniLM-L6\", \"api_call\": \"SentenceTransformer('flax-sentence-embeddings/all_datasets_v4_MiniLM-L6')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"sentence-transformers library\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nmodel = SentenceTransformer('flax-sentence-embeddings/all_datasets_v4_MiniLM-L6')\\ntext = Replace me by any text you'd like.\\ntext_embbedding = model.encode(text)\", \"performance\": {\"dataset\": \"1,097,953,922\", \"accuracy\": \"N/A\"}, \"description\": \"The model is trained on very large sentence level datasets using a self-supervised contrastive learning objective. It is fine-tuned on a 1B sentence pairs dataset, and it aims to capture the semantic information of input sentences. The sentence vector can be used for information retrieval, clustering, or sentence similarity tasks.\"}}", "category": "generic"}
{"question_id": 804, "text": " Assist a client producing an audiobook in Japanese. They need a solution to convert their text script into spoken Japanese.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"ESPnet\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"kan-bayashi_jvs_tts_finetune_jvs001_jsut_vits_raw_phn_jaconv_pyopenjta-truncated-178804\", \"api_call\": \"AutoModelForCausalLM.from_pretrained('espnet/kan-bayashi_jvs_tts_finetune_jvs001_jsut_vits_raw_phn_jaconv_pyopenjta-truncated-178804')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Japanese text-to-speech model trained using the ESPnet framework. It is designed to convert text input into natural-sounding speech.\"}}", "category": "generic"}
{"question_id": 805, "text": " We have a product for the German-speaking audience, and we need to generate some sample voiceovers for the promotional videos.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"speechbrain\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"tts-hifigan-german\", \"api_call\": \"HIFIGAN.from_hparams(source='padmalcom/tts-hifigan-german', savedir=tmpdir_vocoder)\", \"api_arguments\": [\"mel_output\"], \"python_environment_requirements\": [\"speechbrain\"], \"example_code\": \"import torchaudio\\nfrom speechbrain.pretrained import Tacotron2\\nfrom speechbrain.pretrained import HIFIGAN\\ntacotron2 = Tacotron2.from_hparams(source=padmalcom/tts-tacotron2-german, savedir=tmpdir_tts)\\nhifi_gan = HIFIGAN.from_hparams(source=padmalcom/tts-hifigan-german, savedir=tmpdir_vocoder)\\nmel_output, mel_length, alignment = tacotron2.encode_text(Mary had a little lamb)\\nwaveforms = hifi_gan.decode_batch(mel_output)\\ntorchaudio.save('example_TTS.wav',waveforms.squeeze(1), 22050)\", \"performance\": {\"dataset\": \"custom German dataset\", \"accuracy\": \"Not specified\"}, \"description\": \"A HiFIGAN vocoder trained on a generated German dataset using mp3_to_training_data. The pre-trained model takes in input a spectrogram and produces a waveform in output. Typically, a vocoder is used after a TTS model that converts an input text into a spectrogram.\"}}", "category": "generic"}
{"question_id": 806, "text": " I work as a transcriptionist, and I have an hour-long recording of a meeting. I need to identify and segment the speech of various speakers in the recording.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"pyannote.audio\", \"functionality\": \"Speaker Diarization\", \"api_name\": \"pyannote/speaker-diarization\", \"api_call\": \"Pipeline.from_pretrained('pyannote/speaker-diarization@2.1', use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": {\"num_speakers\": \"int (optional)\", \"min_speakers\": \"int (optional)\", \"max_speakers\": \"int (optional)\"}, \"python_environment_requirements\": \"pyannote.audio 2.1.1\", \"example_code\": [\"from pyannote.audio import Pipeline\", \"pipeline = Pipeline.from_pretrained(pyannote/speaker-diarization@2.1, use_auth_token=ACCESS_TOKEN_GOES_HERE)\", \"diarization = pipeline(audio.wav)\", \"with open(audio.rttm, w) as rttm:\", \"  diarization.write_rttm(rttm)\"], \"performance\": {\"dataset\": \"ami\", \"accuracy\": {\"DER%\": \"18.91\", \"FA%\": \"4.48\", \"Miss%\": \"9.51\", \"Conf%\": \"4.91\"}}, \"description\": \"This API provides an automatic speaker diarization pipeline using the pyannote.audio framework. It can process audio files and output speaker diarization results in RTTM format. The pipeline can also handle cases where the number of speakers is known in advance or when providing lower and/or upper bounds on the number of speakers.\"}}", "category": "generic"}
{"question_id": 807, "text": " We are a company focusing on transcription services for Arabic speakers. We need to convert their speech to text.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Recognition\", \"api_name\": \"jonatasgrosman/wav2vec2-large-xlsr-53-arabic\", \"api_call\": \"Wav2Vec2Model.from_pretrained('jonatasgrosman/wav2vec2-large-xlsr-53-arabic')\", \"api_arguments\": [\"audio_paths\"], \"python_environment_requirements\": [\"huggingsound\", \"torch\", \"librosa\", \"datasets\", \"transformers\"], \"example_code\": \"from huggingsound import SpeechRecognitionModel\\nmodel = SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-arabic')\\naudio_paths = ['/path/to/file.mp3', '/path/to/another_file.wav']\\ntranscriptions = model.transcribe(audio_paths)\", \"performance\": {\"dataset\": \"Common Voice ar\", \"accuracy\": {\"WER\": 39.59, \"CER\": 18.18}}, \"description\": \"Fine-tuned XLSR-53 large model for speech recognition in Arabic. Fine-tuned facebook/wav2vec2-large-xlsr-53 on Arabic using the train and validation splits of Common Voice 6.1 and Arabic Speech Corpus.\"}}", "category": "generic"}
{"question_id": 808, "text": " An audio file is recorded in a conference and we need the text version of the conversation for record-keeping purposes.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transcription and Translation\", \"api_name\": \"openai/whisper-small\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-small')\", \"api_arguments\": {\"language\": \"english\", \"task\": \"transcribe\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"datasets\": \"latest\"}, \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained(openai/whisper-small)\", \"model = WhisperForConditionalGeneration.from_pretrained(openai/whisper-small)\", \"model.config.forced_decoder_ids = None\", \"ds = load_dataset(hf-internal-testing/librispeech_asr_dummy, clean, split=validation)\", \"sample = ds[0][audio]\", \"input_features = processor(sample[array], sampling_rate=sample[sampling_rate], return_tensors=pt).input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\", \"print(transcription)\"], \"performance\": {\"dataset\": \"LibriSpeech (clean) test set\", \"accuracy\": \"3.432 WER\"}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning. It is a Transformer-based encoder-decoder model and supports transcription and translation in various languages.\"}}", "category": "generic"}
{"question_id": 809, "text": " Provide a way to translate spoken English to spoken Hokkien for an audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"speech-to-speech-translation\", \"api_name\": \"xm_transformer_unity_en-hk\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_unity_en-hk')\", \"api_arguments\": {\"config_yaml\": \"config.yaml\", \"task\": \"speech_to_text\", \"cache_dir\": \"cache_dir\"}, \"python_environment_requirements\": [\"fairseq\", \"hub_utils\", \"torchaudio\", \"IPython.display\", \"huggingface_hub\"], \"example_code\": [\"import json\", \"import os\", \"from pathlib import Path\", \"import IPython.display as ipd\", \"from fairseq import hub_utils\", \"from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\", \"from fairseq.models.speech_to_text.hub_interface import S2THubInterface\", \"from fairseq.models.text_to_speech import CodeHiFiGANVocoder\", \"from fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\", \"from huggingface_hub import snapshot_download\", \"import torchaudio\", \"cache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\", \"models, cfg, task = load_model_ensemble_and_task_from_hf_hub(\", \" facebook/xm_transformer_unity_en-hk,\", \" arg_overrides={config_yaml: config.yaml, task: speech_to_text},\", \" cache_dir=cache_dir,\", \")\", \"model = models[0].cpu()\", \"cfg[task].cpu = True\", \"generator = task.build_generator([model], cfg)\", \"audio, _ = torchaudio.load(/path/to/an/audio/file)\", \"sample = S2THubInterface.get_model_input(task, audio)\", \"unit = S2THubInterface.get_prediction(task, model, generator, sample)\", \"library_name = fairseq\", \"cache_dir = (\", \" cache_dir or (Path.home() / .cache / library_name).as_posix()\", \")\", \"cache_dir = snapshot_download(\", \" ffacebook/unit_hifigan_HK_layer12.km2500_frame_TAT-TTS, cache_dir=cache_dir, library_name=library_name\", \")\", \"x = hub_utils.from_pretrained(\", \" cache_dir,\", \" model.pt,\", \" .,\", \" archive_map=CodeHiFiGANVocoder.hub_models(),\", \" config_yaml=config.json,\", \" fp16=False,\", \" is_vocoder=True,\", \")\", \"with open(f{x['args']['data']}/config.json) as f:\", \" vocoder_cfg = json.load(f)\", \"assert (\", \" len(x[args][model_path]) == 1\", \"), Too many vocoder models in the input\", \"vocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\", \"tts_model = VocoderHubInterface(vocoder_cfg, vocoder)\", \"tts_sample = tts_model.get_model_input(unit)\", \"wav, sr = tts_model.get_prediction(tts_sample)\", \"ipd.Audio(wav, rate=sr)\"], \"performance\": {\"dataset\": \"MuST-C\", \"accuracy\": null}, \"description\": \"Speech-to-speech translation model with two-pass decoder (UnitY) from fairseq: English-Hokkien. Trained with supervised data in TED domain, and weakly supervised data in TED and Audiobook domain.\"}}", "category": "generic"}
{"question_id": 810, "text": " We want to separate the speaker sources from the original audio file to filter the noise.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri3Mix_sepclean_8k\", \"api_call\": \"ConvTasNet_Libri3Mix_sepclean_8k()\", \"api_arguments\": {\"n_src\": 3, \"sample_rate\": 8000, \"segment\": 3, \"task\": \"sep_clean\", \"train_dir\": \"data/wav8k/min/train-360\", \"valid_dir\": \"data/wav8k/min/dev\", \"kernel_size\": 16, \"n_filters\": 512, \"stride\": 8, \"bn_chan\": 128, \"hid_chan\": 512, \"mask_act\": \"relu\", \"n_blocks\": 8, \"n_repeats\": 3, \"skip_chan\": 128, \"lr\": 0.001, \"optimizer\": \"adam\", \"weight_decay\": 0.0, \"batch_size\": 24, \"early_stop\": true, \"epochs\": 200, \"half_lr\": true, \"num_workers\": 4}, \"python_environment_requirements\": \"Asteroid\", \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri3Mix\", \"accuracy\": {\"si_sdr\": 8.581797049575108, \"si_sdr_imp\": 11.977037288467368, \"sdr\": 9.305885208641385, \"sdr_imp\": 12.3943409734845, \"sir\": 16.42030534048559, \"sir_imp\": 19.508759460400984, \"sar\": 10.641943911079238, \"sar_imp\": -56.4345187842095, \"stoi\": 0.8365148408724333, \"stoi_imp\": 0.24401766199806396}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri3Mix dataset.\"}}", "category": "generic"}
{"question_id": 811, "text": " Our goal is to analyze the emotions expressed in a user's recorded message.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Emotion Recognition\", \"api_name\": \"superb/hubert-large-superb-er\", \"api_call\": \"pipeline('audio-classification', model='superb/hubert-large-superb-er')\", \"api_arguments\": [\"model\"], \"python_environment_requirements\": [\"transformers\", \"datasets\", \"librosa\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset('anton-l/superb_demo', 'er', split='session1')\\nclassifier = pipeline('audio-classification', model='superb/hubert-large-superb-er')\\nlabels = classifier(dataset[0]['file'], top_k=5)\", \"performance\": {\"dataset\": \"IEMOCAP\", \"accuracy\": 0.6762}, \"description\": \"This is a ported version of S3PRL's Hubert for the SUPERB Emotion Recognition task. The base model is hubert-large-ll60k, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 812, "text": " I want to make a conference call app which differentiates between the times when the user is speaking and when there is no voice activity. \\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face\", \"functionality\": \"Voice Activity Detection\", \"api_name\": \"FSMN-VAD\", \"api_call\": \"pipeline('voice-activity-detection', model='funasr/FSMN-VAD')\", \"api_arguments\": {}, \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"FSMN-VAD model for Voice Activity Detection using Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 813, "text": " We want to analyze a conference call recording to identify the speakers and the segments of the conversation they participated in.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"pyannote.audio\", \"functionality\": \"Speaker Diarization\", \"api_name\": \"philschmid/pyannote-speaker-diarization-endpoint\", \"api_call\": \"Pipeline.from_pretrained('philschmid/pyannote-speaker-diarization-endpoint')\", \"api_arguments\": [\"num_speakers\", \"min_speakers\", \"max_speakers\", \"segmentation_onset\"], \"python_environment_requirements\": \"pyannote.audio 2.0\", \"example_code\": [\"from pyannote.audio import Pipeline\", \"pipeline = Pipeline.from_pretrained(pyannote/speaker-diarization@2022.07)\", \"diarization = pipeline(audio.wav)\", \"with open(audio.rttm, w) as rttm:\", \"  diarization.write_rttm(rttm)\"], \"performance\": {\"dataset\": [{\"name\": \"AISHELL-4\", \"accuracy\": {\"DER%\": 14.61, \"FA%\": 3.31, \"Miss%\": 4.35, \"Conf%\": 6.95}}, {\"name\": \"AMI Mix-Headset only_words\", \"accuracy\": {\"DER%\": 18.21, \"FA%\": 3.28, \"Miss%\": 11.07, \"Conf%\": 3.87}}, {\"name\": \"AMI Array1-01 only_words\", \"accuracy\": {\"DER%\": 29.0, \"FA%\": 2.71, \"Miss%\": 21.61, \"Conf%\": 4.68}}, {\"name\": \"CALLHOME Part2\", \"accuracy\": {\"DER%\": 30.24, \"FA%\": 3.71, \"Miss%\": 16.86, \"Conf%\": 9.66}}, {\"name\": \"DIHARD 3 Full\", \"accuracy\": {\"DER%\": 20.99, \"FA%\": 4.25, \"Miss%\": 10.74, \"Conf%\": 6.0}}, {\"name\": \"REPERE Phase 2\", \"accuracy\": {\"DER%\": 12.62, \"FA%\": 1.55, \"Miss%\": 3.3, \"Conf%\": 7.76}}, {\"name\": \"VoxConverse v0.0.2\", \"accuracy\": {\"DER%\": 12.76, \"FA%\": 3.45, \"Miss%\": 3.85, \"Conf%\": 5.46}}]}, \"description\": \"A speaker diarization pipeline that uses pyannote.audio to perform voice activity detection, speaker change detection, and overlapped speech detection. It can handle fully automatic processing with no manual intervention and can be fine-tuned with various hyperparameters.\"}}", "category": "generic"}
{"question_id": 814, "text": " Our company wants to predict the potential negative impact on the environment based on certain factors.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"omarques/autotrain-in-class-test-demo-1659958767\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"omarques/autotrain-data-in-class-test-demo\", \"accuracy\": 0.983}, \"description\": \"A model trained for binary classification of carbon emissions using AutoTrain.\"}}", "category": "generic"}
{"question_id": 815, "text": " I have a dataset with CO2 emissions in a CSV file, and I want to classify which sources have high or low emissions.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Tabular Classification\", \"api_name\": \"datadmg/autotrain-test-news-44534112235\", \"api_call\": \"AutoModel.from_pretrained('datadmg/autotrain-test-news-44534112235')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"datadmg/autotrain-data-test-news\", \"accuracy\": 0.333}, \"description\": \"This model is trained for Multi-class Classification on CO2 Emissions dataset. It uses the Hugging Face Transformers framework and is based on the extra_trees algorithm. The model is trained with AutoTrain and has a tabular classification functionality.\"}}", "category": "generic"}
{"question_id": 816, "text": " I am building a recommendation engine to recommend linkbuilding strategy to clients. I have data in csv files that needs to be classified.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Transformers\", \"api_name\": \"abhishek/autotrain-iris-knn\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"scikit-learn/iris\", \"accuracy\": 0.9}, \"description\": \"A K-Nearest Neighbors (KNN) model trained on the Iris dataset for multi-class classification. The model is trained using AutoTrain and has an accuracy of 0.9.\"}}", "category": "generic"}
{"question_id": 817, "text": " Create a model to estimate the carbon emissions of a specific device by using features like idle power, standby power, and active power.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"pcoloc/autotrain-mikrotik-7-7-1860563588\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"pcoloc/autotrain-data-mikrotik-7-7\", \"accuracy\": {\"Loss\": 48.213, \"R2\": 0.654, \"MSE\": 2324.518, \"MAE\": 32.634, \"RMSLE\": 0.586}}, \"description\": \"A tabular regression model trained with AutoTrain to predict carbon emissions based on input features.\"}}", "category": "generic"}
{"question_id": 818, "text": " We have a virtual reality investment in soccer simulations. We need an intelligent learning-based soccer player to make it more engaging and challenging.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"ML-Agents\", \"functionality\": \"SoccerTwos\", \"api_name\": \"0xid/poca-SoccerTwos\", \"api_call\": \"mlagents-load-from-hf --repo-id='0xid/poca-SoccerTwos' --local-dir='./downloads'\", \"api_arguments\": [\"your_configuration_file_path.yaml\", \"run_id\"], \"python_environment_requirements\": [\"unity-ml-agents\", \"deep-reinforcement-learning\"], \"example_code\": \"mlagents-learn <your_configuration_file_path.yaml> --run-id=<run_id> --resume\", \"performance\": {\"dataset\": \"SoccerTwos\", \"accuracy\": \"N/A\"}, \"description\": \"A trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library.\"}}", "category": "generic"}
{"question_id": 819, "text": " I want to build an AI that identifies the best marketing strategies for my website by trying different combinations of headlines and images.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"MountainCar-v0\", \"api_name\": \"sb3/dqn-MountainCar-v0\", \"api_call\": \"load_from_hub(repo_id='sb3/dqn-MountainCar-v0',filename='{MODEL FILENAME}.zip',)\", \"api_arguments\": [\"algo\", \"env\", \"f\"], \"python_environment_requirements\": [\"RL Zoo\", \"SB3\", \"SB3 Contrib\"], \"example_code\": [\"python -m rl_zoo3.load_from_hub --algo dqn --env MountainCar-v0 -orga sb3 -f logs/\", \"python train.py --algo dqn --env MountainCar-v0 -f logs/\", \"python -m rl_zoo3.push_to_hub --algo dqn --env MountainCar-v0 -f logs/ -orga sb3\"], \"performance\": {\"dataset\": \"MountainCar-v0\", \"accuracy\": \"-103.40 +/- 7.49\"}, \"description\": \"This is a trained model of a DQN agent playing MountainCar-v0 using the stable-baselines3 library and the RL Zoo. The RL Zoo is a training framework for Stable Baselines3 reinforcement learning agents, with hyperparameter optimization and pre-trained agents included.\"}}", "category": "generic"}
{"question_id": 820, "text": " A team is working on a video game where the player needs to land the spaceship on the lunar surface without crashing. They want to implement an AI module that can play the game and test it.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Stable-Baselines3\", \"functionality\": \"LunarLander-v2\", \"api_name\": \"araffin/dqn-LunarLander-v2\", \"api_call\": \"DQN.load(load_from_hub('araffin/dqn-LunarLander-v2', 'dqn-LunarLander-v2.zip'), **kwargs)\", \"api_arguments\": {\"checkpoint\": \"araffin/dqn-LunarLander-v2\", \"kwargs\": {\"target_update_interval\": 30}}, \"python_environment_requirements\": [\"huggingface_sb3\", \"stable_baselines3\"], \"example_code\": {\"load_model\": \"from huggingface_sb3 import load_from_hub\\nfrom stable_baselines3 import DQN\\nfrom stable_baselines3.common.env_util import make_vec_env\\nfrom stable_baselines3.common.evaluation import evaluate_policy\\ncheckpoint = load_from_hub(araffin/dqn-LunarLander-v2, dqn-LunarLander-v2.zip)\\nkwargs = dict(target_update_interval=30)\\nmodel = DQN.load(checkpoint, **kwargs)\\nenv = make_vec_env(LunarLander-v2, n_envs=1)\", \"evaluate\": \"mean_reward, std_reward = evaluate_policy(\\n model,\\n env,\\n n_eval_episodes=20,\\n deterministic=True,\\n)\\nprint(fMean reward = {mean_reward:.2f} +/- {std_reward:.2f})\"}, \"performance\": {\"dataset\": \"LunarLander-v2\", \"accuracy\": \"280.22 +/- 13.03\"}, \"description\": \"This is a trained model of a DQN agent playing LunarLander-v2 using the stable-baselines3 library.\"}}", "category": "generic"}
{"question_id": 821, "text": " Develop an AI character that can play the SoccerTwos game with advanced strategies.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"ML-Agents\", \"functionality\": \"SoccerTwos\", \"api_name\": \"Raiden-1001/poca-Soccerv7\", \"api_call\": \"mlagents-load-from-hf --repo-id='Raiden-1001/poca-Soccerv7.1' --local-dir='./downloads'\", \"api_arguments\": [\"your_configuration_file_path.yaml\", \"run_id\"], \"python_environment_requirements\": [\"unity-ml-agents\", \"deep-reinforcement-learning\", \"ML-Agents-SoccerTwos\"], \"example_code\": \"Step 1: Write your model_id: Raiden-1001/poca-Soccerv7\\nStep 2: Select your .nn /.onnx file\\nClick on Watch the agent play \\ud83d\\udc40\", \"performance\": {\"dataset\": \"SoccerTwos\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library.\"}}", "category": "generic"}
{"question_id": 822, "text": " Our gaming company is looking for a reinforcement learning solution to implement an artificial agent that can play SoccerTwos proficiently.\\n \n Use this API documentation for reference:  {\"domain\": \"Reinforcement Learning\", \"framework\": \"Unity ML-Agents Library\", \"functionality\": \"Train and play SoccerTwos\", \"api_name\": \"poca-SoccerTwosv2\", \"api_call\": \"mlagents-load-from-hf --repo-id='Raiden-1001/poca-SoccerTwosv2' --local-dir='./downloads'\", \"api_arguments\": [\"your_configuration_file_path.yaml\", \"run_id\"], \"python_environment_requirements\": [\"ml-agents\"], \"example_code\": \"mlagents-learn <your_configuration_file_path.yaml> --run-id=<run_id> --resume\", \"performance\": {\"dataset\": \"SoccerTwos\", \"accuracy\": \"Not provided\"}, \"description\": \"A trained model of a poca agent playing SoccerTwos using the Unity ML-Agents Library.\"}}", "category": "generic"}
{"question_id": 823, "text": " Develop a language understanding feature for a chatbot that can help tourists with information on visiting Indonesia.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Feature Extraction\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Contextual Representation\", \"api_name\": \"indobenchmark/indobert-base-p1\", \"api_call\": \"AutoModel.from_pretrained('indobenchmark/indobert-base-p1')\", \"api_arguments\": [\"BertTokenizer\", \"AutoModel\", \"tokenizer.encode\", \"torch.LongTensor\", \"model(x)[0].sum()\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import BertTokenizer, AutoModel\\ntokenizer = BertTokenizer.from_pretrained('indobenchmark/indobert-base-p1')\\nmodel = AutoModel.from_pretrained('indobenchmark/indobert-base-p1')\\nx = torch.LongTensor(tokenizer.encode('aku adalah anak [MASK]')).view(1,-1)\\nprint(x, model(x)[0].sum())\", \"performance\": {\"dataset\": \"Indo4B\", \"accuracy\": \"23.43 GB of text\"}, \"description\": \"IndoBERT is a state-of-the-art language model for Indonesian based on the BERT model. The pretrained model is trained using a masked language modeling (MLM) objective and next sentence prediction (NSP) objective.\"}}", "category": "generic"}
{"question_id": 824, "text": " I need to analyze images in real-time feeds from different locations for object recognition.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"google/vit-base-patch16-224-in21k\", \"api_call\": \"ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-224-in21k\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import ViTImageProcessor, ViTModel\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224-in21k')\\nmodel = ViTModel.from_pretrained('google/vit-base-patch16-224-in21k')\\ninputs = processor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlast_hidden_states = outputs.last_hidden_state\", \"performance\": {\"dataset\": \"ImageNet-21k\", \"accuracy\": \"Refer to tables 2 and 5 of the original paper\"}, \"description\": \"The Vision Transformer (ViT) is a transformer encoder model (BERT-like) pretrained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al. and first released in this repository. However, the weights were converted from the timm repository by Ross Wightman, who already converted the weights from JAX to PyTorch. Credits go to him.\"}}", "category": "generic"}
{"question_id": 825, "text": " Our travel agency needs to build a chatbot that helps tourists find the best attractions in various destinations. The chatbot should answer questions related to tourist attractions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"facebook/dpr-question_encoder-single-nq-base\", \"api_call\": \"DPRQuestionEncoder.from_pretrained('facebook/dpr-question_encoder-single-nq-base')\", \"api_arguments\": [\"input_ids\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import DPRQuestionEncoder, DPRQuestionEncoderTokenizer\\ntokenizer = DPRQuestionEncoderTokenizer.from_pretrained(facebook/dpr-question_encoder-single-nq-base)\\nmodel = DPRQuestionEncoder.from_pretrained(facebook/dpr-question_encoder-single-nq-base)\\ninput_ids = tokenizer(Hello, is my dog cute ?, return_tensors=pt)[input_ids]\\nembeddings = model(input_ids).pooler_output\", \"performance\": {\"dataset\": [{\"name\": \"NQ\", \"accuracy\": {\"top_20\": 78.4, \"top_100\": 85.4}}, {\"name\": \"TriviaQA\", \"accuracy\": {\"top_20\": 79.4, \"top_100\": 85.0}}, {\"name\": \"WQ\", \"accuracy\": {\"top_20\": 73.2, \"top_100\": 81.4}}, {\"name\": \"TREC\", \"accuracy\": {\"top_20\": 79.8, \"top_100\": 89.1}}, {\"name\": \"SQuAD\", \"accuracy\": {\"top_20\": 63.2, \"top_100\": 77.2}}]}, \"description\": \"Dense Passage Retrieval (DPR) is a set of tools and models for state-of-the-art open-domain Q&A research. dpr-question_encoder-single-nq-base is the question encoder trained using the Natural Questions (NQ) dataset (Lee et al., 2019; Kwiatkowski et al., 2019).\"}}", "category": "generic"}
{"question_id": 826, "text": " We want to develop a chatbot that can engage with multilingual users. Please help us create a model to encode sentences and understand user input in various languages.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Feature Extraction\", \"api_name\": \"setu4993/LaBSE\", \"api_call\": \"BertModel.from_pretrained('setu4993/LaBSE')\", \"api_arguments\": [\"english_sentences\", \"italian_sentences\", \"japanese_sentences\"], \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"import torch\\nfrom transformers import BertModel, BertTokenizerFast\\ntokenizer = BertTokenizerFast.from_pretrained('setu4993/LaBSE')\\nmodel = BertModel.from_pretrained('setu4993/LaBSE')\\nmodel = model.eval()\\nenglish_sentences = [\\n 'dog',\\n 'Puppies are nice.',\\n 'I enjoy taking long walks along the beach with my dog.',\\n]\\nenglish_inputs = tokenizer(english_sentences, return_tensors='pt', padding=True)\\nwith torch.no_grad():\\n english_outputs = model(**english_inputs)\\nenglish_embeddings = english_outputs.pooler_output\", \"performance\": {\"dataset\": \"CommonCrawl and Wikipedia\", \"accuracy\": \"Not Specified\"}, \"description\": \"Language-agnostic BERT Sentence Encoder (LaBSE) is a BERT-based model trained for sentence embedding for 109 languages. The pre-training process combines masked language modeling with translation language modeling. The model is useful for getting multilingual sentence embeddings and for bi-text retrieval.\"}}", "category": "generic"}
{"question_id": 827, "text": " We need to create a demo for a 3D printing company by generating images of some examples that the business will print.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Image Generation\", \"api_name\": \"CompVis/stable-diffusion-v1-4\", \"api_call\": \"StableDiffusionPipeline.from_pretrained('CompVis/stable-diffusion-v1-4')\", \"api_arguments\": [\"prompt\"], \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"scipy\"], \"example_code\": \"import torch\\nfrom diffusers import StableDiffusionPipeline\\nmodel_id = CompVis/stable-diffusion-v1-4\\ndevice = cuda\\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)\\npipe = pipe.to(device)\\nprompt = a photo of an astronaut riding a horse on mars\\nimage = pipe(prompt).images[0]\\nimage.save(astronaut_rides_horse.png)\", \"performance\": {\"dataset\": \"COCO2017 validation set\", \"accuracy\": \"Not optimized for FID scores\"}, \"description\": \"Stable Diffusion is a latent text-to-image diffusion model capable of generating photo-realistic images given any text input. The Stable-Diffusion-v1-4 checkpoint was fine-tuned on 225k steps at resolution 512x512 on laion-aesthetics v2 5+ and 10% dropping of the text-conditioning to improve classifier-free guidance sampling. This model is intended for research purposes and can be used for generating artworks, design, educational or creative tools, and research on generative models.\"}}", "category": "generic"}
{"question_id": 828, "text": " I work at an art school and our professor wants to create an AI chatbot that can study an image of a painting and answer questions about it.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Image-to-Text\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"blip2-opt-2.7b\", \"api_call\": \"Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"api_arguments\": {\"img_url\": \"https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg\", \"question\": \"how many dogs are in the picture?\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": {\"import_requests\": \"import requests\", \"import_PIL\": \"from PIL import Image\", \"import_transformers\": \"from transformers import BlipProcessor, Blip2ForConditionalGeneration\", \"load_processor\": \"processor = BlipProcessor.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_model\": \"model = Blip2ForConditionalGeneration.from_pretrained('Salesforce/blip2-opt-2.7b')\", \"load_image\": \"raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')\", \"process_inputs\": \"inputs = processor(raw_image, question, return_tensors='pt')\", \"generate_output\": \"out = model.generate(**inputs)\", \"decode_output\": \"print(processor.decode(out[0], skip_special_tokens=True))\"}, \"performance\": {\"dataset\": \"LAION\", \"accuracy\": \"Not specified\"}, \"description\": \"BLIP-2 model, leveraging OPT-2.7b (a large language model with 2.7 billion parameters). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, given the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.\"}}", "category": "generic"}
{"question_id": 829, "text": " We are working on a project to develop an AI-based method to provide answers to questions about charts and diagrams. Please provide the necessary code for using the Pix2Struct model.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"google/pix2struct-chartqa-base\", \"api_call\": \"Pix2StructForConditionalGeneration.from_pretrained('google/pix2struct-chartqa-base')\", \"api_arguments\": [\"t5x_checkpoint_path\", \"pytorch_dump_path\", \"use-large\"], \"python_environment_requirements\": \"transformers\", \"example_code\": \"python convert_pix2struct_checkpoint_to_pytorch.py --t5x_checkpoint_path PATH_TO_T5X_CHECKPOINTS --pytorch_dump_path PATH_TO_SAVE\", \"performance\": {\"dataset\": \"ChartQA\", \"accuracy\": \"Not provided\"}, \"description\": \"Pix2Struct is an image encoder - text decoder model that is trained on image-text pairs for various tasks, including image captionning and visual question answering. The model is pretrained by learning to parse masked screenshots of web pages into simplified HTML. It can achieve state-of-the-art results in six out of nine tasks across four domains: documents, illustrations, user interfaces, and natural images.\"}}", "category": "generic"}
{"question_id": 830, "text": " Create a personalized online ad campaign for our new clothing line. The ad should generate a video showing a man wearing a stylish suit while walking in the city.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video Synthesis\", \"api_name\": \"modelscope-damo-text-to-video-synthesis\", \"api_call\": \"pipeline('text-to-video-synthesis', model_dir.as_posix())\", \"api_arguments\": {\"text\": \"A short text description in English\"}, \"python_environment_requirements\": [\"modelscope==1.4.2\", \"open_clip_torch\", \"pytorch-lightning\"], \"example_code\": \"from huggingface_hub import snapshot_download\\nfrom modelscope.pipelines import pipeline\\nfrom modelscope.outputs import OutputKeys\\nimport pathlib\\nmodel_dir = pathlib.Path('weights')\\nsnapshot_download('damo-vilab/modelscope-damo-text-to-video-synthesis',\\n repo_type='model', local_dir=model_dir)\\npipe = pipeline('text-to-video-synthesis', model_dir.as_posix())\\ntest_text = {\\n 'text': 'A panda eating bamboo on a rock.',\\n}\\noutput_video_path = pipe(test_text,)[OutputKeys.OUTPUT_VIDEO]\\nprint('output_video_path:', output_video_path)\", \"performance\": {\"dataset\": \"Webvid, ImageNet, LAION5B\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is based on a multi-stage text-to-video generation diffusion model, which inputs a description text and returns a video that matches the text description. Only English input is supported.\"}}", "category": "generic"}
{"question_id": 831, "text": " We need to generate a short video showing Spider-Man water skiing in redshift style based on a textual prompt.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Text-to-Video\", \"framework\": \"Hugging Face\", \"functionality\": \"Text-to-Video Generation\", \"api_name\": \"redshift-man-skiing\", \"api_call\": \"TuneAVideoPipeline.from_pretrained('nitrosocke/redshift-diffusion', unet=UNet3DConditionModel.from_pretrained('Tune-A-Video-library/redshift-man-skiing', subfolder='unet', torch_dtype=torch.float16), torch_dtype=torch.float16)\", \"api_arguments\": {\"prompt\": \"string\", \"video_length\": \"int\", \"height\": \"int\", \"width\": \"int\", \"num_inference_steps\": \"int\", \"guidance_scale\": \"float\"}, \"python_environment_requirements\": [\"torch\", \"tuneavideo\"], \"example_code\": \"from tuneavideo.pipelines.pipeline_tuneavideo import TuneAVideoPipeline\\nfrom tuneavideo.models.unet import UNet3DConditionModel\\nfrom tuneavideo.util import save_videos_grid\\nimport torch\\npretrained_model_path = nitrosocke/redshift-diffusion\\nunet_model_path = Tune-A-Video-library/redshift-man-skiing\\nunet = UNet3DConditionModel.from_pretrained(unet_model_path, subfolder='unet', torch_dtype=torch.float16).to('cuda')\\npipe = TuneAVideoPipeline.from_pretrained(pretrained_model_path, unet=unet, torch_dtype=torch.float16).to(cuda)\\npipe.enable_xformers_memory_efficient_attention()\\nprompt = (redshift style) spider man is skiing\\nvideo = pipe(prompt, video_length=8, height=512, width=512, num_inference_steps=50, guidance_scale=7.5).videos\\nsave_videos_grid(video, f./{prompt}.gif)\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"Tune-A-Video - Redshift is a text-to-video generation model based on the nitrosocke/redshift-diffusion model. It generates videos based on textual prompts, such as 'a man is skiing' or '(redshift style) spider man is skiing'.\"}}", "category": "generic"}
{"question_id": 832, "text": " Our company develops travel guides in Polish language. We are now planning to use artificial intelligence for quick captioning of Polish images.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"azwierzc/vilt-b32-finetuned-vqa-pl\", \"api_call\": \"pipeline('visual-question-answering', model='azwierzc/vilt-b32-finetuned-vqa-pl')\", \"api_arguments\": {\"image\": \"path_to_image\", \"question\": \"question_text\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A Visual Question Answering model fine-tuned on the Polish language.\"}}", "category": "generic"}
{"question_id": 833, "text": " A user has difficulty in visualizing images and needs help answering questions about an image. We need a model to answer questions based on the image provided.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Visual Question Answering\", \"framework\": \"Hugging Face\", \"functionality\": \"Visual Question Answering\", \"api_name\": \"sheldonxxxx/OFA_model_weights\", \"api_call\": \"AutoModel.from_pretrained('sheldonxxxx/OFA_model_weights')\", \"api_arguments\": \"\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"This is an unoffical mirror of the model weights for use with https://github.com/OFA-Sys/OFA. The original link is too slow when downloading from outside of China.\"}}", "category": "generic"}
{"question_id": 834, "text": " A real estate company wants to extract information from a scan of a property listing. They need a solution to recognize and retrieve critical information from the OCR of the scan.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Document Question Answer\", \"framework\": \"Transformers\", \"functionality\": \"Document Question Answering\", \"api_name\": \"tiny-random-LayoutLMv3ForQuestionAnswering\", \"api_call\": \"LayoutLMv3ForQuestionAnswering.from_pretrained('hf-tiny-model-private/tiny-random-LayoutLMv3ForQuestionAnswering')\", \"api_arguments\": {\"image\": \"path/to/image/file\"}, \"python_environment_requirements\": [\"transformers\", \"torch\", \"tensorflow\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A tiny random LayoutLMv3 model for document question answering. Can be used with the Hugging Face Inference API.\"}}", "category": "generic"}
{"question_id": 835, "text": " We want to utilize the machine learning model for predicting molecular properties in the drug discovery domain.\\n \n Use this API documentation for reference:  {\"domain\": \"Multimodal Graph Machine Learning\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"graphormer-base-pcqm4mv1\", \"api_call\": \"AutoModel.from_pretrained('graphormer-base-pcqm4mv1')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"See the Graph Classification with Transformers tutorial\", \"performance\": {\"dataset\": \"PCQM4M-LSC\", \"accuracy\": \"1st place on the KDD CUP 2021 (quantum prediction track)\"}, \"description\": \"The Graphormer is a graph Transformer model, pretrained on PCQM4M-LSC, and which got 1st place on the KDD CUP 2021 (quantum prediction track). Developed by Microsoft, this model should be used for graph classification tasks or graph representation tasks; the most likely associated task is molecule modeling. It can either be used as such, or finetuned on downstream tasks.\"}}", "category": "generic"}
{"question_id": 836, "text": " We need to estimate the depth of a scene in an image using a pretrained model. Can you please suggest a way?\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221215-095508\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221215-095508')\", \"api_arguments\": null, \"python_environment_requirements\": [\"transformers\"], \"example_code\": null, \"performance\": {\"dataset\": \"DIODE\", \"accuracy\": null}, \"description\": \"A depth estimation model fine-tuned on the DIODE dataset using the GLPN model architecture.\"}}", "category": "generic"}
{"question_id": 837, "text": " Our company is working on an autonomous robot and needs a solution to estimate the depth of objects in its environment.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Depth Estimation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"glpn-nyu-finetuned-diode-221122-082237\", \"api_call\": \"AutoModel.from_pretrained('sayakpaul/glpn-nyu-finetuned-diode-221122-082237')\", \"api_arguments\": \"pretrained_model_name\", \"python_environment_requirements\": \"transformers>=4.24.0, pytorch>=1.12.1, tokenizers>=0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"diode-subset\", \"accuracy\": {\"Loss\": 0.3421, \"Mae\": 0.27, \"Rmse\": 0.4042, \"Abs Rel\": 0.3279, \"Log Mae\": 0.1132, \"Log Rmse\": 0.1688, \"Delta1\": 0.5839, \"Delta2\": 0.8408, \"Delta3\": 0.9309}}, \"description\": \"This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset. It is used for depth estimation tasks.\"}}", "category": "generic"}
{"question_id": 838, "text": " I want to create a video streaming app for plants, in which plants are categorized by species. I need to find the species of plants in an image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/vit-base-patch16-224\", \"api_call\": \"ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-224\", \"from_tf\": \"False\", \"config\": \"None\", \"cache_dir\": \"None\", \"revision\": \"None\", \"use_auth_token\": \"False\"}, \"python_environment_requirements\": {\"transformers\": \"4.0.0\", \"torch\": \"1.9.0\", \"PIL\": \"8.3.2\", \"requests\": \"2.26.0\"}, \"example_code\": {\"1\": \"from transformers import ViTImageProcessor, ViTForImageClassification\", \"2\": \"from PIL import Image\", \"3\": \"import requests\", \"4\": \"url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\", \"5\": \"image = Image.open(requests.get(url, stream=True).raw)\", \"6\": \"processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\", \"7\": \"model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224')\", \"8\": \"inputs = processor(images=image, return_tensors='pt')\", \"9\": \"outputs = model(**inputs)\", \"10\": \"logits = outputs.logits\", \"11\": \"predicted_class_idx = logits.argmax(-1).item()\", \"12\": \"print('Predicted class:', model.config.id2label[predicted_class_idx])\"}, \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al.\"}}", "category": "generic"}
{"question_id": 839, "text": " Develop an image classifier for distinguishing images of cats and dogs.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"google/vit-base-patch16-384\", \"api_call\": \"ViTForImageClassification.from_pretrained('google/vit-base-patch16-384')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"google/vit-base-patch16-384\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import ViTFeatureExtractor, ViTForImageClassification\\nfrom PIL import Image\\nimport requests\\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\\nimage = Image.open(requests.get(url, stream=True).raw)\\nfeature_extractor = ViTFeatureExtractor.from_pretrained('google/vit-base-patch16-384')\\nmodel = ViTForImageClassification.from_pretrained('google/vit-base-patch16-384')\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"ImageNet\", \"accuracy\": \"Refer to tables 2 and 5 of the original paper\"}, \"description\": \"Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 384x384. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al. Images are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds absolute position embeddings before feeding the sequence to the layers of the Transformer encoder.\"}}", "category": "generic"}
{"question_id": 840, "text": " We are building AI glasses that should tell us about things that we are seeing with classifications. We want to use a visual transformer architecture.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"microsoft/swin-tiny-patch4-window7-224\", \"api_call\": \"SwinForImageClassification.from_pretrained('microsoft/swin-tiny-patch4-window7-224')\", \"api_arguments\": {\"images\": \"image\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": {\"transformers\": \"AutoFeatureExtractor\", \"PIL\": \"Image\", \"requests\": \"requests\"}, \"example_code\": \"from transformers import AutoFeatureExtractor, SwinForImageClassification\\nfrom PIL import Image\\nimport requests\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nfeature_extractor = AutoFeatureExtractor.from_pretrained(microsoft/swin-tiny-patch4-window7-224)\\nmodel = SwinForImageClassification.from_pretrained(microsoft/swin-tiny-patch4-window7-224)\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not specified\"}, \"description\": \"Swin Transformer model trained on ImageNet-1k at resolution 224x224. It was introduced in the paper Swin Transformer: Hierarchical Vision Transformer using Shifted Windows by Liu et al. and first released in this repository. The Swin Transformer is a type of Vision Transformer. It builds hierarchical feature maps by merging image patches (shown in gray) in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window (shown in red). It can thus serve as a general-purpose backbone for both image classification and dense recognition tasks.\"}}", "category": "generic"}
{"question_id": 841, "text": " A marketing firm has asked us to build an application to classify social media images into various categories.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"swin-tiny-patch4-window7-224-bottom_cleaned_data\", \"api_call\": \"AutoModelForImageClassification.from_pretrained('microsoft/swin-tiny-patch4-window7-224-bottom_cleaned_data')\", \"api_arguments\": [\"learning_rate\", \"train_batch_size\", \"eval_batch_size\", \"seed\", \"gradient_accumulation_steps\", \"total_train_batch_size\", \"optimizer\", \"lr_scheduler_type\", \"lr_scheduler_warmup_ratio\", \"num_epochs\"], \"python_environment_requirements\": [\"Transformers 4.28.1\", \"Pytorch 2.0.0+cu118\", \"Datasets 2.11.0\", \"Tokenizers 0.13.3\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"imagefolder\", \"accuracy\": 0.9726}, \"description\": \"This model is a fine-tuned version of microsoft/swin-tiny-patch4-window7-224 on the imagefolder dataset.\"}}", "category": "generic"}
{"question_id": 842, "text": " John is a car enthusiast and he wants to build an application that can recognize the car brand in a picture he takes.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Classification\", \"api_name\": \"microsoft/swinv2-tiny-patch4-window8-256\", \"api_call\": \"AutoModelForImageClassification.from_pretrained('microsoft/swinv2-tiny-patch4-window8-256')\", \"api_arguments\": {\"image\": \"http://images.cocodataset.org/val2017/000000039769.jpg\"}, \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\"], \"example_code\": \"from transformers import AutoImageProcessor, AutoModelForImageClassification\\nfrom PIL import Image\\nimport requests\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nprocessor = AutoImageProcessor.from_pretrained(microsoft/swinv2-tiny-patch4-window8-256)\\nmodel = AutoModelForImageClassification.from_pretrained(microsoft/swinv2-tiny-patch4-window8-256)\\ninputs = processor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"imagenet-1k\", \"accuracy\": \"Not provided\"}, \"description\": \"Swin Transformer v2 model pre-trained on ImageNet-1k at resolution 256x256. It was introduced in the paper Swin Transformer V2: Scaling Up Capacity and Resolution by Liu et al. and first released in this repository. The Swin Transformer is a type of Vision Transformer. It builds hierarchical feature maps by merging image patches in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window. Swin Transformer v2 adds 3 main improvements: 1) a residual-post-norm method combined with cosine attention to improve training stability; 2) a log-spaced continuous position bias method to effectively transfer models pre-trained using low-resolution images to downstream tasks with high-resolution inputs; 3) a self-supervised pre-training method, SimMIM, to reduce the needs of vast labeled images.\"}}", "category": "generic"}
{"question_id": 843, "text": " We are building an app to help Counter-Strike: Global Offensive players improve their gameplay. We need to detect players in a live game of CS:GO.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-csgo-player-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-csgo-player-detection')\", \"api_arguments\": {\"image\": \"https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg\"}, \"python_environment_requirements\": \"ultralyticsplus==0.0.23 ultralytics==8.0.21\", \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8m-csgo-player-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"csgo-object-detection\", \"accuracy\": 0.892}, \"description\": \"An object detection model trained to detect Counter-Strike: Global Offensive (CS:GO) players. The model is based on the YOLOv8 architecture and can identify 'ct', 'cthead', 't', and 'thead' labels.\"}}", "category": "generic"}
{"question_id": 844, "text": " The security department needs assistance to detect suspicious objects and people using a zero-shot text-conditioned object detection system.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-base-patch16\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-base-patch16')\", \"api_arguments\": [\"texts\", \"images\"], \"python_environment_requirements\": [\"requests\", \"PIL\", \"torch\", \"transformers\"], \"example_code\": \"processor = OwlViTProcessor.from_pretrained(google/owlvit-base-patch16)\\nmodel = OwlViTForObjectDetection.from_pretrained(google/owlvit-base-patch16)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ntexts = [[a photo of a cat, a photo of a dog]]\\ninputs = processor(text=texts, images=image, return_tensors=pt)\\noutputs = model(**inputs)\\ntarget_sizes = torch.Tensor([image.size[::-1]])\\nresults = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not provided\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. OWL-ViT uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features.\"}}", "category": "generic"}
{"question_id": 845, "text": " As a specialist in computer vision, we need to use the OwlViT model to identify objects in an image described by specific text phrases like \\\"a photo of a cat\\\" and \\\"a photo of a dog.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"zero-shot-object-detection\", \"api_name\": \"google/owlvit-large-patch14\", \"api_call\": \"OwlViTForObjectDetection.from_pretrained('google/owlvit-large-patch14')\", \"api_arguments\": {\"model_name\": \"google/owlvit-large-patch14\"}, \"python_environment_requirements\": [\"torch\", \"transformers\", \"PIL\", \"requests\"], \"example_code\": [\"import requests\", \"from PIL import Image\", \"import torch\", \"from transformers import OwlViTProcessor, OwlViTForObjectDetection\", \"processor = OwlViTProcessor.from_pretrained(google/owlvit-large-patch14)\", \"model = OwlViTForObjectDetection.from_pretrained(google/owlvit-large-patch14)\", \"url = http://images.cocodataset.org/val2017/000000039769.jpg\", \"image = Image.open(requests.get(url, stream=True).raw)\", \"texts = [[a photo of a cat, a photo of a dog]\", \"inputs = processor(text=texts, images=image, return_tensors=pt)\", \"outputs = model(**inputs)\", \"target_sizes = torch.Tensor([image.size[::-1]])\", \"results = processor.post_process(outputs=outputs, target_sizes=target_sizes)\", \"i = 0\", \"text = texts[i]\", \"boxes, scores, labels = results[i][boxes], results[i][scores], results[i][labels]\", \"score_threshold = 0.1\", \"for box, score, label in zip(boxes, scores, labels):\", \" box = [round(i, 2) for i in box.tolist()]\", \" if score >= score_threshold:\", \" print(fDetected {text[label]} with confidence {round(score.item(), 3)} at location {box})\"], \"performance\": {\"dataset\": \"COCO\", \"accuracy\": \"Not specified\"}, \"description\": \"OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. It uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. OWL-ViT is trained on publicly available image-caption data and fine-tuned on publicly available object detection datasets such as COCO and OpenImages.\"}}", "category": "generic"}
{"question_id": 846, "text": " A medical research team requests an automated procedure for detecting blood cells in microscopic images of blood samples. Develop a solution to address this need.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8m-blood-cell-detection\", \"api_call\": \"YOLO('keremberke/yolov8m-blood-cell-detection')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic_nms\": false, \"max_det\": 1000}, \"python_environment_requirements\": [\"ultralyticsplus==0.0.24\", \"ultralytics==8.0.23\"], \"example_code\": [\"from ultralyticsplus import YOLO, render_result\", \"model = YOLO('keremberke/yolov8m-blood-cell-detection')\", \"model.overrides['conf'] = 0.25\", \"model.overrides['iou'] = 0.45\", \"model.overrides['agnostic_nms'] = False\", \"model.overrides['max_det'] = 1000\", \"image = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\", \"results = model.predict(image)\", \"print(results[0].boxes)\", \"render = render_result(model=model, image=image, result=results[0])\", \"render.show()\"], \"performance\": {\"dataset\": \"blood-cell-object-detection\", \"accuracy\": 0.927}, \"description\": \"A YOLOv8 model for blood cell detection, including Platelets, RBC, and WBC. Trained on the blood-cell-object-detection dataset.\"}}", "category": "generic"}
{"question_id": 847, "text": " Our client has a traffic camera system and wants to detect vehicles in the images captured. Implement a solution.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"fcakyon/yolov5s-v7.0\", \"api_call\": \"yolov5.load('fcakyon/yolov5s-v7.0')\", \"api_arguments\": {\"conf\": 0.25, \"iou\": 0.45, \"agnostic\": false, \"multi_label\": false, \"max_det\": 1000, \"img\": \"https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg\", \"size\": 640, \"augment\": true}, \"python_environment_requirements\": \"pip install -U yolov5\", \"example_code\": \"import yolov5\\nmodel = yolov5.load('fcakyon/yolov5s-v7.0')\\nmodel.conf = 0.25\\nmodel.iou = 0.45\\nmodel.agnostic = False\\nmodel.multi_label = False\\nmodel.max_det = 1000\\nimg = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model(img)\\nresults = model(img, size=640)\\nresults = model(img, augment=True)\\npredictions = results.pred[0]\\nboxes = predictions[:, :4]\\nscores = predictions[:, 4]\\ncategories = predictions[:, 5]\\nresults.show()\\nresults.save(save_dir='results/')\", \"performance\": {\"dataset\": \"detection-datasets/coco\", \"accuracy\": null}, \"description\": \"Yolov5s-v7.0 is an object detection model trained on the COCO dataset. It can detect objects in images and return their bounding boxes, scores, and categories.\"}}", "category": "generic"}
{"question_id": 848, "text": " Detect the location of players in an image from a Counter-Strike: Global Offensive (CS:GO) game.\\n###Input: image_path = \\\"path/to/your/csgo_image.jpg\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Object Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Object Detection\", \"api_name\": \"keremberke/yolov8n-csgo-player-detection\", \"api_call\": \"YOLO('keremberke/yolov8n-csgo-player-detection')\", \"api_arguments\": {\"image\": \"URL or local path to image\"}, \"python_environment_requirements\": \"pip install ultralyticsplus==0.0.23 ultralytics==8.0.21\", \"example_code\": \"from ultralyticsplus import YOLO, render_result\\nmodel = YOLO('keremberke/yolov8n-csgo-player-detection')\\nmodel.overrides['conf'] = 0.25\\nmodel.overrides['iou'] = 0.45\\nmodel.overrides['agnostic_nms'] = False\\nmodel.overrides['max_det'] = 1000\\nimage = 'https://github.com/ultralytics/yolov5/raw/master/data/images/zidane.jpg'\\nresults = model.predict(image)\\nprint(results[0].boxes)\\nrender = render_result(model=model, image=image, result=results[0])\\nrender.show()\", \"performance\": {\"dataset\": \"csgo-object-detection\", \"accuracy\": 0.844}, \"description\": \"A YOLOv8 model for detecting Counter-Strike: Global Offensive (CS:GO) players with supported labels: ['ct', 'cthead', 't', 'thead'].\"}}", "category": "generic"}
{"question_id": 849, "text": " Develop a fashion app that segments and identifies clothing items in an uploaded image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Image Segmentation\", \"api_name\": \"mattmdjaga/segformer_b2_clothes\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\", \"api_arguments\": [\"image\"], \"python_environment_requirements\": [\"transformers\", \"PIL\", \"requests\", \"matplotlib\", \"torch\"], \"example_code\": \"from transformers import AutoFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nimport matplotlib.pyplot as plt\\nimport torch.nn as nn\\nextractor = AutoFeatureExtractor.from_pretrained('mattmdjaga/segformer_b2_clothes')\\nmodel = SegformerForSemanticSegmentation.from_pretrained('mattmdjaga/segformer_b2_clothes')\\nurl = 'https://plus.unsplash.com/premium_photo-1673210886161-bfcc40f54d1f?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8cGVyc29uJTIwc3RhbmRpbmd8ZW58MHx8MHx8&amp;w=1000&amp;q=80'\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = extractor(images=image, return_tensors='pt')\\noutputs = model(**inputs)\\nlogits = outputs.logits.cpu()\\nupsampled_logits = nn.functional.interpolate(logits, size=image.size[::-1], mode='bilinear', align_corners=False)\\npred_seg = upsampled_logits.argmax(dim=1)[0]\\nplt.imshow(pred_seg)\", \"performance\": {\"dataset\": \"mattmdjaga/human_parsing_dataset\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on ATR dataset for clothes segmentation.\"}}", "category": "generic"}
{"question_id": 850, "text": " Our team is working on a project to develop autonomous vehicles. We need a model to identify different segments of an image captured from the vehicle's camera.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image Segmentation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Semantic Segmentation\", \"api_name\": \"nvidia/segformer-b5-finetuned-cityscapes-1024-1024\", \"api_call\": \"SegformerForSemanticSegmentation.from_pretrained('nvidia/segformer-b5-finetuned-cityscapes-1024-1024')\", \"api_arguments\": {\"images\": \"image\", \"return_tensors\": \"pt\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\", \"PIL\", \"requests\"]}, \"example_code\": \"from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation\\nfrom PIL import Image\\nimport requests\\nfeature_extractor = SegformerFeatureExtractor.from_pretrained(nvidia/segformer-b5-finetuned-cityscapes-1024-1024)\\nmodel = SegformerForSemanticSegmentation.from_pretrained(nvidia/segformer-b5-finetuned-cityscapes-1024-1024)\\nurl = http://images.cocodataset.org/val2017/000000039769.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\ninputs = feature_extractor(images=image, return_tensors=pt)\\noutputs = model(**inputs)\\nlogits = outputs.logits\", \"performance\": {\"dataset\": \"CityScapes\", \"accuracy\": \"Not provided\"}, \"description\": \"SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 851, "text": " A real estate agency needs an application that can transform the floor plan images into simple straight line drawings, simplifying the visualization of the properties.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face\", \"functionality\": \"ControlNet - M-LSD Straight Line Version\", \"api_name\": \"lllyasviel/sd-controlnet-mlsd\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/sd-controlnet-mlsd')\", \"api_arguments\": {\"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": {\"diffusers\": \"pip install diffusers\", \"transformers\": \"pip install transformers\", \"accelerate\": \"pip install accelerate\", \"controlnet_aux\": \"pip install controlnet_aux\"}, \"example_code\": {\"import\": [\"from PIL import Image\", \"from diffusers import StableDiffusionControlNetPipeline, ControlNetModel, UniPCMultistepScheduler\", \"import torch\", \"from controlnet_aux import MLSDdetector\", \"from diffusers.utils import load_image\"], \"setup\": [\"mlsd = MLSDdetector.from_pretrained('lllyasviel/ControlNet')\", \"image = load_image(https://huggingface.co/lllyasviel/sd-controlnet-mlsd/resolve/main/images/room.png)\", \"image = mlsd(image)\", \"controlnet = ControlNetModel.from_pretrained(lllyasviel/sd-controlnet-mlsd, torch_dtype=torch.float16)\", \"pipe = StableDiffusionControlNetPipeline.from_pretrained(runwayml/stable-diffusion-v1-5, controlnet=controlnet, safety_checker=None, torch_dtype=torch.float16)\", \"pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\"], \"execution\": [\"pipe.enable_xformers_memory_efficient_attention()\", \"pipe.enable_model_cpu_offload()\", \"image = pipe(room, image, num_inference_steps=20).images[0]\", \"image.save('images/room_mlsd_out.png')\"]}, \"performance\": {\"dataset\": \"600k edge-image, caption pairs generated from Places2\", \"accuracy\": \"Not specified\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on M-LSD straight line detection. It can be used in combination with Stable Diffusion.\"}}", "category": "generic"}
{"question_id": 852, "text": " I'm working on creating images of various scenes based on their textual descriptions. The models should also consider the actual positions and poses of the objects in the scenes.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Diffusers\", \"functionality\": \"Text-to-Image Diffusion Models\", \"api_name\": \"lllyasviel/control_v11p_sd15_openpose\", \"api_call\": \"ControlNetModel.from_pretrained('lllyasviel/control_v11p_sd15_openpose')\", \"api_arguments\": {\"checkpoint\": \"lllyasviel/control_v11p_sd15_openpose\", \"torch_dtype\": \"torch.float16\"}, \"python_environment_requirements\": [\"diffusers\", \"transformers\", \"accelerate\", \"controlnet_aux==0.3.0\"], \"example_code\": {\"import_libraries\": [\"import torch\", \"import os\", \"from huggingface_hub import HfApi\", \"from pathlib import Path\", \"from diffusers.utils import load_image\", \"from PIL import Image\", \"import numpy as np\", \"from controlnet_aux import OpenposeDetector\", \"from diffusers import (\", \" ControlNetModel,\", \" StableDiffusionControlNetPipeline,\", \" UniPCMultistepScheduler,\", \")\"], \"load_model\": [\"checkpoint = lllyasviel/control_v11p_sd15_openpose\", \"controlnet = ControlNetModel.from_pretrained(checkpoint, torch_dtype=torch.float16)\"], \"example_usage\": [\"image = load_image(https://huggingface.co/lllyasviel/control_v11p_sd15_openpose/resolve/main/images/input.png)\", \"prompt = chef in the kitchen\", \"processor = OpenposeDetector.from_pretrained('lllyasviel/ControlNet')\", \"control_image = processor(image, hand_and_face=True)\", \"control_image.save(./images/control.png)\", \"pipe = StableDiffusionControlNetPipeline.from_pretrained(\", \" runwayml/stable-diffusion-v1-5, controlnet=controlnet, torch_dtype=torch.float16\", \")\", \"pipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\", \"pipe.enable_model_cpu_offload()\", \"generator = torch.manual_seed(0)\", \"image = pipe(prompt, num_inference_steps=30, generator=generator, image=control_image).images[0]\", \"image.save('images/image_out.png')\"]}, \"performance\": {\"dataset\": \"Not specified\", \"accuracy\": \"Not specified\"}, \"description\": \"ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on openpose images.\"}}", "category": "generic"}
{"question_id": 853, "text": " Develop a new product that uses machine learning to enhance the quality of low-resolution images by upscaling them to twice their size.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Image-to-Image\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"swin2SR-lightweight-x2-64\", \"api_call\": \"Swin2SRForConditionalGeneration.from_pretrained('condef/Swin2SR-lightweight-x2-64').\", \"api_arguments\": \"feature_extractor, model\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"Swin2SR model that upscales images x2. It was introduced in the paper Swin2SR: SwinV2 Transformer for Compressed Image Super-Resolution and Restoration by Conde et al. and first released in this repository. This model is intended for lightweight image super resolution.\"}}", "category": "generic"}
{"question_id": 854, "text": " An animal shelter needs an original cat image for a fundraising event poster. Generate the image.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Unconditional Image Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Denoising Diffusion Probabilistic Models (DDPM)\", \"api_name\": \"google/ddpm-ema-cat-256\", \"api_call\": \"DDPMPipeline.from_pretrained('google/ddpm-ema-cat-256')\", \"api_arguments\": [\"model_id\"], \"python_environment_requirements\": [\"!pip install diffusers\"], \"example_code\": \"from diffusers import DDPMPipeline, DDIMPipeline, PNDMPipeline\\nmodel_id = google/ddpm-ema-cat-256\\nddpm = DDPMPipeline.from_pretrained(model_id)\\nimage = ddpm().images[0]\\nimage.save(ddpm_generated_image.png)\", \"performance\": {\"dataset\": \"CIFAR10\", \"accuracy\": {\"Inception_score\": 9.46, \"FID_score\": 3.17}}, \"description\": \"Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. It can generate high-quality images, and supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm. On the unconditional CIFAR10 dataset, it achieves an Inception score of 9.46 and a state-of-the-art FID score of 3.17.\"}}", "category": "generic"}
{"question_id": 855, "text": " Develop a video content recommendation engine that can understand and generate multiple categories, such as sports, comedy, and news, based on the videos.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base-finetuned-ssv2\", \"api_call\": \"VideoMAEForVideoClassification.from_pretrained('MCG-NJU/videomae-base-finetuned-ssv2')\", \"api_arguments\": \"video\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForVideoClassification\\nimport numpy as np\\nimport torch\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-base-finetuned-ssv2)\\nmodel = VideoMAEForVideoClassification.from_pretrained(MCG-NJU/videomae-base-finetuned-ssv2)\\ninputs = processor(video, return_tensors=pt)\\nwith torch.no_grad():\\n    outputs = model(**inputs)\\n    logits = outputs.logits\\npredicted_class_idx = logits.argmax(-1).item()\\nprint(Predicted class:, model.config.id2label[predicted_class_idx])\", \"performance\": {\"dataset\": \"Something-Something-v2\", \"accuracy\": {\"top-1\": 70.6, \"top-5\": 92.6}}, \"description\": \"VideoMAE model pre-trained for 2400 epochs in a self-supervised way and fine-tuned in a supervised way on Something-Something-v2. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.\"}}", "category": "generic"}
{"question_id": 856, "text": " Our customer is a fitness platform. We need to analyze workout videos for offering customized workout plans.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"MCG-NJU/videomae-base-short\", \"api_call\": \"VideoMAEForPreTraining.from_pretrained('MCG-NJU/videomae-base-short')\", \"api_arguments\": {\"pretrained_model_name_or_path\": \"MCG-NJU/videomae-base-short\"}, \"python_environment_requirements\": {\"packages\": [\"transformers\"]}, \"example_code\": \"from transformers import VideoMAEImageProcessor, VideoMAEForPreTraining\\nimport numpy as np\\nimport torch\\nnum_frames = 16\\nvideo = list(np.random.randn(16, 3, 224, 224))\\nprocessor = VideoMAEImageProcessor.from_pretrained(MCG-NJU/videomae-base-short)\\nmodel = VideoMAEForPreTraining.from_pretrained(MCG-NJU/videomae-base-short)\\npixel_values = processor(video, return_tensors=pt).pixel_values\\nnum_patches_per_frame = (model.config.image_size // model.config.patch_size) ** 2\\nseq_length = (num_frames // model.config.tubelet_size) * num_patches_per_frame\\nbool_masked_pos = torch.randint(0, 2, (1, seq_length)).bool()\\noutputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\\nloss = outputs.loss\", \"performance\": {\"dataset\": \"Kinetics-400\", \"accuracy\": \"Not provided\"}, \"description\": \"VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks.\"}}", "category": "generic"}
{"question_id": 857, "text": " We are a security company and we need a video classification model to analyze CCTV footage for suspicious activities.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Video Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Video Classification\", \"api_name\": \"lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2\", \"api_call\": \"AutoModelForVideoClassification.from_pretrained('lmazzon70/videomae-large-finetuned-kinetics-finetuned-rwf2000-epochs8-batch8-kl-torch2')\", \"api_arguments\": \"video_path\", \"python_environment_requirements\": \"transformers==4.27.4, torch==2.0.0+cu117, datasets==2.11.0, tokenizers==0.13.2\", \"example_code\": \"\", \"performance\": {\"dataset\": \"unknown\", \"accuracy\": 0.7212}, \"description\": \"This model is a fine-tuned version of MCG-NJU/videomae-large-finetuned-kinetics on an unknown dataset.\"}}", "category": "generic"}
{"question_id": 858, "text": " Design a model to classify the following image: a city park with a playground and a lake, surrounded by trees and skyscrapers.\\n \n Use this API documentation for reference:  {\"domain\": \"Computer Vision Zero-Shot Image Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Image Classification\", \"api_name\": \"flax-community/clip-rsicd-v2\", \"api_call\": \"CLIPModel.from_pretrained('flax-community/clip-rsicd-v2')\", \"api_arguments\": {\"text\": [\"a photo of a residential area\", \"a photo of a playground\", \"a photo of a stadium\", \"a photo of a forest\", \"a photo of an airport\"], \"images\": \"image\", \"return_tensors\": \"pt\", \"padding\": \"True\"}, \"python_environment_requirements\": [\"PIL\", \"requests\", \"transformers\"], \"example_code\": \"from PIL import Image\\nimport requests\\nfrom transformers import CLIPProcessor, CLIPModel\\nmodel = CLIPModel.from_pretrained(flax-community/clip-rsicd-v2)\\nprocessor = CLIPProcessor.from_pretrained(flax-community/clip-rsicd-v2)\\nurl = https://raw.githubusercontent.com/arampacha/CLIP-rsicd/master/data/stadium_1.jpg\\nimage = Image.open(requests.get(url, stream=True).raw)\\nlabels = [residential area, playground, stadium, forest, airport]\\ninputs = processor(text=[fa photo of a {l} for l in labels], images=image, return_tensors=pt, padding=True)\\noutputs = model(**inputs)\\nlogits_per_image = outputs.logits_per_image\\nprobs = logits_per_image.softmax(dim=1)\\nfor l, p in zip(labels, probs[0]):\\n print(f{l:&lt;16} {p:.4f})\", \"performance\": {\"dataset\": {\"RSICD\": {\"original CLIP\": {\"k=1\": 0.572, \"k=3\": 0.745, \"k=5\": 0.837, \"k=10\": 0.939}, \"clip-rsicd-v2 (this model)\": {\"k=1\": 0.883, \"k=3\": 0.968, \"k=5\": 0.982, \"k=10\": 0.998}}}}, \"description\": \"This model is a fine-tuned CLIP by OpenAI. It is designed with an aim to improve zero-shot image classification, text-to-image and image-to-image retrieval specifically on remote sensing images.\"}}", "category": "generic"}
{"question_id": 859, "text": " We are integrating a chatbot into our system. We want the chatbot to first detect the language of user input before providing a response.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Transformers\", \"functionality\": \"Language Detection\", \"api_name\": \"papluca/xlm-roberta-base-language-detection\", \"api_call\": \"pipeline('text-classification', model='papluca/xlm-roberta-base-language-detection')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"language_detection('Hello, how are you?')\", \"performance\": {\"dataset\": \"Language Identification\", \"accuracy\": 0.996}, \"description\": \"This model is a fine-tuned version of xlm-roberta-base on the Language Identification dataset. It is an XLM-RoBERTa transformer model with a classification head on top, and can be used as a language detector for sequence classification tasks. It supports 20 languages including Arabic, Bulgarian, German, Greek, English, Spanish, French, Hindi, Italian, Japanese, Dutch, Polish, Portuguese, Russian, Swahili, Thai, Turkish, Urdu, Vietnamese, and Chinese.\"}}", "category": "generic"}
{"question_id": 860, "text": " We have a dataset with customer reviews of our financial service app, and we'd like to analyze their sentiment.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"financial-sentiment-analysis\", \"api_name\": \"ProsusAI/finbert\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('ProsusAI/finbert')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline; classifier = pipeline('sentiment-analysis', model='ProsusAI/finbert'); classifier('your_text_here')\", \"performance\": {\"dataset\": \"Financial PhraseBank\", \"accuracy\": \"Not provided\"}, \"description\": \"FinBERT is a pre-trained NLP model to analyze sentiment of financial text. It is built by further training the BERT language model in the finance domain, using a large financial corpus and thereby fine-tuning it for financial sentiment classification. Financial PhraseBank by Malo et al. (2014) is used for fine-tuning.\"}}", "category": "generic"}
{"question_id": 861, "text": " Our organization sells movies. We need to collect reviews from various platforms to understand the popularity of a movie.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Classification\", \"api_name\": \"lvwerra/distilbert-imdb\", \"api_call\": \"pipeline('sentiment-analysis', model='lvwerra/distilbert-imdb')\", \"api_arguments\": [], \"python_environment_requirements\": [\"transformers\", \"pytorch\"], \"example_code\": \"classifier('I love this movie!')\", \"performance\": {\"dataset\": \"imdb\", \"accuracy\": 0.928}, \"description\": \"This model is a fine-tuned version of distilbert-base-uncased on the imdb dataset. It is used for sentiment analysis on movie reviews and achieves an accuracy of 0.928 on the evaluation set.\"}}", "category": "generic"}
{"question_id": 862, "text": " We want to enhance our search function by improving the ranking of search results.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Information Retrieval\", \"api_name\": \"cross-encoder/ms-marco-MiniLM-L-6-v2\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('cross-encoder/ms-marco-MiniLM-L-6-v2')\", \"api_arguments\": {\"model_name\": \"cross-encoder/ms-marco-MiniLM-L-6-v2\"}, \"python_environment_requirements\": {\"transformers\": \"latest\", \"torch\": \"latest\"}, \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSequenceClassification\\nimport torch\\nmodel = AutoModelForSequenceClassification.from_pretrained('model_name')\\ntokenizer = AutoTokenizer.from_pretrained('model_name')\\nfeatures = tokenizer(['How many people live in Berlin?', 'How many people live in Berlin?'], ['Berlin has a population of 3,520,031 registered inhabitants in an area of 891.82 square kilometers.', 'New York City is famous for the Metropolitan Museum of Art.'], padding=True, truncation=True, return_tensors=pt)\\nmodel.eval()\\nwith torch.no_grad():\\n scores = model(**features).logits\\n print(scores)\", \"performance\": {\"dataset\": \"MS Marco Passage Reranking\", \"accuracy\": \"MRR@10: 39.01%\"}, \"description\": \"This model was trained on the MS Marco Passage Ranking task and can be used for Information Retrieval. Given a query, encode the query with all possible passages, then sort the passages in a decreasing order.\"}}", "category": "generic"}
{"question_id": 863, "text": " We are developing an AI chatbot to interact with users. We need the bot to recognize the user's emotions based on their text input.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"michellejieli/emotion_text_classifier\", \"api_call\": \"pipeline('sentiment-analysis', model='michellejieli/emotion_text_classifier')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"classifier(I love this!)\", \"performance\": {\"dataset\": [\"Crowdflower (2016)\", \"Emotion Dataset, Elvis et al. (2018)\", \"GoEmotions, Demszky et al. (2020)\", \"ISEAR, Vikash (2018)\", \"MELD, Poria et al. (2019)\", \"SemEval-2018, EI-reg, Mohammad et al. (2018)\", \"Emotion Lines (Friends)\"], \"accuracy\": \"Not provided\"}, \"description\": \"DistilRoBERTa-base is a transformer model that performs sentiment analysis. I fine-tuned the model on transcripts from the Friends show with the goal of classifying emotions from text data, specifically dialogue from Netflix shows or movies. The model predicts 6 Ekman emotions and a neutral class. These emotions include anger, disgust, fear, joy, neutrality, sadness, and surprise.\"}}", "category": "generic"}
{"question_id": 864, "text": " Please help me extract the names of people, organizations, and locations mentioned in the given text.\\n###Input: Hello, my name is John Doe, and I work at Microsoft. Tomorrow, I'll be going to a conference in San Francisco.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Named Entity Recognition\", \"api_name\": \"dslim/bert-base-NER\", \"api_call\": \"AutoModelForTokenClassification.from_pretrained('dslim/bert-base-NER')\", \"api_arguments\": {\"model\": \"AutoModelForTokenClassification.from_pretrained(dslim/bert-base-NER)\", \"tokenizer\": \"AutoTokenizer.from_pretrained(dslim/bert-base-NER)\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForTokenClassification\\nfrom transformers import pipeline\\ntokenizer = AutoTokenizer.from_pretrained(dslim/bert-base-NER)\\nmodel = AutoModelForTokenClassification.from_pretrained(dslim/bert-base-NER)\\nnlp = pipeline(ner, model=model, tokenizer=tokenizer)\\nexample = My name is Wolfgang and I live in Berlin\\nner_results = nlp(example)\\nprint(ner_results)\", \"performance\": {\"dataset\": \"conll2003\", \"accuracy\": {\"f1\": 91.3, \"precision\": 90.7, \"recall\": 91.9}}, \"description\": \"bert-base-NER is a fine-tuned BERT model that is ready to use for Named Entity Recognition and achieves state-of-the-art performance for the NER task. It has been trained to recognize four types of entities: location (LOC), organizations (ORG), person (PER) and Miscellaneous (MISC). Specifically, this model is a bert-base-cased model that was fine-tuned on the English version of the standard CoNLL-2003 Named Entity Recognition dataset.\"}}", "category": "generic"}
{"question_id": 865, "text": " The school wants a tool to teach foreign students Chinese grammar. They want you to develop a part-of-speech tagging system to detect the words' grammatical roles.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Token Classification\", \"framework\": \"Transformers\", \"functionality\": \"Part-of-speech tagging\", \"api_name\": \"ckiplab/bert-base-chinese-pos\", \"api_call\": \"AutoModel.from_pretrained('ckiplab/bert-base-chinese-pos')\", \"api_arguments\": {\"tokenizer\": \"BertTokenizerFast.from_pretrained('bert-base-chinese')\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import (\\n  BertTokenizerFast,\\n  AutoModel,\\n)\\ntokenizer = BertTokenizerFast.from_pretrained('bert-base-chinese')\\nmodel = AutoModel.from_pretrained('ckiplab/bert-base-chinese-pos')\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"This project provides traditional Chinese transformers models (including ALBERT, BERT, GPT2) and NLP tools (including word segmentation, part-of-speech tagging, named entity recognition).\"}}", "category": "generic"}
{"question_id": 866, "text": " Our company collects data on the salesperson performance in different regions for each month. We want to use the most suitable API from our subscribed_huggingface.co to analyze that in specific table format and then based on provided question, answer accordingly.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"google/tapas-base-finetuned-wtq\", \"api_call\": \"TapasForQuestionAnswering.from_pretrained('google/tapas-base-finetuned-wtq')\", \"api_arguments\": {\"model_name\": \"google/tapas-base-finetuned-wtq\"}, \"python_environment_requirements\": {\"transformers\": \"4.12.0\"}, \"example_code\": \"from transformers import TapasTokenizer, TapasForQuestionAnswering\\nmodel = TapasForQuestionAnswering.from_pretrained('google/tapas-base-finetuned-wtq')\\ntokenizer = TapasTokenizer.from_pretrained('google/tapas-base-finetuned-wtq')\", \"performance\": {\"dataset\": \"wikitablequestions\", \"accuracy\": 0.4638}, \"description\": \"TAPAS base model fine-tuned on WikiTable Questions (WTQ). This model is pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion, and then fine-tuned on SQA, WikiSQL, and finally WTQ. It can be used for answering questions related to a table.\"}}", "category": "generic"}
{"question_id": 867, "text": " Assist me in finding the accurate information in a table related to the Korean stock market.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"dsba-lab/koreapas-finetuned-korwikitq\", \"api_call\": \"pipeline('table-question-answering', model='dsba-lab/koreapas-finetuned-korwikitq')\", \"api_arguments\": {}, \"python_environment_requirements\": {\"transformers\": \">=4.0.0\"}, \"example_code\": \"from transformers import pipeline; table_qa = pipeline('table-question-answering', model='dsba-lab/koreapas-finetuned-korwikitq'); table_qa(table=table, query='\\uc9c8\\ubb38')\", \"performance\": {\"dataset\": \"korwikitq\", \"accuracy\": null}, \"description\": \"A Korean Table Question Answering model finetuned on the korwikitq dataset.\"}}", "category": "generic"}
{"question_id": 868, "text": " My company has a large data table of employees, containing their names, titles, departments, and hire dates. We need a tool that can find all employees with the title of \\\"Software Engineer\\\" hired in 2020.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"microsoft/tapex-large-sql-execution\", \"api_call\": \"BartForConditionalGeneration.from_pretrained('microsoft/tapex-large-sql-execution')\", \"api_arguments\": {\"table\": \"pd.DataFrame\", \"query\": \"str\"}, \"python_environment_requirements\": [\"transformers\", \"pandas\"], \"example_code\": \"from transformers import TapexTokenizer, BartForConditionalGeneration\\nimport pandas as pd\\ntokenizer = TapexTokenizer.from_pretrained(microsoft/tapex-large-sql-execution)\\nmodel = BartForConditionalGeneration.from_pretrained(microsoft/tapex-large-sql-execution)\\ndata = {\\n year: [1896, 1900, 1904, 2004, 2008, 2012],\\n city: [athens, paris, st. louis, athens, beijing, london]\\n}\\ntable = pd.DataFrame.from_dict(data)\\nquery = select year where city = beijing\\nencoding = tokenizer(table=table, query=query, return_tensors=pt)\\noutputs = model.generate(**encoding)\\nprint(tokenizer.batch_decode(outputs, skip_special_tokens=True))\", \"performance\": {\"dataset\": \"synthetic corpus\", \"accuracy\": \"not specified\"}, \"description\": \"TAPEX (Table Pre-training via Execution) is a conceptually simple and empirically powerful pre-training approach to empower existing models with table reasoning skills. TAPEX realizes table pre-training by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries. TAPEX is based on the BART architecture, the transformer encoder-encoder (seq2seq) model with a bidirectional (BERT-like) encoder and an autoregressive (GPT-like) decoder.\"}}", "category": "generic"}
{"question_id": 869, "text": " We received a business document in French. We need to extract some specific information from it. \\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Multilingual Question Answering\", \"api_name\": \"mrm8488/bert-multi-cased-finetuned-xquadv1\", \"api_call\": \"pipeline('question-answering', model='mrm8488/bert-multi-cased-finetuned-xquadv1', tokenizer='mrm8488/bert-multi-cased-finetuned-xquadv1')\", \"api_arguments\": {\"context\": \"string\", \"question\": \"string\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"qa_pipeline({\\n 'context': Manuel Romero has been working hardly in the repository hugginface/transformers lately,\\n 'question': Who has been working hard for hugginface/transformers lately?\\n})\", \"performance\": {\"dataset\": \"XQuAD\", \"accuracy\": \"Not provided\"}, \"description\": \"This model is a BERT (base-multilingual-cased) fine-tuned for multilingual Question Answering on 11 different languages using the XQuAD dataset and additional data augmentation techniques.\"}}", "category": "generic"}
{"question_id": 870, "text": " We have a coffee shop with different types of coffee on the menu. Determine the caffeine levels in each cup of coffee.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Table Question Answering\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Table Question Answering\", \"api_name\": \"navteca/tapas-large-finetuned-wtq\", \"api_call\": \"AutoModelForTableQuestionAnswering.from_pretrained('navteca/tapas-large-finetuned-wtq')\", \"api_arguments\": {\"table\": \"table_data\", \"query\": \"query\"}, \"python_environment_requirements\": {\"transformers\": \"AutoModelForTableQuestionAnswering, AutoTokenizer, pipeline\"}, \"example_code\": \"from transformers import AutoModelForTableQuestionAnswering, AutoTokenizer, pipeline\\n# Load model & tokenizer\\ntapas_model = AutoModelForTableQuestionAnswering.from_pretrained('navteca/tapas-large-finetuned-wtq')\\ntapas_tokenizer = AutoTokenizer.from_pretrained('navteca/tapas-large-finetuned-wtq')\\n# Get predictions\\nnlp = pipeline('table-question-answering', model=tapas_model, tokenizer=tapas_tokenizer)\\nresult = nlp({'table': {'Repository': ['Transformers', 'Datasets', 'Tokenizers'], 'Stars': ['36542', '4512', '3934'], 'Contributors': ['651', '77', '34'], 'Programming language': ['Python', 'Python', 'Rust, Python and NodeJS']}, 'query': 'How many stars does the transformers repository have?'})\\nprint(result)\", \"performance\": {\"dataset\": \"wikisql\", \"accuracy\": \"Not provided\"}, \"description\": \"TAPAS large model fine-tuned on WikiTable Questions (WTQ). It is a BERT-like transformers model pretrained on a large corpus of English data from Wikipedia in a self-supervised fashion. It can be used for answering questions related to a table.\"}}", "category": "generic"}
{"question_id": 871, "text": " You are the head of the QA department and you want to create an application that extracts answers from large product manuals. Explain how you can use this API for the project.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bert-large-uncased-whole-word-masking-squad2\", \"api_call\": \"pipeline('question-answering', model=AutoModel.from_pretrained('deepset/bert-large-uncased-whole-word-masking-squad2'), tokenizer=AutoTokenizer.from_pretrained('deepset/bert-large-uncased-whole-word-masking-squad2'))\", \"api_arguments\": {\"model_name\": \"deepset/bert-large-uncased-whole-word-masking-squad2\", \"tokenizer\": \"deepset/bert-large-uncased-whole-word-masking-squad2\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"QA_input = {\\n 'question': 'Why is model conversion important?',\\n 'context': 'The option to convert models between FARM and transformers gives freedom to the user and let people easily switch between frameworks.'\\n}\\nres = nlp(QA_input)\", \"performance\": {\"dataset\": \"squad_v2\", \"accuracy\": {\"Exact Match\": 80.885, \"F1\": 83.876}}, \"description\": \"This is a bert-large model, fine-tuned using the SQuAD2.0 dataset for the task of question answering. It is designed for extractive question answering and supports English language.\"}}", "category": "generic"}
{"question_id": 872, "text": " I want to have a personal assistant app that can answer questions from a given text.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"distilbert-base-cased-distilled-squad\", \"api_call\": \"DistilBertForQuestionAnswering.from_pretrained('distilbert-base-cased-distilled-squad')\", \"api_arguments\": [\"question\", \"context\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\nquestion_answerer = pipeline(question-answering, model='distilbert-base-cased-distilled-squad')\\ncontext = r\\n... Extractive Question Answering is the task of extracting an answer from a text given a question. An example of a\\n... question answering dataset is the SQuAD dataset, which is entirely based on that task. If you would like to fine-tune\\n... a model on a SQuAD task, you may leverage the examples/pytorch/question-answering/run_squad.py script.\\n... \\nresult = question_answerer(question=What is a good example of a question answering dataset?, context=context)\\nprint(\\n... fAnswer: '{result['answer']}', score: {round(result['score'], 4)}, start: {result['start']}, end: {result['end']}\\n...)\", \"performance\": {\"dataset\": \"SQuAD v1.1\", \"accuracy\": {\"Exact Match\": 79.6, \"F1\": 86.996}}, \"description\": \"DistilBERT base cased distilled SQuAD is a fine-tuned checkpoint of DistilBERT-base-cased, trained using knowledge distillation on SQuAD v1.1 dataset. It has 40% less parameters than bert-base-uncased, runs 60% faster while preserving over 95% of BERT's performances as measured on the GLUE language understanding benchmark. This model can be used for question answering.\"}}", "category": "generic"}
{"question_id": 873, "text": " I want to build a tool that helps me answer questions about specific information in a Korean newspaper article.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"monologg/koelectra-small-v2-distilled-korquad-384\", \"api_call\": \"pipeline('question-answering', model='monologg/koelectra-small-v2-distilled-korquad-384')\", \"api_arguments\": {\"model\": \"monologg/koelectra-small-v2-distilled-korquad-384\"}, \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"nlp(question='your_question', context='your_context')\", \"performance\": {\"dataset\": \"KorQuAD\", \"accuracy\": \"Not provided\"}, \"description\": \"A Korean Question Answering model based on Electra and trained on the KorQuAD dataset.\"}}", "category": "generic"}
{"question_id": 874, "text": " Develop a tool to help our team members find answers to essential questions from a long document.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Question Answering\", \"framework\": \"Transformers\", \"functionality\": \"Question Answering\", \"api_name\": \"bert-large-cased-whole-word-masking-finetuned-squad\", \"api_call\": \"AutoModel.from_pretrained('bert-large-cased-whole-word-masking-finetuned-squad')\", \"api_arguments\": {\"model_name_or_path\": \"bert-large-cased-whole-word-masking\", \"dataset_name\": \"squad\", \"do_train\": true, \"do_eval\": true, \"learning_rate\": 3e-05, \"num_train_epochs\": 2, \"max_seq_length\": 384, \"doc_stride\": 128, \"output_dir\": \"./examples/models/wwm_cased_finetuned_squad/\", \"per_device_eval_batch_size\": 3, \"per_device_train_batch_size\": 3}, \"python_environment_requirements\": [\"torch\", \"transformers\"], \"example_code\": \"from transformers import pipeline\\nqa_pipeline = pipeline('question-answering', model='bert-large-cased-whole-word-masking-finetuned-squad')\\nresult = qa_pipeline({'context': 'This is a context example.', 'question': 'What is this example for?'})\\nprint(result)\", \"performance\": {\"dataset\": [{\"name\": \"BookCorpus\", \"accuracy\": \"N/A\"}, {\"name\": \"English Wikipedia\", \"accuracy\": \"N/A\"}]}, \"description\": \"BERT large model (cased) whole word masking finetuned on SQuAD. This model is cased and trained with a new technique: Whole Word Masking. After pre-training, this model was fine-tuned on the SQuAD dataset.\"}}", "category": "generic"}
{"question_id": 875, "text": " There is a news article stating, \\\"Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU.\\\" We need to determine which category this article should fall under.\\n###Input: Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-nli-2mil7\", \"api_call\": \"AutoModelForSequenceClassification.from_pretrained('MoritzLaurer/DeBERTa-v3-xsmall-mnli-fever-anli-ling-binary')\", \"api_arguments\": {\"sequence_to_classify\": \"Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU\", \"candidate_labels\": [\"politics\", \"economy\", \"entertainment\", \"environment\"], \"multi_label\": false}, \"python_environment_requirements\": [\"transformers==4.13\"], \"example_code\": \"from transformers import pipeline\\nclassifier = pipeline(zero-shot-classification, model=MoritzLaurer/mDeBERTa-v3-base-mnli-xnli)\\nsequence_to_classify = Angela Merkel ist eine Politikerin in Deutschland und Vorsitzende der CDU\\ncandidate_labels = [politics, economy, entertainment, environment]\\noutput = classifier(sequence_to_classify, candidate_labels, multi_label=False)\\nprint(output)\", \"performance\": {\"dataset\": [{\"name\": \"MultiNLI-matched\", \"accuracy\": 0.857}, {\"name\": \"MultiNLI-mismatched\", \"accuracy\": 0.856}, {\"name\": \"ANLI-all\", \"accuracy\": 0.537}, {\"name\": \"ANLI-r3\", \"accuracy\": 0.497}, {\"name\": \"WANLI\", \"accuracy\": 0.732}, {\"name\": \"LingNLI\", \"accuracy\": 0.788}, {\"name\": \"fever-nli\", \"accuracy\": 0.761}]}, \"description\": \"This multilingual model can perform natural language inference (NLI) on 100 languages and is therefore also suitable for multilingual zero-shot classification. The underlying mDeBERTa-v3-base model was pre-trained by Microsoft on the CC100 multilingual dataset with 100 languages. The model was then fine-tuned on the XNLI dataset and on the multilingual-NLI-26lang-2mil7 dataset. Both datasets contain more than 2.7 million hypothesis-premise pairs in 27 languages spoken by more than 4 billion people.\"}}", "category": "generic"}
{"question_id": 876, "text": " We have generated user reviews for movies. We need to check user opinions about the movie 'Inception' based on their reviews.\\n###Input: The movie 'Inception' is an exceptional piece of cinematic art. The storyline is thought-provoking and keeps the audience engaged till the end. The special effects are breathtaking and complement the plot perfectly.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Zero-Shot Classification\", \"framework\": \"Transformers\", \"functionality\": \"Zero-Shot Classification\", \"api_name\": \"valhalla/distilbart-mnli-12-6\", \"api_call\": \"pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\", \"api_arguments\": \"text, candidate_labels\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nnlp = pipeline('zero-shot-classification', model='valhalla/distilbart-mnli-12-6')\\nresult = nlp('The movie was great!', ['positive', 'negative'])\\nprint(result)\", \"performance\": {\"dataset\": \"MNLI\", \"accuracy\": {\"matched_acc\": \"89.19\", \"mismatched_acc\": \"89.01\"}}, \"description\": \"distilbart-mnli is the distilled version of bart-large-mnli created using the No Teacher Distillation technique proposed for BART summarisation by Huggingface. It is designed for zero-shot classification tasks.\"}}", "category": "generic"}
{"question_id": 877, "text": " In our new app, we are building a feature that recommends books in different languages. To do this, first, we need to translate the book title and details from English to French. Help us to decide the best translation model to use here.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face\", \"functionality\": \"Translation\", \"api_name\": \"Helsinki-NLP/opus-mt-en-fr\", \"api_call\": \"translate('input_text', model='Helsinki-NLP/opus-mt-en-fr')\", \"api_arguments\": [\"input_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newsdiscussdev2015-enfr.en.fr\": 33.8, \"newsdiscusstest2015-enfr.en.fr\": 40.0, \"newssyscomb2009.en.fr\": 29.8, \"news-test2008.en.fr\": 27.5, \"newstest2009.en.fr\": 29.4, \"newstest2010.en.fr\": 32.7, \"newstest2011.en.fr\": 34.3, \"newstest2012.en.fr\": 31.8, \"newstest2013.en.fr\": 33.2, \"Tatoeba.en.fr\": 50.5}}}, \"description\": \"Helsinki-NLP/opus-mt-en-fr is a translation model that translates English text to French using the Hugging Face Transformers library. It is based on the OPUS dataset and uses a transformer-align architecture with normalization and SentencePiece pre-processing.\"}}", "category": "generic"}
{"question_id": 878, "text": " Our multinational company is dealing with a French client. Please help us communicate in French by translating an English sentence into French.\\n###Input: \\\"Hello, how are you?\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-fr-en\", \"api_call\": \"pipeline('translation_fr_to_en', model='Helsinki-NLP/opus-mt-fr-en')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"translation_pipeline('Bonjour, comment \\u00e7a va?')\", \"performance\": {\"dataset\": \"opus\", \"accuracy\": {\"BLEU\": {\"newsdiscussdev2015-enfr.fr.en\": 33.1, \"newsdiscusstest2015-enfr.fr.en\": 38.7, \"newssyscomb2009.fr.en\": 30.3, \"news-test2008.fr.en\": 26.2, \"newstest2009.fr.en\": 30.2, \"newstest2010.fr.en\": 32.2, \"newstest2011.fr.en\": 33.0, \"newstest2012.fr.en\": 32.8, \"newstest2013.fr.en\": 33.9, \"newstest2014-fren.fr.en\": 37.8, \"Tatoeba.fr.en\": 57.5}}}, \"description\": \"Helsinki-NLP/opus-mt-fr-en is a machine translation model trained to translate from French to English. It is based on the Marian NMT framework and trained on the OPUS dataset.\"}}", "category": "generic"}
{"question_id": 879, "text": " We want to communicate product information to online customers. Translate the information from English to French.\\n###Input: \\\"Introducing the new eco-friendly water bottle made of high-quality stainless steel with double-wall insulation to keep your drinks cool for 24 hours or hot for 12 hours.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation, Summarization, Question Answering, Sentiment Analysis\", \"api_name\": \"t5-3b\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('t5-3b')\", \"api_arguments\": \"input_text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"input_text = 'translate English to French: The quick brown fox jumps over the lazy dog'; inputs = tokenizer.encode(input_text, return_tensors='pt'); outputs = model.generate(inputs); translated_text = tokenizer.decode(outputs[0])\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"See research paper, Table 14\"}, \"description\": \"T5-3B is a Text-To-Text Transfer Transformer (T5) model with 3 billion parameters. It is designed for various NLP tasks such as translation, summarization, question answering, and sentiment analysis. The model is pre-trained on the Colossal Clean Crawled Corpus (C4) and fine-tuned on multiple supervised and unsupervised tasks.\"}}", "category": "generic"}
{"question_id": 880, "text": " Our Customer is a Swedish travel magazine with an English version. Translate this Swedish text to English for them: \\\"Stockholm \\u00e4r Sveriges huvudstad och st\\u00f6rsta stad. Den har en rik historia och erbjuder m\\u00e5nga kulturella och historiska sev\\u00e4rdheter.\\\"\\n###Input: \\\"Stockholm \\u00e4r Sveriges huvudstad och st\\u00f6rsta stad. Den har en rik historia och erbjuder m\\u00e5nga kulturella och historiska sev\\u00e4rdheter.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Translation\", \"api_name\": \"opus-mt-sv-en\", \"api_call\": \"AutoModel.from_pretrained('Helsinki-NLP/opus-mt-sv-en').\", \"api_arguments\": [\"inputs\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Tatoeba.sv.en\", \"accuracy\": \"BLEU: 64.5, chr-F: 0.763\"}, \"description\": \"A Swedish to English translation model trained on the OPUS dataset using the transformer-align architecture. The model is pre-processed with normalization and SentencePiece.\"}}", "category": "generic"}
{"question_id": 881, "text": " I have written a small story in English about the adventures of a superhero who saves the day from evil villains. I would like to translate it into French so that my friends in France can read it too.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Translation\", \"framework\": \"Transformers\", \"functionality\": \"Text-to-Text Generation\", \"api_name\": \"optimum/t5-small\", \"api_call\": \"ORTModelForSeq2SeqLM.from_pretrained('optimum/t5-small')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"transformers\", \"optimum.onnxruntime\"], \"example_code\": \"from transformers import AutoTokenizer, pipeline\\nfrom optimum.onnxruntime import ORTModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(optimum/t5-small)\\nmodel = ORTModelForSeq2SeqLM.from_pretrained(optimum/t5-small)\\ntranslator = pipeline(translation_en_to_fr, model=model, tokenizer=tokenizer)\\nresults = translator(My name is Eustache and I have a pet raccoon)\\nprint(results)\", \"performance\": {\"dataset\": \"c4\", \"accuracy\": \"N/A\"}, \"description\": \"T5 is an encoder-decoder model pre-trained on a multi-task mixture of unsupervised and supervised tasks and for which each task is converted into a text-to-text format. It can be used for translation, text-to-text generation, and summarization.\"}}", "category": "generic"}
{"question_id": 882, "text": " Create an application that reads news articles and provides a brief summary of the article contents.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"text2text-generation\", \"api_name\": \"google/pegasus-cnn_dailymail\", \"api_call\": \"PegasusForConditionalGeneration.from_pretrained('google/pegasus-cnn_dailymail')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import PegasusForConditionalGeneration, PegasusTokenizer\\nmodel_name = 'google/pegasus-cnn_dailymail'\\ntokenizer = PegasusTokenizer.from_pretrained(model_name)\\nmodel = PegasusForConditionalGeneration.from_pretrained(model_name)\\ninputs = tokenizer.encode('input_text', return_tensors='pt')\\nsummary_ids = model.generate(inputs)\\nsummary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\", \"performance\": {\"dataset\": \"cnn_dailymail\", \"accuracy\": \"44.16/21.56/41.30\"}, \"description\": \"PEGASUS model for abstractive summarization, pretrained on the CNN/DailyMail dataset.\"}}", "category": "generic"}
{"question_id": 883, "text": " We are building a platform for developers and want to provide automatic code documentation generation for Python functions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Summarization\", \"framework\": \"Transformers\", \"functionality\": \"Code Documentation Generation\", \"api_name\": \"code_trans_t5_base_code_documentation_generation_python\", \"api_call\": \"AutoModelWithLMHead.from_pretrained('SEBIS/code_trans_t5_base_code_documentation_generation_python')\", \"api_arguments\": [\"tokenized_code\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelWithLMHead, SummarizationPipeline\\npipeline = SummarizationPipeline(\\n model=AutoModelWithLMHead.from_pretrained(SEBIS/code_trans_t5_base_code_documentation_generation_python),\\n tokenizer=AutoTokenizer.from_pretrained(SEBIS/code_trans_t5_base_code_documentation_generation_python, skip_special_tokens=True),\\n device=0\\n)\\ntokenized_code = def e ( message , exit_code = None ) : print_log ( message , YELLOW , BOLD ) if exit_code is not None : sys . exit ( exit_code )\\npipeline([tokenized_code])\", \"performance\": {\"dataset\": \"CodeSearchNet Corpus python dataset\", \"accuracy\": \"20.26 BLEU score\"}, \"description\": \"This CodeTrans model is based on the t5-base model and is trained on tokenized python code functions. It can be used to generate descriptions for python functions or be fine-tuned on other python code tasks. The model works best with tokenized python functions but can also be used on unparsed and untokenized python code.\"}}", "category": "generic"}
{"question_id": 884, "text": " In order to engage our users and keep them interested in our platform, we require a conversational chatbot that discusses a wide range of topics.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"facebook/blenderbot-3B\", \"api_call\": \"BlenderbotForConditionalGeneration.from_pretrained('facebook/blenderbot-3B')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"Input a message to start chatting with facebook/blenderbot-3B.\", \"performance\": {\"dataset\": \"blended_skill_talk\", \"accuracy\": \"Not provided\"}, \"description\": \"BlenderBot-3B is a large-scale neural model designed for open-domain chatbot applications. It is trained on the blended_skill_talk dataset and can engage in multi-turn conversations, providing engaging talking points, asking and answering questions, and displaying knowledge, empathy, and personality. The model is available through the Hugging Face Transformers library.\"}}", "category": "generic"}
{"question_id": 885, "text": " Use this API to get a suggestion on how to respond to a customer's complaint about the late delivery of their package.\\n###Input: {\\\"instruction\\\": \\\"How can I respond to a customer complaint about late delivery?\\\", \\\"knowledge\\\": \\\"The courier had external delays due to bad winter weather.\\\", \\\"dialog\\\": [\\\"Customer: My package is late. What's going on?\\\", \\\"Support: I apologize for the inconvenience. I'll check what's happening with the package and get back to you.\\\"]}\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Conversational\", \"api_name\": \"microsoft/GODEL-v1_1-base-seq2seq\", \"api_call\": \"AutoModelForSeq2SeqLM.from_pretrained('microsoft/GODEL-v1_1-base-seq2seq')\", \"api_arguments\": [\"instruction\", \"knowledge\", \"dialog\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import AutoTokenizer, AutoModelForSeq2SeqLM\\ntokenizer = AutoTokenizer.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\nmodel = AutoModelForSeq2SeqLM.from_pretrained(microsoft/GODEL-v1_1-base-seq2seq)\\ndef generate(instruction, knowledge, dialog):\\n if knowledge != '':\\n knowledge = '[KNOWLEDGE] ' + knowledge\\n dialog = ' EOS '.join(dialog)\\n query = f{instruction} [CONTEXT] {dialog} {knowledge}\\n input_ids = tokenizer(f{query}, return_tensors=pt).input_ids\\n outputs = model.generate(input_ids, max_length=128, min_length=8, top_p=0.9, do_sample=True)\\n output = tokenizer.decode(outputs[0], skip_special_tokens=True)\\n return output\", \"performance\": {\"dataset\": \"Reddit discussion thread, instruction and knowledge grounded dialogs\", \"accuracy\": \"N/A\"}, \"description\": \"GODEL is a large-scale pre-trained model for goal-directed dialogs. It is parameterized with a Transformer-based encoder-decoder model and trained for response generation grounded in external text, which allows more effective fine-tuning on dialog tasks that require conditioning the response on information that is external to the current conversation (e.g., a retrieved document). The pre-trained model can be efficiently fine-tuned and adapted to accomplish a new dialog task with a handful of task-specific dialogs. The v1.1 model is trained on 551M multi-turn dialogs from Reddit discussion thread, and 5M instruction and knowledge grounded dialogs.\"}}", "category": "generic"}
{"question_id": 886, "text": " A game studio is now creating a story for their new action game, they need a hint for creating the setting of the game.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"bigscience/bloom-7b1\", \"api_call\": \"pipeline('text-generation', model='bigscience/bloom-7b1') should be changed to TextGenerationPipeline(model=Bloom7b1Model.from_pretrained('bigscience/bloom-7b1')).\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"from transformers import pipeline\\nmodel = pipeline('text-generation', model='bigscience/bloom-7b1')\\nresult = model('Once upon a time')\\nprint(result)\", \"performance\": {\"dataset\": \"Training Data\", \"accuracy\": {\"Training Loss\": 2.3, \"Validation Loss\": 2.9, \"Perplexity\": 16}}, \"description\": \"BigScience Large Open-science Open-access Multilingual Language Model (BLOOM) is a transformer-based language model designed for text generation and as a pretrained base model for fine-tuning on specific tasks. It supports 48 languages and has 7,069,016,064 parameters. The model is trained on a diverse corpus containing 45 natural languages, 12 programming languages, and 1.5TB of pre-processed text.\"}}", "category": "generic"}
{"question_id": 887, "text": " We are working on an AI chatbot for customer support and we need our chatbot to generate human-like responses to customers' questions.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Text Generation\", \"api_name\": \"facebook/opt-350m\", \"api_call\": \"pipeline('text-generation', model='facebook/opt-350m')\", \"api_arguments\": {\"model\": \"facebook/opt-350m\", \"do_sample\": \"True\", \"num_return_sequences\": 5}, \"python_environment_requirements\": {\"transformers\": \"4.3.0\"}, \"example_code\": \"from transformers import pipeline, set_seed\\nset_seed(32)\\ngenerator = pipeline('text-generation', model='facebook/opt-350m', do_sample=True, num_return_sequences=5)\\ngenerator('The man worked as a')\", \"performance\": {\"dataset\": \"BookCorpus, CC-Stories, The Pile, Pushshift.io Reddit, CCNewsV2\", \"accuracy\": \"Roughly matches GPT-3 performance\"}, \"description\": \"OPT (Open Pre-trained Transformer) is a suite of decoder-only pre-trained transformers ranging from 125M to 175B parameters, developed by Meta AI. It is designed to enable reproducible and responsible research at scale and bring more voices to the table in studying the impact of large language models. The pretrained-only model can be used for prompting for evaluation of downstream tasks as well as text generation. It can also be fine-tuned on a downstream task using the CLM example.\"}}", "category": "generic"}
{"question_id": 888, "text": " Translate the following English sentence to German: \\\"I have a doctor's appointment tomorrow morning.\\\"\\n###Input: \\\"I have a doctor's appointment tomorrow morning.\\\"\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Language model\", \"api_name\": \"google/flan-t5-large\", \"api_call\": \"T5ForConditionalGeneration.from_pretrained('google/flan-t5-large')\", \"api_arguments\": [\"input_text\", \"input_ids\", \"outputs\"], \"python_environment_requirements\": [\"transformers\", \"torch\"], \"example_code\": \"from transformers import T5Tokenizer, T5ForConditionalGeneration\\ntokenizer = T5Tokenizer.from_pretrained(google/flan-t5-large)\\nmodel = T5ForConditionalGeneration.from_pretrained(google/flan-t5-large)\\ninput_text = translate English to German: How old are you?\\ninput_ids = tokenizer(input_text, return_tensors=pt).input_ids\\noutputs = model.generate(input_ids)\\nprint(tokenizer.decode(outputs[0]))\", \"performance\": {\"dataset\": [{\"name\": \"MMLU\", \"accuracy\": \"75.2%\"}]}, \"description\": \"FLAN-T5 large is a language model fine-tuned on over 1000 tasks and multiple languages. It achieves state-of-the-art performance on several benchmarks, including 75.2% on five-shot MMLU. The model is based on pretrained T5 and fine-tuned with instructions for better zero-shot and few-shot performance. It can be used for research on language models, zero-shot NLP tasks, in-context few-shot learning NLP tasks, reasoning, question answering, and advancing fairness and safety research.\"}}", "category": "generic"}
{"question_id": 889, "text": " I am struggling with grammar while writing. Thus, I want to create a grammar correction tool for myself.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Grammar Synthesis\", \"api_name\": \"pszemraj/flan-t5-large-grammar-synthesis\", \"api_call\": \"pipeline('text2text-generation', 'pszemraj/flan-t5-large-grammar-synthesis')\", \"api_arguments\": [\"raw_text\"], \"python_environment_requirements\": [\"transformers\"], \"example_code\": \"from transformers import pipeline\\ncorrector = pipeline(\\n 'text2text-generation',\\n 'pszemraj/flan-t5-large-grammar-synthesis',\\n )\\nraw_text = 'i can has cheezburger'\\nresults = corrector(raw_text)\\nprint(results)\", \"performance\": {\"dataset\": \"jfleg\", \"accuracy\": \"Not provided\"}, \"description\": \"A fine-tuned version of google/flan-t5-large for grammar correction on an expanded version of the JFLEG dataset.\"}}", "category": "generic"}
{"question_id": 890, "text": " Our company is cooperating with a German partner. We have some materials in English, but need to translate them into German.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Text2Text Generation\", \"framework\": \"Transformers\", \"functionality\": \"Multilingual Sequence-to-Sequence\", \"api_name\": \"facebook/mbart-large-50\", \"api_call\": \"MBartForConditionalGeneration.from_pretrained('facebook/mbart-large-50')\", \"api_arguments\": {\"src_lang\": \"en_XX\", \"tgt_lang\": \"ro_RO\"}, \"python_environment_requirements\": {\"transformers\": \"MBartForConditionalGeneration, MBart50TokenizerFast\"}, \"example_code\": \"from transformers import MBartForConditionalGeneration, MBart50TokenizerFast\\nmodel = MBartForConditionalGeneration.from_pretrained('facebook/mbart-large-50')\\ntokenizer = MBart50TokenizerFast.from_pretrained('facebook/mbart-large-50', src_lang='en_XX', tgt_lang='ro_RO')\\nsrc_text = ' UN Chief Says There Is No Military Solution in Syria'\\ntgt_text = '\\u015eeful ONU declar\\u0103 c\\u0103 nu exist\\u0103 o solu\\u0163ie militar\\u0103 \\u00een Siria'\\nmodel_inputs = tokenizer(src_text, return_tensors='pt')\\nwith tokenizer.as_target_tokenizer():\\n labels = tokenizer(tgt_text, return_tensors='pt').input_ids\\nmodel(**model_inputs, labels=labels)\", \"performance\": {\"dataset\": \"Multilingual Denoising Pretraining\", \"accuracy\": \"Not specified\"}, \"description\": \"mBART-50 is a multilingual Sequence-to-Sequence model pre-trained using the 'Multilingual Denoising Pretraining' objective. It was introduced in Multilingual Translation with Extensible Multilingual Pretraining and Finetuning paper.\"}}", "category": "generic"}
{"question_id": 891, "text": " The publisher has sent us a draft of an article, but some of the words have been masked. We need to identify the masked words.\\n###Input: \\\"<mask> are large, slow-moving reptiles native to the southeastern United States. They are well-adapted to life in <mask>, and they are a common sight in swamps, rivers, and lakes.\\\" \\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"xlm-roberta-large\", \"api_call\": \"pipeline('fill-mask', model='xlm-roberta-large')\", \"api_arguments\": {\"model\": \"xlm-roberta-large\"}, \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='xlm-roberta-large')\\nunmasker(Hello I'm a <mask> model.)\", \"performance\": {\"dataset\": \"CommonCrawl\", \"accuracy\": \"N/A\"}, \"description\": \"XLM-RoBERTa is a multilingual version of RoBERTa pre-trained on 2.5TB of filtered CommonCrawl data containing 100 languages. It is designed for masked language modeling and can be fine-tuned on downstream tasks such as sequence classification, token classification, or question answering.\"}}", "category": "generic"}
{"question_id": 892, "text": " Our company is exploring the Chinese market and we need to communicate effectively with our clients. Help me create a generic Chinese response.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Masked Language Modeling\", \"api_name\": \"bert-base-chinese\", \"api_call\": \"AutoModelForMaskedLM.from_pretrained('bert-base-chinese')\", \"api_arguments\": {\"pretrained_model_name\": \"bert-base-chinese\"}, \"python_environment_requirements\": {\"transformers\": \"from transformers import AutoTokenizer, AutoModelForMaskedLM\"}, \"example_code\": \"tokenizer = AutoTokenizer.from_pretrained(bert-base-chinese)\\nmodel = AutoModelForMaskedLM.from_pretrained(bert-base-chinese)\", \"performance\": {\"dataset\": \"[More Information Needed]\", \"accuracy\": \"[More Information Needed]\"}, \"description\": \"This model has been pre-trained for Chinese, training and random input masking has been applied independently to word pieces (as in the original BERT paper). It can be used for masked language modeling.\"}}", "category": "generic"}
{"question_id": 893, "text": " We are an educational platform improving student writing skills. We need a program that can fill in the blanks in sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Fill-Mask\", \"framework\": \"Transformers\", \"functionality\": \"Masked Language Modeling and Next Sentence Prediction\", \"api_name\": \"bert-large-uncased\", \"api_call\": \"pipeline('fill-mask', model='bert-large-uncased')\", \"api_arguments\": \"text\", \"python_environment_requirements\": \"transformers\", \"example_code\": \"from transformers import pipeline\\nunmasker = pipeline('fill-mask', model='bert-large-uncased')\\nunmasker(Hello I'm a [MASK] model.)\", \"performance\": {\"dataset\": {\"SQUAD 1.1 F1/EM\": \"91.0/84.3\", \"Multi NLI Accuracy\": \"86.05\"}}, \"description\": \"BERT large model (uncased) is a transformer model pretrained on a large corpus of English data using a masked language modeling (MLM) objective. It has 24 layers, 1024 hidden dimensions, 16 attention heads, and 336M parameters. The model is intended to be fine-tuned on a downstream task, such as sequence classification, token classification, or question answering.\"}}", "category": "generic"}
{"question_id": 894, "text": " I am building a plagiarism-detection tool. I need to evaluate the similarity between two sentences.\\n \n Use this API documentation for reference:  {\"domain\": \"Natural Language Processing Sentence Similarity\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Sentence Transformers\", \"api_name\": \"sentence-transformers/all-MiniLM-L12-v2\", \"api_call\": \"SentenceTransformer('sentence-transformers/all-MiniLM-L12-v2')\", \"api_arguments\": [\"sentences\"], \"python_environment_requirements\": \"pip install -U sentence-transformers\", \"example_code\": \"from sentence_transformers import SentenceTransformer\\nsentences = [This is an example sentence, Each sentence is converted]\\nmodel = SentenceTransformer('sentence-transformers/all-MiniLM-L12-v2')\\nembeddings = model.encode(sentences)\\nprint(embeddings)\", \"performance\": {\"dataset\": \"1,170,060,424 training pairs\", \"accuracy\": \"Not provided\"}, \"description\": \"This is a sentence-transformers model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\"}}", "category": "generic"}
{"question_id": 895, "text": " We are working on creating an audiobook. Convert this text: \\\"The sun was shining brightly, and the birds were singing sweetly\\\" into speech.\\n###Input: The sun was shining brightly, and the birds were singing sweetly.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Text-to-Speech\", \"framework\": \"SpeechBrain\", \"functionality\": \"Text-to-Speech\", \"api_name\": \"speechbrain/tts-tacotron2-ljspeech\", \"api_call\": \"Tacotron2.from_hparams(source='speechbrain/tts-tacotron2-ljspeech')\", \"api_arguments\": [\"text\"], \"python_environment_requirements\": [\"speechbrain\"], \"example_code\": [\"import torchaudio\", \"from speechbrain.pretrained import Tacotron2\", \"from speechbrain.pretrained import HIFIGAN\", \"tacotron2 = Tacotron2.from_hparams(source=speechbrain/tts-tacotron2-ljspeech, savedir=tmpdir_tts)\", \"hifi_gan = HIFIGAN.from_hparams(source=speechbrain/tts-hifigan-ljspeech, savedir=tmpdir_vocoder)\", \"mel_output, mel_length, alignment = tacotron2.encode_text(Mary had a little lamb)\", \"waveforms = hifi_gan.decode_batch(mel_output)\", \"torchaudio.save('example_TTS.wav',waveforms.squeeze(1), 22050)\"], \"performance\": {\"dataset\": \"LJSpeech\", \"accuracy\": \"Not specified\"}, \"description\": \"This repository provides all the necessary tools for Text-to-Speech (TTS) with SpeechBrain using a Tacotron2 pretrained on LJSpeech. The pre-trained model takes in input a short text and produces a spectrogram in output. One can get the final waveform by applying a vocoder (e.g., HiFIGAN) on top of the generated spectrogram.\"}}", "category": "generic"}
{"question_id": 896, "text": " A researcher needs information about how to use the Whisper ASR model to transcribe and analyze the sentiment of an audio file.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Automatic Speech Recognition and Speech Translation\", \"api_name\": \"openai/whisper-large-v2\", \"api_call\": \"WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')\", \"api_arguments\": {\"forced_decoder_ids\": \"WhisperProcessor.get_decoder_prompt_ids(language='english', task='transcribe')\"}, \"python_environment_requirements\": [\"transformers\", \"datasets\"], \"example_code\": [\"from transformers import WhisperProcessor, WhisperForConditionalGeneration\", \"from datasets import load_dataset\", \"processor = WhisperProcessor.from_pretrained('openai/whisper-large-v2')\", \"model = WhisperForConditionalGeneration.from_pretrained('openai/whisper-large-v2')\", \"model.config.forced_decoder_ids = None\", \"ds = load_dataset('hf-internal-testing/librispeech_asr_dummy', 'clean', split='validation')\", \"sample = ds[0]['audio']\", \"input_features = processor(sample['array'], sampling_rate=sample['sampling_rate'], return_tensors='pt').input_features\", \"predicted_ids = model.generate(input_features)\", \"transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\"], \"performance\": {\"dataset\": \"LibriSpeech test-clean\", \"accuracy\": 3.0003583080317573}, \"description\": \"Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning.\"}}", "category": "generic"}
{"question_id": 897, "text": " I recently interviewed a person in Japanese. I need to transcribe the interview in order to find relevant quotes for my article.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Recognition\", \"api_name\": \"jonatasgrosman/wav2vec2-large-xlsr-53-japanese\", \"api_call\": \"SpeechRecognitionModel('jonatasgrosman/wav2vec2-large-xlsr-53-japanese')\", \"api_arguments\": [\"audio_paths\"], \"python_environment_requirements\": [\"huggingsound\", \"torch\", \"librosa\", \"datasets\", \"transformers\"], \"example_code\": \"from huggingsound import SpeechRecognitionModel\\nmodel = SpeechRecognitionModel(jonatasgrosman/wav2vec2-large-xlsr-53-japanese)\\naudio_paths = [/path/to/file.mp3, /path/to/another_file.wav]\\ntranscriptions = model.transcribe(audio_paths)\", \"performance\": {\"dataset\": \"common_voice\", \"accuracy\": {\"WER\": 81.8, \"CER\": 20.16}}, \"description\": \"Fine-tuned XLSR-53 large model for speech recognition in Japanese. Trained on Common Voice 6.1, CSS10, and JSUT datasets. Make sure your speech input is sampled at 16kHz.\"}}", "category": "generic"}
{"question_id": 898, "text": " Our startup produces a podcast editing software. We need to convert speech to text automatically for transcription purposes.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Automatic Speech Recognition\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"wav2vec2\", \"api_name\": \"facebook/wav2vec2-large-960h-lv60-self\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('facebook/wav2vec2-large-960h-lv60-self')\", \"api_arguments\": [\"model_name\"], \"python_environment_requirements\": [\"transformers\", \"datasets\", \"torch\", \"jiwer\"], \"example_code\": \"from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC\\nfrom datasets import load_dataset\\nimport torch\\nprocessor = Wav2Vec2Processor.from_pretrained(facebook/wav2vec2-large-960h-lv60-self)\\nmodel = Wav2Vec2ForCTC.from_pretrained(facebook/wav2vec2-large-960h-lv60-self)\\nds = load_dataset(patrickvonplaten/librispeech_asr_dummy, clean, split=validation)\\ninput_values = processor(ds[0][audio][array], return_tensors=pt, padding=longest).input_values\\nlogits = model(input_values).logits\\npredicted_ids = torch.argmax(logits, dim=-1)\\ntranscription = processor.batch_decode(predicted_ids)\", \"performance\": {\"dataset\": \"librispeech_asr\", \"accuracy\": {\"clean\": 1.9, \"other\": 3.9}}, \"description\": \"Facebook's Wav2Vec2 model pretrained and fine-tuned on 960 hours of Libri-Light and Librispeech on 16kHz sampled speech audio. The model was trained with Self-Training objective. The model is used for Automatic Speech Recognition and can be used as a standalone acoustic model.\"}}", "category": "generic"}
{"question_id": 899, "text": " Lately, the quality of our audio has degraded due to background noise, and our robot needs to process speech to understand voice commands. Please help.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"speechbrain/mtl-mimic-voicebank\", \"api_call\": \"WaveformEnhancement.from_hparams('speechbrain/mtl-mimic-voicebank', 'pretrained_models/mtl-mimic-voicebank')\", \"api_arguments\": [\"source\", \"savedir\"], \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"import torchaudio\\nfrom speechbrain.pretrained import WaveformEnhancement\\nenhance_model = WaveformEnhancement.from_hparams(\\n source=speechbrain/mtl-mimic-voicebank,\\n savedir=pretrained_models/mtl-mimic-voicebank,\\n)\\nenhanced = enhance_model.enhance_file(speechbrain/mtl-mimic-voicebank/example.wav)\\ntorchaudio.save('enhanced.wav', enhanced.unsqueeze(0).cpu(), 16000)\", \"performance\": {\"dataset\": \"Voicebank\", \"accuracy\": {\"Test PESQ\": 3.05, \"Test COVL\": 3.74, \"Valid WER\": 2.89, \"Test WER\": 2.8}}, \"description\": \"This repository provides all the necessary tools to perform enhancement and\\nrobust ASR training (EN) within\\nSpeechBrain. For a better experience we encourage you to learn more about\\nSpeechBrain. The model performance is:\\nRelease\\nTest PESQ\\nTest COVL\\nValid WER\\nTest WER\\n22-06-21\\n3.05\\n3.74\\n2.89\\n2.80\\nWorks with SpeechBrain v0.5.12\"}}", "category": "generic"}
{"question_id": 900, "text": " Create a recommendation engine for a podcast platform that enhances the audio quality of low-quality recordings before recommending it to users seeking high-quality content.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Enhancement\", \"api_name\": \"speechbrain/sepformer-wham16k-enhancement\", \"api_call\": \"separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\", \"api_arguments\": {\"path\": \"path to the input audio file\"}, \"python_environment_requirements\": \"pip install speechbrain\", \"example_code\": \"from speechbrain.pretrained import SepformerSeparation as separator\\nimport torchaudio\\nmodel = separator.from_hparams(source=speechbrain/sepformer-wham16k-enhancement, savedir='pretrained_models/sepformer-wham16k-enhancement')\\nest_sources = model.separate_file(path='speechbrain/sepformer-wham16k-enhancement/example_wham16k.wav')\\ntorchaudio.save(enhanced_wham16k.wav, est_sources[:, :, 0].detach().cpu(), 16000)\", \"performance\": {\"dataset\": \"WHAM!\", \"accuracy\": {\"Test-Set SI-SNR\": \"14.3 dB\", \"Test-Set PESQ\": \"2.20\"}}, \"description\": \"This repository provides all the necessary tools to perform speech enhancement (denoising) with a SepFormer model, implemented with SpeechBrain, and pretrained on WHAM! dataset with 16k sampling frequency, which is basically a version of WSJ0-Mix dataset with environmental noise and reverberation in 8k.\"}}", "category": "generic"}
{"question_id": 901, "text": " Create a system that translates and synthesizes speech from one language to another using the given model.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Fairseq\", \"functionality\": \"Speech-to-speech translation\", \"api_name\": \"xm_transformer_unity_hk-en\", \"api_call\": \"load_model_ensemble_and_task_from_hf_hub('facebook/xm_transformer_unity_hk-en')\", \"api_arguments\": {\"config_yaml\": \"config.yaml\", \"task\": \"speech_to_text\", \"cache_dir\": \"cache_dir\"}, \"python_environment_requirements\": [\"fairseq\", \"torchaudio\", \"huggingface_hub\"], \"example_code\": \"import json\\nimport os\\nfrom pathlib import Path\\nimport IPython.display as ipd\\nfrom fairseq import hub_utils\\nfrom fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\\nfrom fairseq.models.speech_to_text.hub_interface import S2THubInterface\\nfrom fairseq.models.text_to_speech import CodeHiFiGANVocoder\\nfrom fairseq.models.text_to_speech.hub_interface import VocoderHubInterface\\nfrom huggingface_hub import snapshot_download\\nimport torchaudio\\ncache_dir = os.getenv(HUGGINGFACE_HUB_CACHE)\\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\\n facebook/xm_transformer_unity_hk-en,\\n arg_overrides={config_yaml: config.yaml, task: speech_to_text},\\n cache_dir=cache_dir,\\n)\\nmodel = models[0].cpu()\\ncfg[task].cpu = True\\ngenerator = task.build_generator([model], cfg)\\naudio, _ = torchaudio.load(/path/to/an/audio/file)\\nsample = S2THubInterface.get_model_input(task, audio)\\nunit = S2THubInterface.get_prediction(task, model, generator, sample)\\nlibrary_name = fairseq\\ncache_dir = (\\n cache_dir or (Path.home() / .cache / library_name).as_posix()\\n)\\ncache_dir = snapshot_download(\\n ffacebook/unit_hifigan_mhubert_vp_en_es_fr_it3_400k_layer11_km1000_lj_dur, cache_dir=cache_dir, library_name=library_name\\n)\\nx = hub_utils.from_pretrained(\\n cache_dir,\\n model.pt,\\n .,\\n archive_map=CodeHiFiGANVocoder.hub_models(),\\n config_yaml=config.json,\\n fp16=False,\\n is_vocoder=True,\\n)\\nwith open(f{x['args']['data']}/config.json) as f:\\n vocoder_cfg = json.load(f)\\nassert (\\n len(x[args][model_path]) == 1\\n), Too many vocoder models in the input\\nvocoder = CodeHiFiGANVocoder(x[args][model_path][0], vocoder_cfg)\\ntts_model = VocoderHubInterface(vocoder_cfg, vocoder)\\ntts_sample = tts_model.get_model_input(unit)\\nwav, sr = tts_model.get_prediction(tts_sample)\\nipd.Audio(wav, rate=sr)\", \"performance\": {\"dataset\": [\"TED\", \"drama\", \"TAT\"], \"accuracy\": \"Not specified\"}, \"description\": \"A speech-to-speech translation model with two-pass decoder (UnitY) trained on Hokkien-English data from TED, drama, and TAT domains. It uses Facebook's Unit HiFiGAN for speech synthesis.\"}}", "category": "generic"}
{"question_id": 902, "text": " I have a single channel audio recording containing the voices of two speakers very close, and I would like to separate the voices in this audio recording.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio-to-Audio\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Asteroid\", \"api_name\": \"ConvTasNet_Libri2Mix_sepclean_8k\", \"api_call\": \"hf_hub_download(repo_id='JorisCos/ConvTasNet_Libri2Mix_sepclean_8k')\", \"api_arguments\": [\"repo_id\", \"filename\"], \"python_environment_requirements\": [\"huggingface_hub\"], \"example_code\": \"\", \"performance\": {\"dataset\": \"Libri2Mix\", \"accuracy\": {\"si_sdr\": 14.764543634468069, \"si_sdr_imp\": 14.764029375607246, \"sdr\": 15.29337970745095, \"sdr_imp\": 15.114146605113111, \"sir\": 24.092904661115366, \"sir_imp\": 23.913669683141528, \"sar\": 16.06055906916849, \"sar_imp\": -51.980784441287454, \"stoi\": 0.9311142440593033, \"stoi_imp\": 0.21817376142710482}}, \"description\": \"This model was trained by Joris Cosentino using the librimix recipe in Asteroid. It was trained on the sep_clean task of the Libri2Mix dataset.\"}}", "category": "generic"}
{"question_id": 903, "text": " We are building an app to improve people's public speaking skills. We want to analyze their emotional speech as feedback.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Speech Emotion Recognition\", \"api_name\": \"ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition\", \"api_call\": \"Wav2Vec2ForCTC.from_pretrained('ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition')\", \"api_arguments\": \"wav2vec2, tokenizer\", \"python_environment_requirements\": \"transformers 4.8.2, pytorch 1.9.0+cu102, datasets 1.9.0, tokenizers 0.10.3\", \"example_code\": \"from transformers import Wav2Vec2ForCTC, Wav2Vec2Processor\", \"performance\": {\"dataset\": \"RAVDESS\", \"accuracy\": 0.8223}, \"description\": \"The model is a fine-tuned version of jonatasgrosman/wav2vec2-large-xlsr-53-english for a Speech Emotion Recognition (SER) task. The dataset used to fine-tune the original pre-trained model is the RAVDESS dataset. This dataset provides 1440 samples of recordings from actors performing on 8 different emotions in English, which are: emotions = ['angry', 'calm', 'disgust', 'fearful', 'happy', 'neutral', 'sad', 'surprised'].\"}}", "category": "generic"}
{"question_id": 904, "text": " A psychology company is building a revolutionary means to detect emotions of its clients. Help them create a system to understand emotions from spoken words.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"PyTorch Transformers\", \"functionality\": \"Emotion Recognition\", \"api_name\": \"superb/wav2vec2-base-superb-er\", \"api_call\": \"pipeline('audio-classification', model='superb/wav2vec2-base-superb-er')\", \"api_arguments\": [\"file\", \"top_k\"], \"python_environment_requirements\": [\"datasets\", \"transformers\", \"torch\", \"librosa\"], \"example_code\": \"from datasets import load_dataset\\nfrom transformers import pipeline\\ndataset = load_dataset(anton-l/superb_demo, er, split=session1)\\nclassifier = pipeline(audio-classification, model=superb/wav2vec2-base-superb-er)\\nlabels = classifier(dataset[0][file], top_k=5)\", \"performance\": {\"dataset\": \"IEMOCAP\", \"accuracy\": 0.6258}, \"description\": \"This is a ported version of S3PRL's Wav2Vec2 for the SUPERB Emotion Recognition task. The base model is wav2vec2-base, which is pretrained on 16kHz sampled speech audio. When using the model make sure that your speech input is also sampled at 16Khz. For more information refer to SUPERB: Speech processing Universal PERformance Benchmark.\"}}", "category": "generic"}
{"question_id": 905, "text": " We are a company manufacturing AI-based toothbrushes for children. We want to analyze the emotion of children while they brush their teeth.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Audio Classification\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Transformers\", \"api_name\": \"wav2vec2-xlsr-53-russian-emotion-recognition\", \"api_call\": \"Wav2Vec2Model.from_pretrained('facebook/wav2vec2-large-xlsr-53')\", \"api_arguments\": {\"path\": \"/path/to/russian_audio_speech.wav\", \"sampling_rate\": 16000}, \"python_environment_requirements\": [\"torch\", \"torchaudio\", \"transformers\", \"librosa\", \"numpy\"], \"example_code\": \"result = predict('/path/to/russian_audio_speech.wav', 16000)\\nprint(result)\", \"performance\": {\"dataset\": \"Russian Emotional Speech Dialogs\", \"accuracy\": \"72%\"}, \"description\": \"A model trained to recognize emotions in Russian speech using wav2vec2. It can classify emotions such as anger, disgust, enthusiasm, fear, happiness, neutral, and sadness.\"}}", "category": "generic"}
{"question_id": 906, "text": " I am a hearing impaired individual who relies on technology to lead a qualitative life. Develop an application that measures noise levels in the environment to help me decide if it's suitable for communication.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face Transformers\", \"functionality\": \"Voice Activity Detection, Speech-to-Noise Ratio, and C50 Room Acoustics Estimation\", \"api_name\": \"pyannote/brouhaha\", \"api_call\": \"Model.from_pretrained('pyannote/brouhaha', use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": [\"audio.wav\"], \"python_environment_requirements\": [\"pyannote-audio\", \"brouhaha-vad\"], \"example_code\": [\"from pyannote.audio import Model\", \"model = Model.from_pretrained(pyannote/brouhaha, use_auth_token=ACCESS_TOKEN_GOES_HERE)\", \"from pyannote.audio import Inference\", \"inference = Inference(model)\", \"output = inference(audio.wav)\", \"for frame, (vad, snr, c50) in output:\", \"  t = frame.middle\", \"  print(f{t:8.3f} vad={100*vad:.0f}% snr={snr:.0f} c50={c50:.0f})\"], \"performance\": {\"dataset\": \"LibriSpeech, AudioSet, EchoThief, MIT-Acoustical-Reverberation-Scene\", \"accuracy\": \"Not provided\"}, \"description\": \"Brouhaha is a joint voice activity detection, speech-to-noise ratio, and C50 room acoustics estimation model. It is based on the PyTorch framework and uses the pyannote.audio library.\"}}", "category": "generic"}
{"question_id": 907, "text": " Can you classify the audio clip to determine whether it is silent or contains speech?\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"Hugging Face\", \"functionality\": \"Voice Activity Detection\", \"api_name\": \"Eklavya/ZFF_VAD\", \"api_call\": \"pipeline('voice-activity-detection', model='Eklavya/ZFF_VAD')\", \"api_arguments\": \"N/A\", \"python_environment_requirements\": \"transformers, torch\", \"example_code\": \"N/A\", \"performance\": {\"dataset\": \"N/A\", \"accuracy\": \"N/A\"}, \"description\": \"A Voice Activity Detection model by Eklavya, using the Hugging Face framework.\"}}", "category": "generic"}
{"question_id": 908, "text": " I need to predict digit categories based on some tabular data inputs. I need a pretrained model to use for classification.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Scikit-learn\", \"functionality\": \"Joblib\", \"api_name\": \"julien-c/skops-digits\", \"api_call\": \"load('path_to_folder/sklearn_model.joblib')\", \"api_arguments\": {\"activation\": \"relu\", \"alpha\": 0.0001, \"batch_size\": \"auto\", \"beta_1\": 0.9, \"beta_2\": 0.999, \"early_stopping\": \"False\", \"epsilon\": 1e-08, \"hidden_layer_sizes\": \"(100,)\", \"learning_rate\": \"constant\", \"learning_rate_init\": 0.001, \"max_fun\": 15000, \"max_iter\": 200, \"momentum\": 0.9, \"n_iter_no_change\": 10, \"nesterovs_momentum\": \"True\", \"power_t\": 0.5, \"random_state\": null, \"shuffle\": \"True\", \"solver\": \"adam\", \"tol\": 0.0001, \"validation_fraction\": 0.1, \"verbose\": \"False\", \"warm_start\": \"False\"}, \"python_environment_requirements\": \"scikit-learn, joblib\", \"example_code\": \"This model can be loaded on the Inference API on-demand.\", \"performance\": {\"dataset\": null, \"accuracy\": null}, \"description\": \"A tabular classification model using the Scikit-learn framework and Joblib functionality. The model is trained with various hyperparameters and can be used for classification tasks.\"}}", "category": "generic"}
{"question_id": 909, "text": " In surveillance operations, transcripts are used to turn the audio feed into chunks such that after processing transcripts there are no speakers talking over each other in the output.\\n \n Use this API documentation for reference:  {\"domain\": \"Audio Voice Activity Detection\", \"framework\": \"pyannote.audio\", \"functionality\": \"Speaker diarization\", \"api_name\": \"johnislarry/cloned-pyannote-speaker-diarization-endpoint\", \"api_call\": \"Pipeline.from_pretrained('pyannote/speaker-diarization@2.1',use_auth_token='ACCESS_TOKEN_GOES_HERE')\", \"api_arguments\": [\"num_speakers\", \"min_speakers\", \"max_speakers\", \"segmentation_onset\"], \"python_environment_requirements\": \"pyannote.audio 2.0\", \"example_code\": {\"load_pipeline\": \"from pyannote.audio import Pipeline\\npipeline = Pipeline.from_pretrained(pyannote/speaker-diarization@2022.07)\", \"apply_pipeline\": \"diarization = pipeline(audio.wav)\", \"save_output\": \"with open(audio.rttm, w) as rttm:\\n  diarization.write_rttm(rttm)\"}, \"performance\": {\"dataset\": [{\"name\": \"AISHELL-4\", \"accuracy\": {\"DER%\": 14.61, \"FA%\": 3.31, \"Miss%\": 4.35, \"Conf%\": 6.95}}, {\"name\": \"AMI Mix-Headset only_words\", \"accuracy\": {\"DER%\": 18.21, \"FA%\": 3.28, \"Miss%\": 11.07, \"Conf%\": 3.87}}, {\"name\": \"AMI Array1-01 only_words\", \"accuracy\": {\"DER%\": 29.0, \"FA%\": 2.71, \"Miss%\": 21.61, \"Conf%\": 4.68}}, {\"name\": \"CALLHOME Part2\", \"accuracy\": {\"DER%\": 30.24, \"FA%\": 3.71, \"Miss%\": 16.86, \"Conf%\": 9.66}}, {\"name\": \"DIHARD 3 Full\", \"accuracy\": {\"DER%\": 20.99, \"FA%\": 4.25, \"Miss%\": 10.74, \"Conf%\": 6.0}}, {\"name\": \"REPERE Phase 2\", \"accuracy\": {\"DER%\": 12.62, \"FA%\": 1.55, \"Miss%\": 3.3, \"Conf%\": 7.76}}, {\"name\": \"VoxConverse v0.0.2\", \"accuracy\": {\"DER%\": 12.76, \"FA%\": 3.45, \"Miss%\": 3.85, \"Conf%\": 5.46}}]}, \"description\": \"This API provides speaker diarization functionality using the pyannote.audio framework. It is capable of processing audio files and outputting speaker diarization results in RTTM format. The API supports providing the number of speakers, minimum and maximum number of speakers, and adjusting the segmentation onset threshold.\"}}", "category": "generic"}
{"question_id": 910, "text": " I work at GreenTech, a startup that provides eco-friendly solutions, and need to determine if a given set of input data will result in high carbon emissions or not.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Classification\", \"framework\": \"Joblib\", \"functionality\": \"Carbon Emissions\", \"api_name\": \"jwan2021/autotrain-jwan-autotrain1-1768961489\", \"api_call\": \"joblib.load('model.joblib')\", \"api_arguments\": [\"data\"], \"python_environment_requirements\": [\"json\", \"joblib\", \"pandas\"], \"example_code\": \"import json\\nimport joblib\\nimport pandas as pd\\nmodel = joblib.load('model.joblib')\\nconfig = json.load(open('config.json'))\\nfeatures = config['features']\\ndata = pd.read_csv('data.csv')\\ndata = data[features]\\ndata.columns = ['feat_' + str(col) for col in data.columns]\\npredictions = model.predict(data)\", \"performance\": {\"dataset\": \"Validation Metrics\", \"accuracy\": 0.983}, \"description\": \"Binary Classification model for Carbon Emissions prediction\"}}", "category": "generic"}
{"question_id": 911, "text": " Can you figure a way to predict electricity consumption? We need to better allocate resources.\\n \n Use this API documentation for reference:  {\"domain\": \"Tabular Tabular Regression\", \"framework\": \"Scikit-learn\", \"functionality\": \"skops\", \"api_name\": \"rajistics/MAPIE-TS-Electricity\", \"api_call\": \"RandomForestRegressor(max_depth=10, n_estimators=50, random_state=59)\", \"api_arguments\": {\"bootstrap\": \"True\", \"ccp_alpha\": \"0.0\", \"criterion\": \"squared_error\", \"max_depth\": \"10\", \"max_features\": \"1.0\", \"max_leaf_nodes\": \"\", \"max_samples\": \"\", \"min_impurity_decrease\": \"0.0\", \"min_samples_leaf\": \"1\", \"min_samples_split\": \"2\", \"min_weight_fraction_leaf\": \"0.0\", \"n_estimators\": \"50\", \"n_jobs\": \"\", \"oob_score\": \"False\", \"random_state\": \"59\", \"verbose\": \"0\", \"warm_start\": \"False\"}, \"python_environment_requirements\": \"\", \"example_code\": \"\", \"performance\": {\"dataset\": \"\", \"accuracy\": \"\"}, \"description\": \"A RandomForestRegressor model for electricity consumption prediction.\"}}", "category": "generic"}
