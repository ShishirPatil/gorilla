{"domain": "Text language model", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1')", "api_arguments": ["model_url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embed = hub.load('https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1')\nembeddings = embed(['cat is on the mat', 'dog is in the fog'])", "performance": {"dataset": "Google News", "accuracy": "20 dimensions"}, "description": "A pre-trained text language model that generates embeddings for input text using TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3])\n])\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature extraction model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v3_small_100_224", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5')", "api_arguments": {"input_image": "A 224x224x3 image tensor", "output_feature_vector": "A 1x1024 feature vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5')\n\nimage = tf.zeros([1, 224, 224, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "65.4%"}, "description": "A pre-trained image feature vector model using MobileNetV3 architecture on ImageNet dataset with small model size and 100% target accuracy."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generate feature vectors for images", "api_name": "imagenet_mobilenet_v3_large_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/feature_vector/5')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/feature_vector/5', input_shape=(224, 224, 3), output_shape=(1280,))\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Generate feature vector\nfeature_vector = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "75.3%"}, "description": "This API provides a pre-trained image feature vector model, MobileNetV3-Large, from TensorFlow Hub. The model is trained on the ImageNet dataset and can be used to generate feature vectors for images of size 224x224 with 3 channels."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using a pre-trained model", "api_name": "mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "input_shape": "IMAGE_SHAPE+(3,)"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nIMAGE_SHAPE = (224, 224)\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', input_shape=IMAGE_SHAPE+(3,))\n])\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=IMAGE_SHAPE)\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nresult = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "MobileNetV2 is a pre-trained image classification model that can classify images into 1000 different categories. It is lightweight and optimized for mobile devices."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.5.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   trainable=False),  # Can be True, see below.\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A compact representation of MobileNetV2 model trained on ImageNet dataset for extracting image features using TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": [{"model_id": "string (URL or local path to the model)"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5'\nmodel = hub.load(model_id)\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Classify the image\npredictions = model(image_array)\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]\nprint('Predicted class:', predicted_class)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained model for image classification using TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text input"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "model = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                 input_shape=(224,224,3), output_shape=(1280,))\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for extracting feature vectors from images, using TensorFlow Hub."}
{"domain": "Image Frame Interpolation", "framework": "TensorFlow Hub", "functionality": "Generate intermediate frames between two input frames", "api_name": "image-frame-interpolation", "api_call": "hub.load('https://tfhub.dev/google/two-frame-vgg/1')", "api_arguments": {"inputs": "A list of two input frames"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\ninputs = [frame1, frame2]\ninterpolated_frame = hub.load('https://tfhub.dev/google/two-frame-vgg/1').call(inputs)", "performance": {"dataset": "Adobe240fps", "accuracy": "PSNR: 29.8 dB, SSIM: 0.902"}, "description": "This model generates intermediate frames between two input frames using a deep learning approach. It is useful for video frame rate up-conversion and slow motion generation."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generate feature vectors from images", "api_name": "image_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4')\nimage_tensor = tf.zeros([1, 224, 224, 3])\nfeature_vector = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on TensorFlow Hub. It generates feature vectors from input images for various applications like image classification, object detection, and image similarity."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "list of sentences"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['sentence1', 'sentence2'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various natural language processing tasks. It is pre-trained on a variety of data sources and can be fine-tuned for specific tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "imagenet_mobilenet_v1_050_160_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v1_050_160/classification/4')", "api_arguments": "URL", "python_environment_requirements": "tensorflow, tensorflow-hub", "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Loads a pre-trained MobileNet V1 model for image classification from TensorFlow Hub"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'Greetings, humans!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "A pre-trained model for embedding text into high-dimensional vectors that can be used in various natural language processing tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"image_size": 224, "input_shape": [224, 224, 3], "output_shape": [1280]}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3))\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\n# Extract feature vector\nfeature_vector = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture and trained on ImageNet dataset. It can be used for feature extraction and fine-tuning on new classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input: A tensor of strings", "output: A tensor of shape (num_examples, embedding_dimension)"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext_input = tf.constant(['Hello, world!'])\nembedding_output = embed(text_input)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs. It is trained on a variety of data sources and a variety of tasks with the aim of dynamically accommodating a wide variety of natural language understanding tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting image features. It takes an input image of size 224x224 and returns a 1280-dimensional feature vector."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracting feature vectors from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3],\n                   output_shape=[1280],\n                   trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeature_vector = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model for extracting feature vectors from images using MobileNetV2 architecture with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = tf.keras.Sequential([hub.KerasLayer(model_id)])\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load pre-trained image classification models from TensorFlow Hub for transfer learning and fine-tuning."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text using a pre-trained model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["text_input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model available on TensorFlow Hub. The model can be loaded using the provided model_id and used for image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of strings or a single string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nimport numpy as np\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a test sentence.']\nembeddings = embed(text)\nprint(embeddings)", "performance": {"dataset": "Various text datasets", "accuracy": "High"}, "description": "The Universal Sentence Encoder (USE) model is a pre-trained text embedding model that converts text input into a high-dimensional vector representation. It can be used for various natural language processing tasks such as text classification, semantic similarity, and clustering."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224, 224, 3),\n                    trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture with 100% depth and 224x224 input size. It can be used for image classification, object detection, and other image-based tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Run the model on the input image\npredictions = model(input_image)\n\n# Get the top predicted class\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "A pre-trained image classification model using TensorFlow Hub, capable of classifying images into 1000 different categories. The model is based on the Inception V3 architecture and has been trained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a feature vector for an image using the MobileNet V2 architecture trained on the ImageNet dataset. The feature vector can be used as input for training other models or for image similarity tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\ninput_image = tf.zeros([1, 224, 224, 3])\npredictions = model(input_image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This model is a pre-trained image classifier using MobileNet V2 architecture on ImageNet dataset with 100% depth and 224x224 input size. It is optimized for performance on mobile and edge devices."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v1_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/4')", "api_arguments": "input_shape, batch_size, dtype, trainable", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])", "performance": {"dataset": "ImageNet", "accuracy": "70.9%"}, "description": "A pre-trained image feature vector model based on MobileNetV1 architecture for image classification and feature extraction. The model is trained on the ImageNet dataset and provides an accuracy of 70.9%."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import numpy as np\nimport tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3])\n])\n\nimage = np.random.rand(1, 224, 224, 3).astype(np.float32)\nfeature_vector = model.predict(image)\nprint(feature_vector.shape)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting feature vectors from images. The input images should have a size of 224x224 and 3 color channels. The output feature vector has a dimension of 1280."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5'\nmodel = hub.load(model_id)\nimage = tf.zeros([1, 299, 299, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A TensorFlow Hub module for extracting image feature vectors using the Inception V3 architecture pretrained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224, 224, 3),\n                    output_shape=(1280,))\n])\n\nimg = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)\n\nfeatures = model.predict(img_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a feature vector for an image using the MobileNetV2 model trained on ImageNet dataset. The input image should be of size 224x224."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STSbenchmark", "accuracy": "0.84"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3],\n                   output_shape=[1280])\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, which can be used for image classification or as a feature extractor for transfer learning."}
{"domain": "Image pose detection", "framework": "TensorFlow Hub", "functionality": "Detect human poses in images", "api_name": "movenet", "api_call": "hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/3')", "api_arguments": {"input": "image_tensor", "output": "pose_keypoints"}, "python_environment_requirements": {"tensorflow": ">=2.5.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nmovenet = hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/3')\npose_keypoints = movenet(image_tensor)", "performance": {"dataset": "COCO", "accuracy": "70.6 mAP"}, "description": "MoveNet is a family of pose detection models designed for efficient and accurate detection of human poses in images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image pose detection", "framework": "TensorFlow Hub", "functionality": "Detects human poses in images", "api_name": "movenet", "api_call": "hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/3')", "api_arguments": "image_tensor", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/3')\nimage_tensor = ... # Load image tensor\noutputs = model(image_tensor)\nkeypoints = outputs['output_0'].numpy()", "performance": {"dataset": "COCO", "accuracy": "70.4 mAP"}, "description": "MoveNet is a family of efficient and accurate pose detection models designed for real-time applications. This model detects 17 key points of a single person in an image."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["URL: https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\nmodel.build([None, 224, 224, 3])\nmodel.summary()", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting feature vectors from images. The model is trained on the ImageNet dataset and achieves 71.9% accuracy in classification tasks."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio feature extraction", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/yamnet/1'\nmodel = hub.load(model_id)\n\naudio = tf.random.uniform([16000])\n\nscores, embeddings, log_mel_spectrogram = model(audio)\nprint(embeddings.shape)", "performance": {"dataset": "AudioSet", "accuracy": "81.7% mAP"}, "description": "YAMNet is a pre-trained deep learning model that can extract audio features from audio signals. It is trained on the AudioSet dataset and can be used for various audio-related tasks such as audio classification, audio tagging, and audio event detection."}
{"domain": "Image pose detection", "framework": "TensorFlow Hub", "functionality": "Detect human poses in images", "api_name": "movenet", "api_call": "hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/4')", "api_arguments": {"input_image": "A single image or batch of images with shape [batch_size, height, width, 3]"}, "python_environment_requirements": {"tensorflow": ">=2.5.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\npose = hub.load('https://tfhub.dev/google/movenet/singlepose/lightning/4')\ninput_image = tf.zeros([1, 192, 192, 3])\noutput = pose(input_image)", "performance": {"dataset": "COCO", "accuracy": "0.720"}, "description": "MoveNet is a model that detects human poses in images. It is trained on the COCO dataset and available on TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Provides a feature vector for images", "api_name": "image_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": ["image_input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')\nfeature_vector = model(image_input)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API provides a feature vector for images using TensorFlow Hub and the Inception V3 model. It can be used for various image-related tasks such as classification, similarity search, and more."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\npredictions = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model using MobileNetV2 architecture trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS (Semantic Textual Similarity) Benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal_sentence_encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["text_input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder (USE) is a pre-trained model that encodes text into high-dimensional vectors that can be used for a wide range of natural language processing tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a sample text']\nembeddings = embed(text)\nprint(embeddings)", "performance": {"dataset": "SNLI", "accuracy": "86.9%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for a wide range of tasks such as semantic similarity, text classification, clustering, and sentiment analysis."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-feature-vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/feature_vector/1')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/feature_vector/1", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/feature_vector/1', trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API provides a pre-trained model for extracting feature vectors from images using TensorFlow Hub. The feature vector can be used as input for various machine learning tasks, such as classification or clustering."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STSbenchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "preprocessed image", "output": "feature vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow-hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n\n# Preprocess the image\nimage = tf.constant(IMAGE_DATA)\nprocessed_image = tf.image.resize(image, [224, 224])\nprocessed_image = tf.expand_dims(processed_image, 0)\n\n# Extract the feature vector\nfeature_vector = model(processed_image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API allows you to extract feature vectors from images using the MobileNetV2 model trained on the ImageNet dataset. The feature vectors can be used for various tasks such as image classification, object detection, and image similarity."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generate image feature vectors", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "output_shape": "[1280]", "trainable": "False"}, "python_environment_requirements": ["tensorflow>=2.0.0", "tensorflow-hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    output_shape=[1280],\n                    trainable=False),\n    tf.keras.layers.Dense(5, activation='softmax')\n])\n\nmodel.build([None, 224, 224, 3])\nmodel.summary()", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset. Can be used for transfer learning and generating image feature vectors."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing module", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "Multiple", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.768"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"url": "https://tfhub.dev/google/universal-sentence-encoder/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'Embedding is fun!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = model(image)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained image classification model available on TensorFlow Hub that can be used to classify images into one of the 1000 ImageNet classes. The example provided shows how to load the Inception V3 model, preprocess an image, and obtain predictions."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['text to be encoded'])", "performance": {"dataset": "various", "accuracy": "not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello World'])", "performance": {"dataset": "STSbenchmark", "accuracy": "0.78 (Pearson correlation)"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\npredictions = model(image)\n\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "TensorFlow 2.x, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Load an image and preprocess it\ndef load_image(file_path):\n    img = tf.keras.preprocessing.image.load_img(file_path, target_size=(224, 224))\n    img_array = tf.keras.preprocessing.image.img_to_array(img)\n    img_array = tf.expand_dims(img_array, 0)  # Create a batch\n    return img_array\n\n# Predict the class of the image\nimg_array = load_image('path/to/your/image.jpg')\npredictions = model(img_array)\n\n# Get the class with the highest probability\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 100% width and 224x224 input size. The model is trained on the ImageNet dataset and can be used to classify images into 1000 different categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3],\n                   output_shape=[1280],\n                   trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture that extracts features from input images"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.84"}, "description": "A model for embedding text into high-dimensional vectors that can be used for various natural language processing tasks"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/openimages_v4/ssd/mobilenet_v2/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow>=2.0", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/openimages_v4/ssd/mobilenet_v2/1'\ndetector = hub.load(model_id)\n\nimage_tensor = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\nimage_tensor = tf.expand_dims(image_tensor, 0)\n\nresult = detector(image_tensor)\nprint(result)", "performance": {"dataset": "Open Images v4", "accuracy": "0.545 mAP"}, "description": "A pre-trained image object detection model based on the SSD architecture with MobileNetV2 as the backbone. The model is capable of detecting objects in images and returning their class labels and bounding box coordinates."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text: A list of strings to be embedded"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STSbenchmark", "accuracy": "Pearson correlation of 0.803"}, "description": "The Universal Sentence Encoder encodes text into a high-dimensional vector that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.84"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "ssd_mobilenet_v2", "api_call": "hub.load('https://tfhub.dev/google/openimages_v4/ssd_mobilenet_v2/1')", "api_arguments": "image, score_threshold", "python_environment_requirements": "Python 3, TensorFlow 2.x, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\ndetector = hub.load('https://tfhub.dev/google/openimages_v4/ssd_mobilenet_v2/1')\nresult = detector(image, score_threshold=0.5)", "performance": {"dataset": "Open Images v4", "accuracy": "mAP@0.5IOU = 32.8%"}, "description": "A pre-trained SSD MobileNet V2 model for object detection in images, trained on the Open Images v4 dataset. Detects objects and outputs their bounding boxes and class labels with associated confidence scores."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\nloaded_model = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage_np = np.array(image)\n\ninput_tensor = tf.convert_to_tensor(image_np)\ninput_tensor = input_tensor[tf.newaxis, ...]\n\noutput_dict = loaded_model(input_tensor)\n\nboxes = output_dict['detection_boxes'][0].numpy()\nscores = output_dict['detection_scores'][0].numpy()\nclasses = output_dict['detection_classes'][0].numpy().astype(np.int32)", "performance": {"dataset": "COCO", "accuracy": "0.320"}, "description": "This API provides a pre-trained object detection model using TensorFlow Hub. The model is based on the SSD MobileNet V2 architecture and is trained on the COCO dataset. It can be used to detect multiple objects in an image and returns their class, bounding box coordinates, and confidence scores."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8/1')", "api_arguments": {"image": "A tensor of shape [1, height, width, 3] containing a batch of images"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "COCO 2017", "accuracy": "0.317 mAP"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the MobileNetV2 FPNLite architecture"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\n\n# Load image and preprocess\nimage_path = 'path/to/image.jpg'\nimage = tf.io.read_file(image_path)\nimage = tf.image.decode_jpeg(image, channels=3)\nimage = tf.image.convert_image_dtype(image, tf.float32)\n\n# Run detection\nresult = detector(image[tf.newaxis, ...])\n\n# Process result\nboxes = result['detection_boxes']\nclasses = result['detection_classes']\nscores = result['detection_scores']", "performance": {"dataset": "OpenImages V4", "accuracy": "mAP@0.5IOU"}, "description": "Detects objects in images using the Faster R-CNN model with Inception-ResNet V2 backbone trained on the OpenImages V4 dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# Train and evaluate the model\n# model.fit(train_images, train_labels, epochs=5)\n# model.evaluate(test_images, test_labels)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "The MobileNetV2 100 224 feature vector model is a pre-trained neural network that extracts features from images. It is trained on the ImageNet dataset and can be used for various image classification and feature extraction tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object Detection", "api_name": "ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/1')", "api_arguments": {"url": "https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/1"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/1')\nimage_tensor = tf.convert_to_tensor(image_np, dtype=tf.uint8)\nimage_tensor = tf.expand_dims(image_tensor, 0)\noutput_dict = model(image_tensor)", "performance": {"dataset": "COCO 2017", "accuracy": "30.9 mAP"}, "description": "A pre-trained object detection model that can detect objects in images using Single Shot MultiBox Detector (SSD) with MobileNet V2 FPN-Lite 320x320 as the feature extractor. The model is trained on the COCO 2017 dataset and can detect 80 different object classes."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection and localization", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nresult = detector(image_tensor)", "performance": {"dataset": "COCO", "accuracy": "mAP@0.5IOU"}, "description": "A pre-trained object detection model that can detect and localize objects in an image using TensorFlow Hub."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["!pip install tensorflow-hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\nresult = detector(image[None, ...])\nprint(result)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained image object detection model using TensorFlow Hub to detect and classify objects in an image."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. This model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nresult = detector(image_tensor)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained object detection model that can detect multiple objects in an image. The model is based on the SSD Mobilenet V2 architecture and is trained on the COCO dataset."}
{"domain": "Video classification", "framework": "TensorFlow Hub", "functionality": "Video classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "", "accuracy": ""}, "description": "A video classification model using TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for a wide range of tasks such as semantic similarity, text classification, clustering, and other natural language processing tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "tf.keras.Sequential([hub.KerasLayer(model_id)])", "api_arguments": ["model_id: The identifier of the pre-trained model to load"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/1'\nmodel = tf.keras.Sequential([hub.KerasLayer(model_id)])\n\n# Load an image and make a prediction\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\npredictions = model.predict(input_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "78.1%"}, "description": "A pre-trained image classification model using the Inception V3 architecture, available on TensorFlow Hub. The model can be used to classify images into 1000 different categories."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "A model for encoding variable-length English text into fixed-length high-dimensional vectors. It is useful for applications such as semantic similarity, clustering, or text classification."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3), trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, which is optimized for mobile and edge devices. It is trained on ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Audio Speech-to-Text", "framework": "TensorFlow Hub", "functionality": "Convert audio speech to text", "api_name": "wav2vec2_large_xlsr_53", "api_call": "hub.load('https://tfhub.dev/vasudevgupta7/wav2vec2/1')", "api_arguments": {"audio_input": "wav file"}, "python_environment_requirements": {"tensorflow": ">=2.5.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/vasudevgupta7/wav2vec2/1')\ntranscript = model.signatures['serving_default'](audio_input)['output_0']", "performance": {"dataset": "CommonVoice", "accuracy": "Not specified"}, "description": "A pre-trained model to convert audio speech to text using wav2vec2_large_xlsr_53 architecture from TensorFlow Hub."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/efficientdet/lite0/detection/1')", "api_arguments": {"model_id": "A string representing the ID of the model to be loaded"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/efficientdet/lite0/detection/1'\ndetector = hub.load(model_id)\n\n# Run the detector on an image\nresult = detector(image_tensor)", "performance": {"dataset": "COCO", "accuracy": "Varies depending on the model version"}, "description": "A collection of TensorFlow Hub models for detecting objects in images using the EfficientDet architecture. These models can be used for various tasks such as object detection, instance segmentation, and more."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'This is a test sentence'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained on a variety of data sources and a range of tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding with TensorFlow'])", "performance": {"dataset": "SNLI, MultiNLI, and SICK", "accuracy": "86.7% (SNLI), 78.6% (MultiNLI), 86.3% (SICK)"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "multiple", "accuracy": "varies"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture for image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation 0.803"}, "description": "A text embedding model that converts sentences into fixed-size vectors, trained on a variety of data sources and capable of general-purpose text embedding tasks"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "image_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": "input_shape, input_tensor, trainable, output_shape", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5',\n                   input_shape=(299, 299, 3),\n                   trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "78.1%"}, "description": "A pre-trained model that extracts feature vectors from images using Inception V3 architecture"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_140_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1792]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "80.3%"}, "description": "A pre-trained image feature vector model that extracts features from images using MobileNetV2 architecture with a width multiplier of 1.4 and an input size of 224x224 pixels. The model is trained on the ImageNet dataset and achieves 80.3% accuracy."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.zeros([1, 224, 224, 3])  # A batch of images with shape [batch_size, height, width, 3].\nlogits = model(image)  # Logits with shape [batch_size, num_classes].", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "MobileNetV2 model for image classification, pre-trained on ImageNet and optimized for TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4'),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A Keras layer that wraps the MobileNet V2 model pre-trained on ImageNet for image feature extraction. It can be used to create a custom image classification model by adding a dense layer with the desired number of output classes and training on a specific dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "model = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3)),\n  tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, trained on ImageNet dataset."}
{"domain": "Audio event classification", "framework": "TensorFlow Hub", "functionality": "Classify audio events", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "", "accuracy": ""}, "description": "A TensorFlow Hub model for classifying audio events."}
{"domain": "Text classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/universal-sentence-encoder/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!'])\nprint(embeddings)", "performance": {"dataset": "STSbenchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_image": "A 224x224x3 image tensor", "output": "A 1280-dimensional feature vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimage_tensor = tf.zeros([1, 224, 224, 3]) # Replace with your own image tensor\nfeatures = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2, designed for efficient on-device image classification and transfer learning. It takes a 224x224x3 image tensor as input and outputs a 1280-dimensional feature vector."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embeddings", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "text"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.78 Pearson correlation"}, "description": "A text embedding model that maps text inputs to a 512-dimensional vector space."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Segmentation", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/deeplabv3/1'\nmodel = hub.load(model_id)\nresult = model(image)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "70.5%"}, "description": "DeepLabV3 is an image segmentation model that partitions an image into semantically meaningful regions. It is pre-trained on the PASCAL VOC 2012 dataset and achieves an accuracy of 70.5%."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature vector extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"image_size": "224x224", "input_type": "float32", "output_type": "float32", "batch_size": "variable"}, "python_environment_requirements": {"tensorflow": "2.0", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Extract features\nfeatures = model(input_image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0"}, "description": "This API allows you to extract feature vectors from images using the MobileNetV2 model trained on ImageNet. The feature vectors can be used for various machine learning tasks such as image classification, object detection, and more."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4\", input_shape=[224,224,3])\n])\n\nfeatures = model.predict(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, designed for image classification tasks. The model takes input images of shape [224, 224, 3] and outputs a 1280-dimensional feature vector."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio feature extraction", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": [{"model_id": "URL or path to the TensorFlow Hub model"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/yamnet/1'\nmodel = hub.load(model_id)\n\n# Load a wav file\nfilename = 'audio_file.wav'\nfile_contents = tf.io.read_file(filename)\nwaveform = tf.audio.decode_wav(file_contents).audio\n\n# Extract features\nscores, embeddings, spectrogram = model(waveform)", "performance": {"dataset": "AudioSet", "accuracy": "Not specified"}, "description": "YAMNet is a deep net that predicts 521 audio event classes based on the AudioSet dataset. It's used for audio feature extraction and can be used for tasks like audio classification, tagging, and recommendation."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nprint(model(tf.zeros([1, 224, 224, 3])))", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained MobileNetV2 model for image classification from TensorFlow Hub"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A text embedding model that converts text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4", "trainable": "Optional, default is False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\n        handle='https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4',\n        input_shape=(224, 224, 3),\n        trainable=False\n    )\n])\n\nimage = tf.keras.preprocessing.image.load_img('path_to_your_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "80.3%"}, "description": "A pre-trained image classification model using the MobileNetV2 architecture, trained on the ImageNet dataset. It is designed for efficient on-device performance with reduced computational and memory requirements."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['text to be embedded'])\nprint(embeddings)", "performance": {"dataset": "SQuAD, SNLI, and others", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.KerasLayer('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text or list of texts", "output": "Array of embeddings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.KerasLayer('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding is fun!'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_image": "A 224x224x3 RGB image", "output_feature_vector": "A 1x1280 vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n\n# Preprocess your image, e.g. resize to 224x224 and normalize pixel values\nprocessed_image = ... \n\n# Extract feature vector\nfeature_vector = model(processed_image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model that takes an input image and outputs a 1280-dimensional feature vector. Useful for transfer learning applications."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/1'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows you to extract image features using a pre-trained model from TensorFlow Hub. The model is trained on the ImageNet dataset and can be used to generate feature vectors for various image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Convert text into embeddings", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "85.1% Pearson correlation"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\ndef classify_image(image):\n    image = tf.image.resize(image, (224, 224))\n    image = tf.expand_dims(image, 0) / 255.0\n    logits = model(image)\n    return tf.argmax(logits, axis=-1)\n\nimage = tf.io.read_file('path/to/image.jpg')\nimage = tf.image.decode_jpeg(image)\nclass_id = classify_image(image)\nprint(class_id)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture trained on ImageNet dataset. It can classify images into 1000 different categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3), trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobilenetV2 architecture trained on ImageNet dataset for extracting features from images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": {"import": ["import tensorflow as tf", "import tensorflow_hub as hub"], "load_model": "model = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "prepare_image": ["import numpy as np", "import PIL.Image as Image", "img = Image.open('path/to/your/image.jpg').resize((224, 224))", "img_array = np.array(img) / 255.0", "img_tensor = tf.expand_dims(img_array, 0)"], "classify_image": "predictions = model(img_tensor)"}, "performance": {"dataset": "ImageNet", "accuracy": "Top-1 accuracy: 75.2%, Top-5 accuracy: 92.5%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5'\nmodel = hub.KerasLayer(model_id)\n\nimage = tf.keras.Input(shape=(299, 299, 3), dtype=tf.float32)\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "A pre-trained image feature vector model using Inception V3 architecture on TensorFlow Hub, designed for extracting high-level features from images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A Keras-compatible TensorFlow Hub module for extracting feature vectors from images using the MobileNet V2 architecture trained on ImageNet."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['sample text']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Example: Load an image and classify it\n# image = ...  # Load an image\n# result = model(image)\n# print(result)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub and use it to classify images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4'\nmodel = hub.load(model_id)\n\n# Load and preprocess image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Predict\npredictions = model(image_array)\n\n# Decode predictions\nclass_names = imagenet_labels()\npredicted_class = class_names[np.argmax(predictions[0])]", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 80.9%, Top-5 Accuracy: 95.2%"}, "description": "A pre-trained image classification model based on the MobileNetV2 architecture, fine-tuned on the ImageNet dataset. The model can be used to classify images into 1000 different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": "model_id", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load an image classification model from TensorFlow Hub using the model id"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the model id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_050_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">= 2.0", "tensorflow_hub": ">= 0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image feature vector model that extracts useful features from input images using the MobileNetV2 architecture with a width multiplier of 0.5 and an input size of 224x224 pixels."}
{"domain": "Audio event classification", "framework": "TensorFlow Hub", "functionality": "Classify audio events", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/yamnet/1'\nmodel = hub.load(model_id)\n\n# Load audio file and get waveform\naudio_file = 'path/to/audio/file.wav'\nwaveform, sample_rate = tf.audio.decode_wav(tf.io.read_file(audio_file), desired_channels=1)\n\n# Run the model on the waveform\nclass_scores, embeddings, spectrogram = model(waveform)\n\n# Get the top class\ntop_class = tf.argmax(class_scores, axis=-1)\n\n# Print the top class\nprint('Top class:', top_class.numpy())", "performance": {"dataset": "AudioSet", "accuracy": "0.745 mAP"}, "description": "YAMNet is a pretrained deep net that predicts 521 audio event classes based on the AudioSet dataset. It's useful for audio event classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"url": "https://tfhub.dev/google/universal-sentence-encoder/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\n\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder (USE) is a pre-trained model that encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks. It is designed for greater-than-word length text like sentences, phrases or short paragraphs."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load an image as an example\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\n# Make predictions\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model using Inception V3 architecture from TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image feature vectors", "api_name": "imagenet_mobilenet_v2_140_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1792,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4', input_shape=(224, 224, 3))\n])\nfeatures = model.predict(images)", "performance": {"dataset": "ImageNet", "accuracy": "Top-1: 80.3%, Top-5: 95.1%"}, "description": "A pre-trained feature vector extraction model based on MobileNetV2 architecture for image classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient > 0.8"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Converts images into feature vectors", "api_name": "imagenet_mobilenet_v3_large_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/feature_vector/5')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/feature_vector/5\", input_shape=(224, 224, 3), output_shape=(1280), trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "75.1%"}, "description": "A pre-trained model that converts images into 1280-dimensional feature vectors using MobileNet V3 Large architecture trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text for machine learning tasks", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['hello world', 'my name is John'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "A text embedding model that converts text into high-dimensional vectors for use in various machine learning tasks. The Universal Sentence Encoder encodes text into 512-dimensional vectors that can be used for tasks such as semantic similarity, classification, or clustering."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                  input_shape=(224,224,3),\n                  trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A Keras layer that extracts features from images using the MobileNetV2 model trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vector from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3), trainable=False)\n])\n\n# Load image and preprocess\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.mobilenet_v2.preprocess_input(image)\nimage = np.expand_dims(image, axis=0)\n\n# Extract feature vector\nfeature_vector = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model that extracts a 1280-dimensional feature vector from images using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using a model_id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3])\n])\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature extraction model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image feature vectors", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "preprocessed image", "output": "feature vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeature_vector = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. It takes a preprocessed image as input and returns a 1280-dimensional feature vector."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v1_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1024)", "trainable": "False"}, "python_environment_requirements": {"tensorflow": "2.0+", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.summary()", "performance": {"dataset": "ImageNet", "accuracy": "70.9%"}, "description": "A pre-trained image feature extraction model using MobileNet architecture trained on ImageNet dataset. It can be used for transfer learning and fine-tuning on new image classification tasks."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["import tensorflow_hub as hub"], "example_code": "import tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/universal-sentence-encoder/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "N/A", "accuracy": "N/A"}, "description": "Load a pre-trained text preprocessing model from TensorFlow Hub using the model's unique identifier"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_id": "URL of the pre-trained model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make predictions\npredictions = model(input_image)\n\n# Decode the predictions\nclass_names = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy(), top=1)\nprint(class_names)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This API loads a pre-trained image classification model from TensorFlow Hub, allowing users to classify images using the loaded model. The example demonstrates how to load a MobileNetV2 model, preprocess an input image, make predictions, and decode the predictions to obtain class names."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nresult = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "Varies depending on the model"}, "description": "TensorFlow Hub provides pre-trained image classification models that can be easily loaded and used for various image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of sentences or phrases"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.78 (Spearman correlation)"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "imagenet/mobilenet_v2_100_224/classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\npredictions = model.predict(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and use pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "Load and use a pre-trained image classification model from TensorFlow Hub to classify images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading and running a pre-trained model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["URL of the pre-trained model"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Load an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make a prediction\npredictions = model(input_image)\n\n# Decode the predictions\nclass_names = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy(), top=1)\nprint(class_names)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model based on MobileNetV2 architecture, trained on ImageNet dataset, and available on TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')])", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])", "performance": {"dataset": "ImageNet", "accuracy": "0.856"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with an input size of 224x224 pixels. The model is trained on the ImageNet dataset and has a top-1 accuracy of 85.6%."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained MobileNetV2 model for image classification using TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model", "api_name": "imagenet_mobilenet_v3_large_100_224", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/classification/5')])", "api_arguments": "URL to pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_large_100_224/classification/5')\n])\n\nimage = tf.keras.utils.get_file('image.jpg','https://example.com/image.jpg')\nimg = tf.keras.preprocessing.image.load_img(image, target_size=[224, 224])\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)\n\npredictions = model.predict(img_array)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "0.752"}, "description": "A pre-trained model for image classification using MobileNetV3 Large architecture on ImageNet dataset"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "mobilenet_v2", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')])", "api_arguments": {"url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', input_shape=(224,224,3))])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNet V2 architecture from TensorFlow Hub. It is capable of classifying images into 1000 categories with 71% accuracy on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "A text embedding model that converts text into high-dimensional vectors that can be used for text classification, semantic similarity, and other natural language processing tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nloaded_model = hub.load(model_id)\n\n# Load an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_batch = tf.expand_dims(image_array, 0)\n\n# Run the model\npredictions = loaded_model(image_batch)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API allows users to load pre-trained models for image classification from TensorFlow Hub. The loaded models can be used to classify images into one of the pre-defined categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id", "input_shape", "trainable"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(model_id, input_shape=(224, 224, 3), trainable=True)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 71.0%, Top-5 Accuracy: 90.1%"}, "description": "Pre-trained image classification models available on TensorFlow Hub for easy integration and usage."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Convert text into dense vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a sentence.']\nembedding = embed(text)", "performance": {"dataset": "STS benchmark", "accuracy": "0.78 Pearson correlation"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Converts text into embeddings", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A pre-trained model that encodes text into 512-dimensional embeddings"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "SNLI, MultiNLI, and STS Benchmark", "accuracy": "85% on SNLI, 76.9% on MultiNLI, and 0.803 on STS Benchmark"}, "description": "A pre-trained model for embedding text into a high-dimensional vector that can be used for various natural language processing tasks"}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading a text preprocessing model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, World!'])\nprint(embeddings)", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "Load and use the Universal Sentence Encoder model for text preprocessing in TensorFlow Hub"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nimage = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\nresult = detector(image[tf.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "mAP"}, "description": "This API allows you to detect objects in images using a pre-trained model from TensorFlow Hub. The model is based on the SSD MobileNet V2 architecture and has been trained on the COCO dataset."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "Model ID", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('example_image.jpg')\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(image_array, 0)\n\noutput = detector(input_image)\n\nprint(output)", "performance": {"dataset": "COCO", "accuracy": "mAP"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the SSD MobileNet V2 architecture."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection and localization in images", "api_name": "ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/1')", "api_arguments": "image_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\ndetector = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/1')\ninput_image = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\ninput_tensor = tf.keras.preprocessing.image.img_to_array(input_image)\ninput_tensor = tf.expand_dims(input_tensor, 0)\ndetections = detector(input_tensor)", "performance": {"dataset": "COCO 2017", "accuracy": "22.2 mAP"}, "description": "A pre-trained object detection model that detects and localizes multiple objects in images using a Single Shot MultiBox Detector with MobileNetV2 FPN-Lite feature extractor."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.8"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3),\n                    trainable=False)\n])\n\nimage_tensor = tf.random.uniform(shape=(1, 224, 224, 3))\nfeatures = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset. It can be used to extract features from an input image tensor."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "ssd_mobilenet_v2", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"image": "Input image tensor", "num_boxes": "Number of bounding boxes", "class_labels": "Labels for detected objects", "confidence_scores": "Confidence scores for detected objects"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\ndetector = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')\nresult = detector(image_tensor)\nboxes, labels, scores = result['detection_boxes'], result['detection_classes'], result['detection_scores']", "performance": {"dataset": "COCO", "accuracy": "0.320"}, "description": "A pre-trained object detection model that detects objects in images using SSD MobileNet V2 architecture"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Convert text into a dense vector representation", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text or list of texts"}, "python_environment_requirements": {"tensorflow": ">= 2.0", "tensorflow_hub": ">= 0.8"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into a dense vector representation that can be used for various natural language processing tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/efficientdet/lite2/detection/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/efficientdet/lite2/detection/1'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg')\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\nresult = detector(input_image)", "performance": {"dataset": "COCO", "accuracy": "mAP"}, "description": "This API allows for object detection in images using TensorFlow Hub and the EfficientDet model. It can be used to load a pre-trained model and detect objects in a given image."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "universal_sentence_encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["URL"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is pre-trained on a variety of data sources and can be fine-tuned for specific tasks if needed."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model for image classification", "api_name": "imagenet-mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'),\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\npredictions = model.predict(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.2%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection and classification in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nresult = detector(image_tensor)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "This API allows you to detect and classify objects in images using TensorFlow Hub and pre-trained models such as SSD MobileNet V2."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Load and use an object detection model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "The id of the model to be loaded from TensorFlow Hub"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\nmodel = hub.load(model_id)\n\nimage = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\ndetected_objects = model(image[tf.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "Unknown"}, "description": "Load and use an object detection model from TensorFlow Hub for detecting objects in images."}
{"domain": "Video classification", "framework": "TensorFlow Hub", "functionality": "Video classification", "api_name": "Video_Classification_Model", "api_call": "hub.load('https://tfhub.dev/google/Video_Classification_Model/1')", "api_arguments": ["video_url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/Video_Classification_Model/1')\nresult = model(video_url)", "performance": {"dataset": "Kinetics-700", "accuracy": "Not specified"}, "description": "A pre-trained video classification model available on TensorFlow Hub, capable of classifying videos into one of 700 action classes."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nresult = detector(image_tensor)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained TensorFlow Hub model that detects objects in images using the SSD MobileNet V2 architecture."}
{"domain": "Video classification", "framework": "TensorFlow Hub", "functionality": "Video classification", "api_name": "Video classification model", "api_call": "hub.load('https://tfhub.dev/google/kinetics-i3d/1')", "api_arguments": {"model_url": "https://tfhub.dev/google/kinetics-i3d/1"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/kinetics-i3d/1')\nvideo_tensor = tf.random.uniform(shape=[1, 79, 224, 224, 3])\noutput = model(video_tensor)\nprint(output.shape)", "performance": {"dataset": "Kinetics-400", "accuracy": "Not specified"}, "description": "A pre-trained video classification model using the Inflated 3D Convolutional Network (I3D) architecture on the Kinetics-400 dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,),\n                   trainable=False)\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a feature vector for images using the MobileNetV2 architecture trained on the ImageNet dataset. The input images should have shape (224, 224, 3), and the output feature vector has 1280 dimensions. The model is available on TensorFlow Hub and can be used for transfer learning applications."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), output_shape=(1280,))\n])\n\nfeatures = model.predict(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. It can be used for feature extraction from images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding using pre-trained model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['example sentence'])", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.846"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a test sentence.']\nembeddings = embed(text)", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder (USE) is a pre-trained model for generating embeddings of text. It is trained on a variety of data sources and can be used for tasks such as semantic similarity and classification."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Image feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3))\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained feature vector generator using MobileNetV2 architecture on the ImageNet dataset. It can be used to extract meaningful features from images for various machine learning tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub for image classification tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset. Can be used for various image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'My name is John Doe.'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio embedding generation", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/yamnet/1'\nmodel = hub.load(model_id)\nembeddings = model(samples, sample_rate)", "performance": {"dataset": "YAMNet", "accuracy": "Not specified"}, "description": "This API generates audio embeddings using a pre-trained model from TensorFlow Hub. The model can be loaded with a specified model_id, and embeddings can be extracted for input audio samples."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(1)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a compact representation of an image by extracting feature vectors using MobileNetV2 architecture pretrained on ImageNet dataset. It can be used for tasks like image classification, object detection, and image similarity."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["URL"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224, 224, 3),\n                    trainable=False),\n    tf.keras.layers.Dense(5, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model based on MobileNet V2 architecture for extracting features from images. The model is trained on ImageNet dataset and has an accuracy of 71.9%."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3], output_shape=[1280])\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on the ImageNet dataset. It can be used for various image recognition tasks by extracting meaningful features from input images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "image_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4')", "api_arguments": ["image"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4',\n                   input_shape=(299, 299, 3))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\nfeatures = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "78.1%"}, "description": "This API allows you to extract feature vectors from images using the Inception V3 model pretrained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "STS-Benchmark", "accuracy": "Pearson correlation of 0.803"}, "description": "The Universal Sentence Encoder encodes text data into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embeds text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["text_input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding is fun!'])", "performance": {"dataset": "SNLI, MultiNLI, and others", "accuracy": "80-90%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This API provides a Keras layer for extracting feature vectors from images using the MobileNetV2 model pretrained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a sample text.']\nembeddings = embed(text)", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nimage = tf.random.uniform((1, 224, 224, 3))\nresult = model(image)\nprint(result)", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "A pre-trained image classification model available on TensorFlow Hub that can be used to classify images into different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": [{"name": "model_id", "type": "string", "description": "The ID of the pre-trained model"}, {"name": "trainable", "type": "boolean", "description": "Whether the model should be trainable or not"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(model_id, trainable=True)\n])\n\n# Load example image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('example_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make predictions\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset, available through TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding using a pre-trained model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!', 'Embed text with Universal Sentence Encoder'])", "performance": {"dataset": "various", "accuracy": "N/A"}, "description": "A pre-trained text embedding model that converts sentences into fixed-size vector representations, enabling efficient semantic similarity calculations and other natural language processing tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3],\n                   output_shape=[1280],\n                   trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting feature vectors from images. The model is trained on the ImageNet dataset and can be used as a feature extractor for various image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts image features for various tasks", "api_name": "imagenet_mobilenet_v2_140_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4')", "api_arguments": {"input_shape": "224x224x3", "output_shape": "1792"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   output_shape=(1792,))\n])", "performance": {"dataset": "ImageNet", "accuracy": "Top-1: 80.4%, Top-5: 95.1%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture trained on ImageNet dataset. It can be used to extract features for various image-based tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "inception_v3", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": {"input": "image", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5',\n                   input_shape=(299,299,3))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\nfeatures = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "77.9%"}, "description": "Feature extraction from images using Inception V3 model trained on ImageNet dataset"}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Generate embeddings for audio files", "api_name": "audio_embedding_model", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": {"audio_inputs": "Tensor of shape [batch_size, num_samples] containing audio signals"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/yamnet/1')\n\n# Load an audio file\naudio_data = ... # Load audio data as a tensor\n\n# Generate embeddings\nembeddings = model(audio_data)", "performance": {"dataset": "YAMNet", "accuracy": "81.6% top-1 accuracy on AudioSet"}, "description": "This API allows you to generate embeddings for audio files using a pre-trained YAMNet model from TensorFlow Hub. The embeddings can be used for various tasks such as audio classification, similarity search, and more."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STSbenchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Image segmentation model", "api_name": "deeplabv3_257_mv_gpu", "api_call": "hub.load('https://tfhub.dev/tensorflow/deeplabv3_257_mv_gpu/1')", "api_arguments": {"input": "Image tensor", "output": "Segmentation mask tensor"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/tensorflow/deeplabv3_257_mv_gpu/1')\nimage_tensor = tf.image.resize(image, (257, 257))\nsegmentation_mask = model(image_tensor)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "0.899"}, "description": "DeepLab is a state-of-the-art deep learning model for semantic image segmentation, where the goal is to assign semantic labels (e.g., person, dog, cat and so on) to every pixel in the input image. This model is trained on the PASCAL VOC 2012 dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image feature vector", "api_name": "imagenet_mobilenet_v3_small_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5',\n                   input_shape=(224, 224, 3))\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Extract the feature vector\nfeature_vector = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "65.4%"}, "description": "A pre-trained image feature vector model based on MobileNetV3 small architecture for TensorFlow Hub, which can be used for transfer learning or as a feature extractor for image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "Text input", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "Various text sources", "accuracy": "High similarity scores for semantically similar sentences"}, "description": "A text embedding model that converts text data into high-dimensional vectors, capturing semantic meaning and enabling various natural language processing tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['sample text'])", "performance": {"dataset": "various text datasets", "accuracy": "not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained model from TensorFlow Hub for image classification using the Inception V3 architecture."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS-Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "output_shape": [1280], "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "Extracts feature vectors from images using MobileNetV2 architecture pretrained on ImageNet dataset"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_id": "string", "input_shape": "tuple", "trainable": "boolean"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(model_id, input_shape=(224, 224, 3))\n])\n\n# Load an image and make predictions\nfrom PIL import Image\nimport numpy as np\n\nimage = Image.open('path/to/your/image.jpg')\nimage = image.resize((224, 224))\ninput_data = np.array(image) / 255.0\ninput_data = np.expand_dims(input_data, axis=0)\n\npredictions = model.predict(input_data)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture from TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,))\n])\n\n# Use the model to extract features from an image\nfeature_vector = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture, trained on ImageNet dataset. It can be used to extract features from images for various tasks such as image classification, object detection, and more."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "input_shape": "IMAGE_SHAPE+(3,)"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nIMAGE_SHAPE = (224, 224)\nclassifier = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', input_shape=IMAGE_SHAPE+(3,))\n])\nimage = tf.keras.utils.get_file('image.jpg','https://storage.googleapis.com/download.tensorflow.org/example_images/grace_hopper.jpg')\nimage = tf.keras.preprocessing.image.load_img(image, target_size=IMAGE_SHAPE)\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\nprediction = classifier.predict(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "MobileNetV2 model for image classification, pre-trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world', 'I am learning how to use the Universal Sentence Encoder'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"model_id": "string", "input_shape": "tuple", "trainable": "boolean"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4'\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(model_id, input_shape=(224, 224, 3), trainable=True),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 accuracy"}, "description": "A pre-trained image feature vector model for image classification and transfer learning, based on MobileNetV2 architecture."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and use pre-trained image classification models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Prepare an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Run inference\npredictions = model(input_image)\n\n# Process the predictions\npredicted_class_index = tf.math.argmax(predictions, axis=-1).numpy()[0]\nprint('Predicted class index:', predicted_class_index)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture trained on ImageNet dataset. The model is designed to classify images into one of 1000 categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model for extracting feature vectors from images using MobileNetV2 architecture trained on ImageNet dataset"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "A text embedding model that encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\nfeature_vector = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture. It can be used to extract feature vectors from images for various tasks like image classification, object detection, and image similarity."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": null}, "description": "Load an image classification model from TensorFlow Hub using the model_id."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "URL of the model", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "SNLI, MultiNLI", "accuracy": "86.9% on SNLI, 78.9% on MultiNLI"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Image feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4\", input_shape=[224, 224, 3])\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature extraction model using MobileNet V2 architecture with 224x224 input size and 1280-dimensional output feature vector. The model is trained on ImageNet dataset and can be used for various image recognition tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracting feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, height, width, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n\nimage = tf.zeros([1, 224, 224, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This model takes an input image and outputs a 1280-dimensional feature vector. It is based on the MobileNetV2 architecture and pretrained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext_input = ['This is a sample text']\nembeddings = embed(text_input)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for a wide range of tasks such as semantic similarity, clustering, and text classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0", "numpy": ">=1.19.5", "PIL": ">=8.3.2"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nfrom PIL import Image\nimport numpy as np\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = Image.open('path/to/your/image.jpg').resize((224, 224))\ninput_image = np.array(image) / 255.0\ninput_image = np.expand_dims(input_image, axis=0)\n\npredictions = model.predict(input_image)\npredicted_class = np.argmax(predictions[0])\nprint('Predicted class:', predicted_class)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": [{"name": "model_id", "type": "string", "description": "The identifier of the pre-trained model to be loaded from TensorFlow Hub"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load and use pre-trained image classification models from TensorFlow Hub for classifying images"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224, 224, 3), trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path_to_your_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a Keras layer that extracts features from images using the MobileNetV2 model trained on ImageNet dataset. It can be used for various tasks such as image classification, object detection, and transfer learning."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text", "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "A text embedding model that encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A deep-learning model for embedding text into high-dimensional vectors that can be used for various natural language processing tasks"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', trainable=False),\n  tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a pre-trained image feature vector model based on MobileNetV2 architecture. It extracts features from images and can be used as a base model for various image classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Get the predictions\npredictions = model(input_image)\n\n# Decode the predictions\nlabels_path = tf.keras.utils.get_file('ImageNetLabels.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/ImageNetLabels.txt')\nimagenet_labels = np.array(open(labels_path).read().splitlines())\n\npredicted_label = imagenet_labels[np.argmax(predictions)]\nprint(predicted_label)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 100% depth and 224x224 input size, trained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3))\n])\n\n# Load image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Extract features\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a feature vector for images using the MobileNetV2 model trained on ImageNet dataset. It takes an input image of shape (224, 224, 3) and outputs a 1280-dimensional feature vector."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\n# Load the model\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/4'\nmodel = hub.load(model_id)\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\n\n# Predict the class\npredictions = model(image[None, ...])\n\n# Get the class label\npredicted_class = tf.keras.applications.inception_v3.decode_predictions(predictions.numpy())[0][0][1]", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 77.9%, Top-5 Accuracy: 93.7%"}, "description": "This API provides a pre-trained image classification model using TensorFlow Hub, which can be used to classify images into various categories. The model is trained on the ImageNet dataset and can be loaded using the `hub.load()` function."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')\n\n# Prepare an image for input to the model\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Predict the class of the image\npredictions = model(input_image)\npredicted_class_index = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained model for image classification using MobileNetV2 architecture and trained on ImageNet dataset"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\nimage = tf.zeros([1, 224, 224, 3])  # A batch of images with shape [batch_size, height, width, 3].\nlogits = model(image)  # Logits with shape [batch_size, num_classes].", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained MobileNetV2 model for classifying images using TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make predictions\npredictions = model(input_image)\n\n# Get the top predicted class\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "Top-1: 80.9%, Top-5: 95.2%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset, with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"input": "Tensor of shape [batch_size, 224, 224, 3]", "output": "Tensor of shape [batch_size, 1001]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\n# Make a prediction\npredictions = model.predict(input_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": [{"model_id": "The unique identifier of the pre-trained model"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_tensor = tf.expand_dims(image_array, 0)\n\npredictions = model(image_tensor)\n", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "A pre-trained image classification model using TensorFlow Hub to classify images into one of 1000 categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classifier", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classifier using TensorFlow Hub to classify images using the MobileNet V2 model."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "imagenet_mobilenet_v1_050_160_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v1_050_160/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v1_050_160/classification/4')\n\n# Load an image and preprocess it\ndef load_image(file_path):\n    img = tf.io.read_file(file_path)\n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, [160, 160])\n    img = tf.cast(img, tf.float32) / 255.0\n    return img\n\n# Predict the class of the image\nimage = load_image('path/to/image.jpg')\npredictions = model(tf.expand_dims(image, axis=0))\npredicted_class = tf.argmax(predictions, axis=-1)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained image classification model using MobileNetV1 architecture with 0.50 width and 160x160 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "77.9%"}, "description": "A pre-trained image classification model using Inception V3 architecture on TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "A pre-trained image classification model based on the MobileNetV2 architecture, fine-tuned on the ImageNet dataset, with an input size of 224x224 pixels."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "85.1%"}, "description": "A pre-trained text embedding model that can be used to convert text into high-dimensional vectors for various natural language processing tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": [{"name": "model_id", "type": "string", "description": "The unique identifier of the model to be loaded from TensorFlow Hub"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\n\nresult = detector(image[np.newaxis, ...])", "performance": {"dataset": "Open Images V4", "accuracy": "Not specified"}, "description": "Loads a TensorFlow Hub model for image object detection, allowing the detection of objects within images using the Faster R-CNN architecture with Inception ResNet V2."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Load text embedding models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "model_url", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "Load a pre-trained text embedding model from TensorFlow Hub to convert text into fixed-length vector representations."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Universal Sentence Encoder", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of sentences or phrases"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data for machine learning", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text data"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.8"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "ssd_mobilenet_v2", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"image_tensor": "Input tensor of shape [1, None, None, 3]", "detection_boxes": "Output tensor of shape [1, num_boxes, 4]", "detection_scores": "Output tensor of shape [1, num_boxes]", "detection_classes": "Output tensor of shape [1, num_boxes]", "num_detections": "Output tensor of shape [1]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')\n\n# Load image and preprocess\nimage = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\nimage = tf.image.resize(image, (300, 300))\nimage = tf.expand_dims(image, axis=0)\n\n# Run object detection\noutput = model(image)\n\n# Extract detection boxes, scores, and classes\nboxes = output['detection_boxes'].numpy()\nscores = output['detection_scores'].numpy()\nclasses = output['detection_classes'].numpy()\nnum_detections = int(output['num_detections'])", "performance": {"dataset": "COCO", "accuracy": "mAP of 22"}, "description": "A pre-trained SSD MobileNet V2 model for object detection in images, capable of detecting multiple objects with bounding boxes and confidence scores. The model is trained on the COCO dataset and achieves a mean average precision (mAP) of 22."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing and embedding", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is pre-trained on a large corpus of text and can be fine-tuned on specific tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/centernet/resnet50v1_fpn_512x512/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/centernet/resnet50v1_fpn_512x512/1'\ndetector = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\nresult = detector(image)", "performance": {"dataset": "COCO", "accuracy": "mAP (mean Average Precision)"}, "description": "Detect objects in images using TensorFlow Hub and a pre-trained CenterNet model with ResNet50V1 FPN backbone"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\nimage_path = 'path/to/image.jpg'\nimage = tf.image.decode_jpeg(tf.io.read_file(image_path))\nresult = detector(image[tf.newaxis, ...])", "performance": {"dataset": "OpenImages V4", "accuracy": "Not specified"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using Faster R-CNN with Inception-ResNet-V2"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/efficientdet/d0/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/efficientdet/d0/1'\ndetector = hub.load(model_id)", "performance": {"dataset": "COCO", "accuracy": "N/A"}, "description": "Load a pre-trained model from TensorFlow Hub for object detection in images."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Identify and locate objects in images", "api_name": "ssd_mobilenet_v2", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"input": "Tensor of shape [batch_size, height, width, 3]", "output": "Dictionaries with keys 'detection_boxes', 'detection_classes', 'detection_scores'"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\ndetector = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')\nimage_tensor = tf.image.decode_image(tf.io.read_file('path/to/image.jpg'))\nimage_tensor = tf.expand_dims(image_tensor, 0)\nresult = detector(image_tensor)\nprint(result)", "performance": {"dataset": "COCO", "accuracy": "mAP of 0.22"}, "description": "A pre-trained model for object detection using SSD MobileNet V2 architecture, capable of identifying and locating objects in images."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/centernet/hourglass_512x512/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/centernet/hourglass_512x512/1'\ndetector = hub.load(model_id)\n\ninput_image = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\ninput_image = tf.image.resize(input_image, (512, 512))\n\ninput_tensor = tf.expand_dims(input_image, axis=0)\n\nresult = detector(input_tensor)\n\n# Display results\nprint(result)", "performance": {"dataset": "COCO", "accuracy": "0.42 mAP"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the CenterNet Hourglass architecture"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a fixed-size vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input: Text data", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "A pre-trained model for encoding text into high-dimensional vectors that can be used for various natural language processing tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["URL of the pre-trained model"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "Loads a pre-trained MobileNetV2 model for image classification trained on the ImageNet dataset with an input size of 224x224 pixels and a depth multiplier of 1.0."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract high-level features from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on the ImageNet dataset. It extracts high-level features from images and can be used for tasks like image classification, object detection, and transfer learning."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["url: https://tfhub.dev/google/universal-sentence-encoder/4"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "A text preprocessing API that loads the Universal Sentence Encoder model from TensorFlow Hub for generating sentence embeddings."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "image_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["image_input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimage_input = tf.zeros([1, 224, 224, 3])\nfeatures = model(image_input)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture, trained on ImageNet dataset, which can be used to extract features from images for various tasks like image classification or object detection."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = detector(image)\n", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained object detection model from TensorFlow Hub that can detect objects in images using the Single Shot MultiBox Detector (SSD) with MobileNet V2."}
{"domain": "Video classification", "framework": "TensorFlow Hub", "functionality": "Video classification model", "api_name": "Video_classification_model_id", "api_call": "hub.load('https://tfhub.dev/google/Video_classification_model_id/1')", "api_arguments": [], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "Kinetics-400", "accuracy": ""}, "description": "A pre-trained video classification model available on TensorFlow Hub for classifying videos based on their content."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage_path = 'path/to/image.jpg'\nimage = tf.image.decode_jpeg(tf.io.read_file(image_path))\nimage = tf.image.resize(image, (640, 640))\nimage = tf.expand_dims(image, 0)\n\nresult = detector(image)\nprint(result['detection_boxes'], result['detection_classes'], result['detection_scores'])", "performance": {"dataset": "COCO", "accuracy": "0.320"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the Single Shot MultiBox Detector (SSD) architecture with MobileNet V2 as the base network."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding text with TensorFlow Hub'])", "performance": {"dataset": "SNLI", "accuracy": "86.9%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "text", "output": "vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image_path', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\nclass_index = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture, which can recognize 1000 different classes from the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/5')", "api_arguments": "input_shape, output_shape", "python_environment_requirements": "tensorflow, tensorflow-hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/5',\n                    input_shape=(224,224,3),\n                    output_shape=(1280,))\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for extracting image feature vectors using TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.7.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3), trainable=False)\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\n# Get the feature vector\nfeatures = model.predict(input_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. It can be used to extract features from images for various tasks like image classification, object detection, and image similarity."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.11.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n\n# Get the top predicted class\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on the ImageNet dataset. It can classify images into 1000 classes and has a top-1 accuracy of 71.8%."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for classifying images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\n\n# Make a prediction\npredictions = model.predict(tf.expand_dims(image, 0))\n\n# Decode the predictions\nclass_names = tf.keras.applications.inception_v3.decode_predictions(predictions, top=1)\nprint(class_names)", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "A pre-trained image classification model using Inception V3 architecture, trained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS-Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors for use in natural language processing tasks such as sentiment analysis, translation, and text classification."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "various text classification tasks", "accuracy": "state-of-the-art"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for a wide range of tasks such as semantic similarity, clustering, and text classification. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]", "trainable": "False"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nhistory = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model (MobileNetV2) for extracting features from images. The model is trained on the ImageNet dataset and can be used for transfer learning."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3])\n])\n\nfeatures = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A compact representation of the MobileNet V2 model trained on ImageNet for image feature extraction. It accepts an input of shape [None, 224, 224, 3] and outputs a feature vector of shape [None, 1280]."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Feature extraction from audio", "api_name": "yamnet", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": [], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "", "accuracy": ""}, "description": "YAMNet is a deep net that predicts audio events from the AudioSet ontology."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=[224, 224, 3],\n                    output_shape=[1280],\n                    trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained feature extraction model that takes an image input of shape [224, 224, 3] and outputs a 1280-dimensional feature vector. The model is based on MobileNetV2 architecture and trained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture. It takes an input image of shape [224, 224, 3] and outputs a feature vector of shape [1280]."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vectors from images", "api_name": "imagenet_mobilenet_v2_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\nimage = tf.random.normal([1, 224, 224, 3])\nfeatures = model(image)\nprint(features.shape)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model that extracts feature vectors from images using TensorFlow Hub"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS-B", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Converts text to dense vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "A text embedding model that converts input text into dense vectors of fixed size using TensorFlow Hub"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "list of sentences", "output": "list of embeddings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['sentence1', 'sentence2'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"feature_vector_url": "URL of the pre-trained model", "input_image": "Input image tensor"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nfeature_vector_url = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4'\n\ninput_image = tf.keras.Input(shape=(224, 224, 3))\nfeatures = hub.KerasLayer(feature_vector_url)(input_image)\n\nmodel = tf.keras.Model(inputs=input_image, outputs=features)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows you to extract image feature vectors using TensorFlow Hub's pre-trained models. The feature vectors can be used in various applications, such as image classification, object detection, and image similarity."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "URL or path to the TensorFlow Hub model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\n# Make predictions\npredictions = model(image)\nclass_index = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "Top-1: 77.9%, Top-5: 93.7%"}, "description": "A pre-trained image classification model using Inception V3 architecture, trained on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "MobileNetV2 is a family of neural network architectures for efficient on-device image classification and related tasks, originally published by Mark Sandler, et al. This model is pre-trained on the ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "inception_v3", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nimage_tensor = tf.zeros([1, 299, 299, 3])\nfeature_vector = hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')(image_tensor)\nprint(feature_vector.shape)", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "This API allows you to extract feature vectors from images using the Inception V3 model, which is pre-trained on the ImageNet dataset. The feature vectors can be used for various machine learning tasks, such as image classification, object detection, and image similarity."}
{"domain": "Text classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["import tensorflow_hub as hub"], "example_code": "import tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1'\nloaded_model = hub.load(model_id)", "performance": {"dataset": "gnews-swivel-20dim", "accuracy": "N/A"}, "description": "Load a text classification model from TensorFlow Hub using a model_id."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world']); print(embeddings)", "performance": {"dataset": "STS-Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext_input = ['This is a sample text']\nvector_output = embed(text_input)", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow_hub": "0.12.0", "tensorflow": "2.5.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224,224,3)),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This TensorFlow Hub model extracts feature vectors from images using the MobileNetV2 architecture trained on ImageNet dataset. It takes input images of shape (224, 224, 3) and outputs a 1280-dimensional feature vector."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio processing", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "", "accuracy": ""}, "description": "Load and use an audio embedding model from TensorFlow Hub to process audio data."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model based on MobileNetV2, designed for efficient feature extraction from images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224,224,3))\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. The model accepts an input image of shape (224, 224, 3) and outputs a 1280-dimensional feature vector."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained image classification model using Inception V3 architecture, available on TensorFlow Hub for easy integration into your projects."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "DeepLab v3", "api_name": "deeplabv3", "api_call": "hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')", "api_arguments": {"input_tensor": "3-D float32 tensor", "output_tensor": "4-D float32 tensor"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')\ninput_image = tf.constant(image, dtype=tf.float32)\noutput_image = model(input_image)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "77.21%"}, "description": "DeepLab v3 is an image segmentation model for TensorFlow Hub that segments images into different classes. It is trained on the PASCAL VOC 2012 dataset and achieves an accuracy of 77.21% on the validation set."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "Semantic Textual Similarity", "accuracy": "0.8"}, "description": "This API provides a pre-trained model to convert text into high-dimensional space, which can be used for various natural language processing tasks such as semantic similarity, clustering, and classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "mobilenet_v2_100_224", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')])", "api_arguments": {"url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "output_shape": "[1001]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', output_shape=[1001])\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNet V2 architecture with 1001 output classes available on TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['sample text'])", "performance": {"dataset": "various", "accuracy": "not specified"}, "description": "The Universal Sentence Encoder model encodes text into high-dimensional vectors that can be used for various natural language processing tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_batch = tf.expand_dims(image_array, 0)\n\npredictions = model(image_batch)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "Load and use a pre-trained model from TensorFlow Hub for image classification"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "text"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "A pre-trained model for generating text embeddings using the Universal Sentence Encoder."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": ["tensorflow", "tensorflow-hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nfeature_extractor = hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimage_input = tf.keras.Input(shape=(224, 224, 3), dtype=tf.float32, name='input_image')\nfeatures = feature_extractor(image_input)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, trained on ImageNet dataset. It is designed for efficient on-device image classification and related tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3])\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\n# Extract features from the image\nfeatures = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained deep learning model that extracts features from images using the MobileNetV2 architecture."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "output_shape": "[1001]", "input_shape": "[224, 224, 3]", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.8"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\npredictions = model.predict(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNet V2 architecture on the ImageNet dataset. The model is designed to classify images into one of 1000 categories. It is available on TensorFlow Hub and can be easily integrated into a Keras model."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained feature extraction model using MobileNetV2 architecture that takes an image input of shape (224, 224, 3) and outputs a 1280-dimensional feature vector. The model is trained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a continuous vector space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text: A string or list of strings to be embedded"], "python_environment_requirements": ["tensorflow>=2.0.0", "tensorflow-hub>=0.12.0"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A pre-trained model for embedding text into a 512-dimensional vector space that can be used for various natural language processing tasks such as text classification, semantic similarity, clustering, and other downstream tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "output_shape": [1001], "input_shape": [224, 224, 3], "trainable": false}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained MobileNetV2 model for image classification on ImageNet dataset with 224x224 input size and 1001 output classes."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4'),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, useful for extracting features from images. The model is trained on ImageNet dataset and has an accuracy of 71.9%."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "various", "accuracy": "not specified"}, "description": "A pre-trained model that encodes text into 512-dimensional embeddings using a deep averaging network (DAN). Useful for a variety of natural language processing tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the model_id"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Model for classifying images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained model for image classification using TensorFlow Hub and Inception V3 architecture."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS", "accuracy": "0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various natural language processing tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"image_input": "A 4D tensor with shape [batch_size, height, width, 3]", "output": "A 2D tensor with shape [batch_size, num_features]"}, "python_environment_requirements": {"tensorflow": ">= 2.0", "tensorflow_hub": ">= 0.8"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False)\n])\n\n# Load an example image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('example_image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\n# Extract the features\nfeatures = model.predict(input_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model that takes a 224x224 RGB image as input and outputs a 1280-dimensional feature vector. Useful for transfer learning and fine-tuning on new image classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\npredictions = model(image)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub and use it to predict the class of an input image."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\ninput_array = tf.keras.applications.mobilenet_v2.preprocess_input(input_array)\n\npredictions = model(input_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained model for image classification using TensorFlow Hub"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "model = tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224,224,3], trainable=False)])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This module uses the MobileNet_v2_100_224 architecture to extract image features. It takes an input image of shape [224, 224, 3] and outputs a feature vector of shape [1280]."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.78 (Spearman correlation)"}, "description": "The Universal Sentence Encoder (USE) is a pre-trained model that encodes text into high-dimensional vectors. It is useful for various natural language processing tasks, such as text classification, semantic similarity, and clustering."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False)\n])\n\nimage = tf.random.normal([1, 224, 224, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on the ImageNet dataset. The model is designed to extract features from images and can be used for various tasks such as image classification, object detection, and image similarity."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3))\n])\n\nfeatures = model.predict(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. The model takes an image input of shape (224, 224, 3) and outputs a 1280-dimensional feature vector."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using a pre-trained model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text: List of text strings to be embedded"], "python_environment_requirements": ["tensorflow>=2.0.0", "tensorflow-hub>=0.8.0"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'How are you?'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and use pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\npredicted_class = tf.argmax(predictions[0])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API allows you to load and use pre-trained models for image classification using TensorFlow Hub. You can use different model ids to load different models and perform image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input: A string or a list of strings to be embedded"], "python_environment_requirements": ["tensorflow>=2.0.0", "tensorflow_hub>=0.8.0"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'Embeddings for text'])", "performance": {"dataset": "SNLI", "accuracy": "86.9%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)\nresult = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "Load and use an image classification model from TensorFlow Hub to classify images into one of 1000 categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture, trained on ImageNet dataset, with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/5')", "api_arguments": {"model_id": "The URL of the TensorFlow Hub model or the path to the model on disk"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "Varies depending on the model used"}, "description": "TensorFlow Hub provides a collection of pre-trained image classification models that can be easily loaded and used for various image classification tasks. These models are trained on the ImageNet dataset and can be fine-tuned for specific use cases."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "Load a pre-trained image classification model from TensorFlow Hub and use it to classify images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Prepare an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\n# Make predictions\npredictions = model(image)\n\n# Decode predictions\nlabels_path = tf.keras.utils.get_file('ImageNetLabels.txt','https://storage.googleapis.com/download.tensorflow.org/data/ImageNetLabels.txt')\nimagenet_labels = np.array(open(labels_path).read().splitlines())\n\npredicted_label = imagenet_labels[np.argmax(predictions[0])]\nprint(predicted_label)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "MobileNetV2 for image classification, pretrained on ImageNet."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model available on TensorFlow Hub, capable of classifying images into a large number of categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": [{"name": "model_id", "type": "string", "description": "The identifier of the pre-trained model"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\npredictions = model(input_image)\n\n", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained model for image classification using TensorFlow Hub"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image recognition and classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": "URL of the model", "python_environment_requirements": "TensorFlow, TensorFlow Hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_arr = tf.keras.preprocessing.image.img_to_array(image)\ninput_arr = np.array([input_arr])\npredictions = model.predict(input_arr)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Converts text to embeddings", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "faster_rcnn_resnet50_v1_640x640", "api_call": "hub.load('https://tfhub.dev/tensorflow/faster_rcnn/resnet50_v1_640x640/1')", "api_arguments": {"image": "A tensor of shape [1, height, width, 3] containing a single image"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/tensorflow/faster_rcnn/resnet50_v1_640x640/1')\nimage_tensor = tf.convert_to_tensor(image, dtype=tf.float32)\ndetections = model(image_tensor)", "performance": {"dataset": "COCO 2017", "accuracy": "37.1 mAP"}, "description": "A pre-trained Faster R-CNN model with ResNet-50 backbone for object detection in images"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\ninput_array /= 255.0\n\n# Make predictions\npredictions = model(input_array)\n\n# Decode predictions to class names\nclass_names = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy())", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture and trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "text"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.8"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a sample text.']\nembeddings = embed(text)\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a vector representation", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various natural language processing tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'My name is John Doe'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various natural language processing tasks, such as semantic similarity, text classification, and clustering."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "tensorflow_hub.KerasLayer", "api_call": "hub.KerasLayer('https://tfhub.dev/google/nnlm-en-dim128/2')", "api_arguments": {"handle": "A string, the handle of the Hub module to load", "kwargs": "Optional keyword arguments"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(handle=\"https://tfhub.dev/google/nnlm-en-dim128/2\")\n])", "performance": {"dataset": "NNLM", "accuracy": "N/A"}, "description": "Loads a TensorFlow Hub module as a Keras Layer, allowing users to incorporate pre-trained models into their own custom models."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/centernet/hourglass_1024x1024/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/centernet/hourglass_1024x1024/1'\ndetector = hub.load(model_id)\n\n# Load an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\n\n# Process the image\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.image.resize(input_image, (1024, 1024))\ninput_image = tf.expand_dims(input_image, axis=0) / 255.0\n\n# Detect objects\nresults = detector(input_image)\n\n# Print the results\nprint(results)", "performance": {"dataset": "COCO", "accuracy": "mAP@0.5IOU"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the CenterNet architecture with an Hourglass backbone."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "A unique identifier for the pre-trained model"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\nimage = tf.image.resize(image, (300, 300))\nimage = tf.expand_dims(image, 0)\n\nresults = detector(image)\n\nprint(results['detection_boxes'])\nprint(results['detection_classes'])\nprint(results['detection_scores'])", "performance": {"dataset": "COCO", "accuracy": "mAP (mean average precision)"}, "description": "A pre-trained model for detecting objects in images using TensorFlow Hub"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "faster_rcnn_resnet50_v1_640x640", "api_call": "hub.load('https://tfhub.dev/tensorflow/faster_rcnn/resnet50_v1_640x640/1')", "api_arguments": {"url": "https://tfhub.dev/tensorflow/faster_rcnn/resnet50_v1_640x640/1"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\ndetector = hub.load('https://tfhub.dev/tensorflow/faster_rcnn/resnet50_v1_640x640/1')\nimage_tensor = tf.image.decode_image(tf.io.read_file('path/to/image.jpg'))\nresult = detector(image_tensor[tf.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "mAP@0.5IOU: 37.1%"}, "description": "A pre-trained Faster R-CNN model with ResNet-50 as the backbone for object detection in images. The model is trained on the COCO dataset and can detect objects from 80 different classes."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": [{"name": "model_id", "type": "string", "description": "The ID of the model to load from TensorFlow Hub"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\n# Load an image, preprocess it, and run the detector\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.image.resize(input_image, (300, 300))\ninput_image = tf.expand_dims(input_image, 0)\n\n# Run the detector\noutput = detector(input_image)\n\n# Process the output\nfor i in range(output['num_detections']):\n    if output['detection_scores'][i] > 0.5:\n        print('Detected object:', output['detection_class_entities'][i], 'with confidence:', output['detection_scores'][i])", "performance": {"dataset": "COCO", "accuracy": "mAP@0.5IOU"}, "description": "A pre-trained object detection model that can detect objects in images using TensorFlow Hub"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input_text": "Text to be embedded"}, "python_environment_requirements": {"tensorflow": "2.0", "tensorflow_hub": "0.8"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "85.1% Pearson correlation"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various text-related tasks such as semantic similarity, clustering, and classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "Load a pre-trained image classification model from TensorFlow Hub and use it to classify images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "image_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5', trainable=False)", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5', trainable=False),\n    tf.keras.layers.Dense(1000, activation='softmax')\n])\n\nmodel.build([None, 299, 299, 3])\nmodel.summary()", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "This API provides a compact representation of images using the Inception V3 model from TensorFlow Hub. It extracts feature vectors from images, which can be used for various machine learning tasks such as classification and clustering."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"url": "https://tfhub.dev/google/universal-sentence-encoder/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "A pre-trained text embedding model that converts sentences into fixed-size vectors, suitable for various natural language processing tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vector from images", "api_name": "imagenet-mobilenet_v2_140_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[140]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4', input_shape=[224, 224, 3], output_shape=[140])\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. It can be used to extract features from images for various machine learning tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "ssd_mobilenet_v2_fpnlite_640x640", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_640x640/1')", "api_arguments": {"input_tensor": "4D image tensor", "output_tensor": "list of tensors representing bounding boxes, classes, scores, and number of detections"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\ndetector = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2_fpnlite_640x640/1')\nimage_tensor = tf.convert_to_tensor(image, dtype=tf.uint8)\ninput_tensor = tf.expand_dims(image_tensor, axis=0)\noutput_dict = detector(input_tensor)", "performance": {"dataset": "COCO", "accuracy": "mAP of 0.32"}, "description": "A pre-trained object detection model that detects objects in images using the Single Shot MultiBox Detector (SSD) architecture with MobileNet V2 FPN-Lite feature extractor."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/universal-sentence-encoder/4'\nembed = hub.load(model_id)\nembeddings = embed(['Hello, world!'])", "performance": {"dataset": "n/a", "accuracy": "n/a"}, "description": "This API allows you to embed text using a pre-trained model from TensorFlow Hub. It can be used for various natural language processing tasks, such as text classification, semantic similarity, and clustering."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["import tensorflow as tf", "import tensorflow_hub as hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the provided model_id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3),\n                    output_shape=(1280,))\n])\n\nimage = tf.random.uniform((1, 224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained model that extracts a 1280-dimensional feature vector from images using MobileNetV2 architecture."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nhistory = model.fit(train_batches, epochs=10, validation_data=validation_batches)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This module uses MobileNet v2 architecture for image feature vector extraction. It takes an input image of shape (224, 224, 3) and outputs a 1280-dimensional feature vector."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nmodel = hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the provided model_id."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained image classification models", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5'\nmodel = hub.KerasLayer(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows users to load pre-trained image classification models from TensorFlow Hub and make predictions on images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["URL"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": ""}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\nimage_array = tf.keras.applications.mobilenet_v2.preprocess_input(image_array)\npredictions = model(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Generate embeddings for text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text: List of strings"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder generates embeddings for input text that can be used for tasks like semantic similarity, classification, and clustering."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'Embedding with Universal Sentence Encoder'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.77"}, "description": "A pre-trained model that converts text into high-dimensional vectors for downstream tasks such as sentiment analysis, translation, and classification."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generate feature vectors from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image tensor", "output": "feature vector"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\nimage = tf.zeros([1, 224, 224, 3])\nfeature_vector = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model that generates feature vectors from images using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/1'\nmodel = hub.load(model_id)\nimage = tf.random.normal([1, 299, 299, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image feature vector model from TensorFlow Hub and use it to extract features from an image."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generate feature vectors from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\n# Load image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Generate feature vector\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a pre-trained MobileNetV2 model for generating feature vectors from images. The feature vectors can be used for various machine learning tasks, such as image classification, clustering, or similarity search."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Image feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(1000, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, trained on ImageNet dataset. The model takes an image of size 224x224x3 as input and outputs a 1280-dimensional feature vector. It can be used for various image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embeds text inputs into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "STS-Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data for machine learning models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/nnlm-en-dim50/1')", "api_arguments": {"model_id": "A string representing the URL or path to the TensorFlow Hub model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/nnlm-en-dim50/1'\nembed = hub.load(model_id)\nembeddings = embed(['Hello, world!'])\nprint(embeddings)", "performance": {"dataset": "Wikipedia", "accuracy": "Not specified"}, "description": "Load a pre-trained text embedding model from TensorFlow Hub, and use it to convert text data into fixed-size vectors that can be used as input for machine learning models."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "A pre-trained image classification model available on TensorFlow Hub for classifying images into one of 1000 categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,))\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model based on MobileNet V2 with 100% depth and 224x224 input size. Useful for extracting features from images."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio feature extraction", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/model_id/1')", "api_arguments": "URL of the model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/model_id/1')\nembeddings = model(samples)", "performance": {"dataset": "AudioSet", "accuracy": "N/A"}, "description": "A pre-trained audio embedding model for extracting features from audio data using TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "latest"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 100% depth and 224x224 input size, trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 with 100% depth_multiplier and 224x224 input image size."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data for machine learning tasks", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext_input = ['This is a sample text.']\nembeddings = embed(text_input)", "performance": {"dataset": "STS benchmark", "accuracy": "85.1%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS (Semantic Textual Similarity) Benchmark", "accuracy": "0.8 (Spearman correlation)"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Semantic segmentation", "api_name": "deeplabv3", "api_call": "hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')", "api_arguments": ["input_tensor"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nsegmentation = hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')\ninput_tensor = tf.random.uniform(shape=[1, 1024, 1024, 3], dtype=tf.float32)\noutput = segmentation(input_tensor)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "87.5"}, "description": "DeepLabv3 is a state-of-the-art semantic segmentation model that uses atrous convolution and fully connected conditional random fields for dense prediction. It can be used for various image segmentation tasks, such as object segmentation, scene parsing, and person segmentation."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracting image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train and evaluate the model\n# model.fit(train_data, train_labels, epochs=5)\n# model.evaluate(test_data, test_labels)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, which is optimized for low-latency and small size, while maintaining competitive accuracy on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["URL of the pre-trained model"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3))\n])\n\nimage = tf.zeros([1, 224, 224, 3])  # A batch of one 224x224x3 image\nfeatures = model(image)  # Features with shape [batch_size, 1280]", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture for image classification tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Load and use a pre-trained image feature vector model", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n\nimage = tf.zeros([1, 224, 224, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This module uses the MobileNet v2 architecture to generate image feature vectors. The model has been pre-trained on the ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "Various", "accuracy": "High"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient > 0.8"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text input"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "Multiple sources (e.g., SNLI, SQuAD)", "accuracy": "Not specified"}, "description": "A pre-trained model for generating text embeddings using TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_arr = tf.keras.preprocessing.image.img_to_array(image)\ninput_arr = np.array([input_arr])\n\npredictions = model.predict(input_arr)", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 130 depth multiplier and 224x224 input size. The model has been trained on the ImageNet dataset and can be used for classifying images into 1000 different categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3], output_shape=[1280])\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model that extracts 1280-dimensional feature vectors from 224x224 RGB images using MobileNetV2 architecture."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])\nprint(embeddings)", "performance": {"dataset": "Several benchmarks", "accuracy": "Not specified"}, "description": "This API allows you to embed text data using the Universal Sentence Encoder model from TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load pre-trained image classification models from TensorFlow Hub for easy integration and usage."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model for image classification", "api_name": "mobilenet_v2_100_224", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2')", "api_arguments": {"handle": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2", "input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.5.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2', input_shape=(224, 224, 3))\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make predictions\npredictions = model(input_image)\n\n# Decode predictions\ndecoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy())\n\nprint(decoded_predictions)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture, with 224x224 input size, and 100% depth multiplier. The model is trained on the ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 130 depth multiplier and input size of 224x224 pixels."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet-resnet_v2_50-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/5')", "api_arguments": "input_shape, batch_size, dtype", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/5',\n                   input_shape=(224, 224, 3),\n                   dtype=tf.float32,\n                   trainable=True)\n])\n\nimage = tf.zeros([1, 224, 224, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 76.3%, Top-5 Accuracy: 93.0%"}, "description": "This module uses the ResNet-50 v2 architecture to extract high-level features from images. It is pre-trained on the ImageNet dataset and can be used for various computer vision tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803521"}, "description": "This API provides a method to convert text into a high-dimensional vector using the Universal Sentence Encoder from TensorFlow Hub. It can be used for tasks such as semantic similarity and clustering."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\n# Example input: a batch of images with shape [batch_size, 224, 224, 3].\nimages = tf.random.uniform((4, 224, 224, 3))\n\n# Extract features for the batch of images.\nfeatures = model(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset, with 100% depth multiplier and 224x224 input image resolution. Useful for extracting features from images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v1_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1024]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/4', input_shape=[224, 224, 3], trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "70.9%"}, "description": "A compact representation of the API for extracting image feature vectors using MobileNetV1 on TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "inception_v3", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/inception_v3/classification/5"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\ndata_root = tf.keras.utils.get_file('flower_photos','https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz', untar=True)\nimage_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255)\nimage_data = image_generator.flow_from_directory(str(data_root), target_size=IMAGE_SHAPE)\nfeature_extractor_url = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nfeature_extractor_layer = hub.KerasLayer(feature_extractor_url, input_shape=(299,299,3))\nfeature_extractor_layer.trainable = False\nmodel = tf.keras.Sequential([\n  feature_extractor_layer,\n  tf.keras.layers.Dense(image_data.num_classes, activation='softmax')\n])\nmodel.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['acc'])\nsteps_per_epoch = np.ceil(image_data.samples/image_data.batch_size)\nhist = model.fit(image_data, epochs=6, steps_per_epoch=steps_per_epoch)", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "Inception V3 model for image classification, pretrained on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["import tensorflow as tf", "import tensorflow_hub as hub"], "example_code": "model = hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the model_id."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text input"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Create embeddings for text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings (sentences)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder (USE) is a pre-trained model that encodes text into high-dimensional vectors, which can be used for various natural language processing tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["import tensorflow_hub as hub"], "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\ndef predict(image):\n    logits = model(image)\n    return logits", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset, with a 224x224 input size and 100% depth multiplier. This model is optimized for low-latency and small size, making it suitable for mobile and edge devices."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text for various NLP tasks", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello, world!'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": ["tensorflow>=2.0.0", "tensorflow_hub>=0.6.0"], "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False)\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature extraction model using MobileNet V2 architecture on ImageNet dataset. It can be used to extract high-level features from images for various applications like image classification, object detection, and image similarity."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the provided model_id."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\nimage = tf.keras.preprocessing.image.load_img('path_to_your_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 130 depth multiplier and 224x224 input size"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "A pre-trained image classification model using TensorFlow Hub that can classify images into 1000 different categories. The model used is Inception V3 trained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf, tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\ninput_image = tf.zeros([1, 224, 224, 3])\noutput = model(input_image)", "performance": {"dataset": "ImageNet", "accuracy": "Top-1: 80.9%, Top-5: 95.5%"}, "description": "A pre-trained model for image classification using MobileNetV2 architecture, trained on ImageNet dataset. The model is optimized for low-latency and small model size, suitable for mobile and edge devices."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image recognition", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, 0)\n\n# Run the model\npredictions = model(image)\n\n# Decode the predictions\nclass_names = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=1)\nprint(class_names)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/classification/5')])", "api_arguments": {"handle": "string", "trainable": "boolean (optional)"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = tf.keras.Sequential([hub.KerasLayer(model_id)])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "Load a pre-trained Inception V3 model from TensorFlow Hub for image classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the provided model_id."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make a prediction\npredictions = model(image_array)\n\n# Decode the predictions\nclass_names = tf.keras.applications.inception_v3.decode_predictions(predictions.numpy())", "performance": {"dataset": "ImageNet", "accuracy": "77.9%"}, "description": "This API allows you to load pre-trained models for image classification using TensorFlow Hub. The example provided demonstrates how to load the Inception V3 model, preprocess an image, make a prediction, and decode the predictions into class names."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_id": "URL or path to the TensorFlow Hub model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nimage = tf.zeros([1, 224, 224, 3])\noutput = model(image)\nprint(output)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API allows users to load a pre-trained image classification model from TensorFlow Hub and use it to classify images. The example provided demonstrates how to load the MobileNetV2 model, create a sample image input, and obtain the classification output."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.zeros([1, 224, 224, 3])  # A batch of images with shape [batch_size, height, width, 3].\nlogits = model(image)  # Logits with shape [batch_size, 1001].", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\n# Load an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\n\n# Convert the image to a tensor\ninput_tensor = tf.keras.preprocessing.image.img_to_array(image)\n\n# Run the object detection\nresults = detector(input_tensor)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the Single Shot MultiBox Detector (SSD) with MobileNet V2."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nimage_tensor = tf.image.decode_jpeg(tf.io.read_file('image.jpg'))\ninput_tensor = tf.expand_dims(image_tensor, 0)\ndetections = detector(input_tensor)", "performance": {"dataset": "COCO", "accuracy": "mAP"}, "description": "The API allows users to detect objects in images using a pre-trained model from TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input: A tensor of strings containing the text to embed"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf; import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "various", "accuracy": "not specified"}, "description": "A pre-trained model that converts text into high-dimensional vectors for various NLP tasks"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "URL of the TensorFlow Hub model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.image.decode_image(tf.io.read_file('path/to/image.jpg'))\nresult = detector(image[tf.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the SSD Mobilenet V2 architecture."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "Model ID", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "The model ID of the TensorFlow Hub object detection model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_tensor = tf.convert_to_tensor(image_array)\ninput_tensor = input_tensor[tf.newaxis, ...]\n\ndetections = detector(input_tensor)\n", "performance": {"dataset": "COCO2017", "accuracy": "mAP@0.5IOU = 0.244"}, "description": "A pre-trained TensorFlow Hub object detection model that can detect multiple objects in an image, based on the SSD MobileNet V2 architecture."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load image and preprocess\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\n\n# Make prediction\npredictions = model(tf.expand_dims(image, 0))\n\n# Decode predictions\nclass_names = tf.keras.applications.inception_v3.decode_predictions(predictions.numpy(), top=5)\nfor class_name in class_names[0]:\n    print(class_name)", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "This API allows you to load a pre-trained Inception V3 model from TensorFlow Hub for image classification tasks. The model is trained on the ImageNet dataset and achieves an accuracy of 77.9%."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various natural language processing tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data for machine learning tasks", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.11.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nsentences = ['Hello, world!', 'Embeddings are fun!']\nembeddings = embed(sentences).numpy()", "performance": {"dataset": "STS Benchmark", "accuracy": "0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['sample sentence'])", "performance": {"dataset": "Various datasets", "accuracy": "Not mentioned"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\nresult = detector(image)\n", "performance": {"dataset": "COCO", "accuracy": "0.320"}, "description": "This API allows for object detection in images using a pre-trained model from TensorFlow Hub. The model used in this example is the SSD MobileNet V2, which has been trained on the COCO dataset."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\nimage = tf.image.resize(image, (300, 300))\nimage = tf.expand_dims(image, axis=0)\n\nresult = detector(image)\nprint(result['detection_boxes'], result['detection_scores'], result['detection_classes'])", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A TensorFlow Hub model for detecting objects in images using the SSD Mobilenet V2 architecture"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\nimage = tf.image.decode_jpeg(tf.io.read_file('path/to/image.jpg'))\nconverted_image = tf.image.convert_image_dtype(image, tf.float32)[tf.newaxis, ...]\nresult = detector(converted_image)", "performance": {"dataset": "OpenImages V4", "accuracy": "Not specified"}, "description": "A pre-trained image object detection model that detects objects in images using the Faster R-CNN architecture with Inception-ResNet V2 as the feature extractor."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset with input size of 224x224 pixels and output size of 1280 features."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/efficientdet/lite0/detection/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["import tensorflow as tf", "import tensorflow_hub as hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/efficientdet/lite0/detection/1'\nloaded_model = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image_path')\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = image / 255.0\nimage = tf.expand_dims(image, 0)\n\noutput = loaded_model(image)", "performance": {"dataset": "", "accuracy": ""}, "description": "Load a pre-trained TensorFlow Hub model for image object detection and use it to detect objects in an input image."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.78"}, "description": "This module uses the Universal Sentence Encoder model to preprocess text by converting it into embeddings."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/4'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\npredictions = model(input_image)\npredicted_class = tf.argmax(predictions[0]).numpy()", "performance": {"dataset": "ImageNet", "accuracy": "78.1%"}, "description": "This example demonstrates how to load a pre-trained Inception V3 model from TensorFlow Hub and use it to classify an image. The model has been trained on the ImageNet dataset and achieves 78.1% accuracy."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A pre-trained model that converts text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow_hub": ">=0.12.0", "tensorflow": ">=2.0.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,))\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset with 100% width and 224x224 input size."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A pre-trained model that encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3])\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API extracts feature vectors from images using the MobileNetV2 model pretrained on the ImageNet dataset. It can be used for tasks like image classification, object detection, and image similarity."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False), tf.keras.layers.Dense(1)])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture for extracting features from images. The model is trained on ImageNet dataset and can be used for various computer vision tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3], output_shape=[1280]),\n  tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This model extracts feature vectors from images using the MobileNetV2 architecture trained on the ImageNet dataset. The input images should have a shape of [224, 224, 3] and the output feature vectors have a shape of [1280]."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nfeatures = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobilenetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow-hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture trained on ImageNet dataset. The model can be used to classify images into 1000 different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load pre-trained image classification models from TensorFlow Hub for transfer learning and fine-tuning."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "mobilenet_v2_140_224", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', input_shape=(224,224,3))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with input size of 224x224 pixels."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\nimage = tf.keras.Input(shape=(224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model that uses MobileNetV2 architecture to extract feature vectors from images. It is trained on the ImageNet dataset and can be used for various computer vision tasks, such as image classification, object detection, and image similarity."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Image feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": [224, 224, 3], "output_shape": [1280]}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224,224,3), trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train the model with your data\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, trained on ImageNet dataset. It can be used for image classification, object detection, and other computer vision tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\npredictions = model(input_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "Load a pre-trained model for image classification from TensorFlow Hub and use it to classify images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nloaded_model = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = loaded_model(image_array)\n\n", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 accuracy: 71.0%, Top-5 accuracy: 90.0%"}, "description": "This API allows you to load a pre-trained image classification model from TensorFlow Hub and use it to classify images. The example provided uses the MobileNet V2 model trained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, axis=0)\n\nfeatures = model.predict(input_image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting image feature vectors using TensorFlow Hub. The model is trained on the ImageNet dataset and has an accuracy of 71.9%."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')])", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model available on TensorFlow Hub that can be used to classify images into various categories. The example provided demonstrates how to load the Inception V3 model and make predictions on a given image."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "Image tensor", "output": "Feature vector tensor"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimage = tf.zeros([1, 224, 224, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This module uses MobileNet v2 architecture for image feature extraction. It takes an image tensor as input and returns a feature vector tensor."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow>=2.0, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world']); print(embeddings)", "performance": {"dataset": "STS Benchmark", "accuracy": "0.8"}, "description": "A pre-trained text embedding model that converts sentences into fixed-size vectors, suitable for various NLP tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "TensorFlow 2.x, TensorFlow Hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.8"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Convert text into a dense vector representation", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5'\nmodel = hub.load(model_id)\nimage = tf.random.uniform((1, 224, 224, 3))\nprediction = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load pre-trained image classification models from TensorFlow Hub for various tasks such as object recognition, fine-grained classification, and more."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3),\n                    trainable=False),\n    tf.keras.layers.Dense(5, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset, suitable for extracting features from images."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio feature extraction", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/model_id/1')", "api_arguments": "None", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/model_id/1')\nembeddings = model(samples, sample_rate)", "performance": {"dataset": "Unknown", "accuracy": "Not provided"}, "description": "This API allows you to extract audio features from audio samples using a pre-trained model from TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_image": "A 224x224 image"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimg = tf.constant([input_image])\nfeatures = model(img)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a pre-trained model to extract feature vectors from 224x224 images using MobileNetV2 architecture."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model, MobileNetV2, for TensorFlow Hub that extracts features from images. The input images should be 224x224 pixels with 3 channels (RGB). The output is a 1280-dimensional feature vector. The model is trained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Loading and using a pre-trained image feature vector model", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   trainable=False),\n    tf.keras.layers.Dense(1)])\n\nmodel.build([None, 224, 224, 3])\nmodel.summary()", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture with 100% depth and 224x224 input size. This model can be used for transfer learning to extract meaningful features from images and fine-tune on a specific classification task."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generating image feature vectors", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3))\n])\n\nimage_tensor = tf.random.uniform(shape=[1, 224, 224, 3])\nfeature_vector = model(image_tensor)\nprint(feature_vector.shape)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API generates a feature vector for an input image using the MobileNetV2 model trained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "TensorFlow 2.x, TensorFlow Hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "pearson_correlation=0.803"}, "description": "A model that encodes text into 512-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224,224,3)", "output_shape": "(1280,)", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n  input_shape=(224,224,3),\n  trainable=False),\n  tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model that extracts meaningful features from images using MobileNetV2 architecture with 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using a pre-trained model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id: The ID of the pre-trained model to be used for image classification"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\n\n# Make a prediction\npredictions = model(tf.expand_dims(image, 0))", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "This API allows users to perform image classification using a pre-trained TensorFlow Hub model. The model can be loaded using the model_id, and the API provides functionality for loading and preprocessing images, as well as making predictions."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and use a pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\ndef classify_image(image_path):\n  image = tf.keras.preprocessing.image.load_img(image_path, target_size=(224, 224))\n  image_array = tf.keras.preprocessing.image.img_to_array(image)\n  image_array = tf.expand_dims(image_array, 0)\n  predictions = model(image_array)\n  return predictions.numpy()", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 100% depth multiplier, trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\n        'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n        input_shape=(224, 224, 3)\n    )\n])\n\nimage_tensor = tf.zeros(shape=(1, 224, 224, 3))\nfeature_vector = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model that takes an image tensor as input and returns a 1280-dimensional feature vector."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STSbenchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation 0.803"}, "description": "Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5'\nmodel = hub.load(model_id)\nimage = tf.random.uniform([1, 299, 299, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Loads a pre-trained image feature vector model from TensorFlow Hub, allowing users to extract features from images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "77.9%"}, "description": "A pre-trained model for image classification using Inception V3 architecture and trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v3_small_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1001,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5',\n                   input_shape=(224,224,3))\n])", "performance": {"dataset": "ImageNet", "accuracy": "60.3%"}, "description": "A compact, pre-trained image feature vector model, using MobileNetV3 architecture, trained on ImageNet dataset."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Semantic image segmentation", "api_name": "deeplabv3", "api_call": "hub.KerasLayer('https://tfhub.dev/tensorflow/deeplabv3/1', output_key='SemanticPredictions')", "api_arguments": {"input": "A 3-channel image tensor", "output": "A tensor with semantic labels"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nimage = tf.keras.Input(shape=(None, None, 3), dtype=tf.uint8, name='image_input')\nsegmentation = hub.KerasLayer('https://tfhub.dev/tensorflow/deeplabv3/1', output_key='SemanticPredictions')(image)\nmodel = tf.keras.Model(inputs=image, outputs=segmentation)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "82.1% mean intersection-over-union (mIOU)"}, "description": "DeepLabv3 is an image segmentation model for TensorFlow Hub that assigns semantic labels to every pixel of an input image. It is based on the DeepLabv3 architecture and trained on the PASCAL VOC 2012 dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text into high-dimensional space", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "Various text sources", "accuracy": "Not applicable"}, "description": "A pretrained text embedding model that maps text to high-dimensional vectors."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model for image classification", "api_name": "mobilenet_v2_100_224", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')])", "api_arguments": ["model_url", "output_shape"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\n        'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4',\n        output_shape=[1001]\n    )\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "Load a pre-trained MobileNetV2 model for image classification from TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input: A tensor of strings, output: A tensor of shape (num_examples, 512)", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'I love machine learning.'])\nprint(embeddings)", "performance": {"dataset": "SNLI, MultiNLI, SICK", "accuracy": "86.3%, 76.6%, 88.0%"}, "description": "A pre-trained model for encoding text into a 512-dimensional vector. Useful for various NLP tasks like semantic similarity, sentiment analysis, and text classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and use pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/resnet_v2_50/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/resnet_v2_50/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.random.uniform((1, 224, 224, 3))\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 76.3%, Top-5 Accuracy: 93.2%"}, "description": "This API allows you to load and use pre-trained models for image classification from TensorFlow Hub. It provides a simple way to integrate state-of-the-art image classification models into your applications."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Convert images into feature vectors", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"python_version": "3", "tensorflow_version": ">=2.0.0", "tensorflow_hub_version": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   output_shape=(1280,))\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model that converts images into a 1280-dimensional feature vector using MobileNetV2 architecture trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text for machine learning", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "Various", "accuracy": "Not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"model_id": "URL or local path to the pre-trained model"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub for use in TensorFlow 2.x."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Loads a pre-trained image feature vector model from TensorFlow Hub using the specified model_id."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5'\nmodel = hub.load(model_id)\n\ninput_image = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(input_image)\ninput_batch = tf.expand_dims(input_array, 0)\n\npredictions = model(input_batch)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained model for image classification using TensorFlow Hub. This example demonstrates the use of the MobileNet V2 model to classify images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading and using pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "This API allows users to load pre-trained models from TensorFlow Hub for image classification tasks. It provides access to a variety of models, such as MobileNet, Inception, and ResNet, which have been trained on large datasets like ImageNet. Users can easily load a model using its model_id and perform image classification on their own images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v3_small_100_224_feature_vector", "api_call": "hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5\")", "api_arguments": {"input_resolution": "224x224", "model_variant": "MobileNetV3Small", "weights": "imagenet"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5\", input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(10, activation=\"softmax\")\n])\n\n# Train the model\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))", "performance": {"dataset": "ImageNet", "accuracy": "67.6%"}, "description": "This module takes an input image of size 224x224 and returns a feature vector representing the image using the MobileNetV3Small model pretrained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vector from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimage_tensor = tf.zeros([1, 224, 224, 3])\nfeature_vector = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This API extracts a feature vector from images using the MobileNetV2 model trained on the ImageNet dataset. It is useful for transfer learning and other tasks that require image embeddings."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Converts text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello World!'])\nprint(embeddings)", "performance": {"dataset": "Common benchmarks", "accuracy": "State-of-the-art"}, "description": "A pre-trained model that encodes text into high-dimensional vectors for various natural language processing tasks"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3),\n                    trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\nmodel.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained model that takes an image input and outputs a 1280-dimensional feature vector representing the image, which can be used for various tasks such as classification, clustering, and similarity search."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make predictions\npredictions = model(image_array)\n\n# Decode the predictions\nclass_names = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy(), top=1)\nprint(class_names)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model based on the MobileNetV2 architecture. It is trained on the ImageNet dataset and can classify images into 1000 different classes. The model is optimized for mobile and edge devices with a small memory footprint and fast inference time."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nimage_tensor = tf.image.resize(image, (224, 224))\npredictions = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 71.0%, Top-5 Accuracy: 90.1%"}, "description": "A pre-trained image classification model using TensorFlow Hub that can classify images into 1000 different categories. The model is based on the MobileNetV2 architecture and has been trained on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding generation", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various NLP tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using TensorFlow", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "Load MobileNetV2 model pre-trained on ImageNet dataset for image classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": ["image_url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')\ndef classify(image_url):\n    image = tf.keras.utils.get_file('image.jpg', image_url)\n    image = tf.keras.preprocessing.image.load_img(image, target_size=(224, 224))\n    image = tf.keras.preprocessing.image.img_to_array(image)\n    image = tf.expand_dims(image, axis=0)\n    image = tf.keras.applications.mobilenet_v2.preprocess_input(image)\n    predictions = model(image)\n    return predictions", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with input size 224x224, trained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained model", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.11.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "performance": {"dataset": "ImageNet", "accuracy": "0.919"}, "description": "This module uses the MobileNet v2 architecture for image classification, pre-trained on the ImageNet dataset. The model accepts image input of size 224x224 pixels and outputs a 1001-element vector of logits."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and use pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path_to_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows users to load and use pre-trained image classification models from TensorFlow Hub. The models can be used to classify images into various categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "imagenet-mobilenet_v2_100_224-classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"input": "224x224 RGB image", "output": "1001 element vector of logits"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Preprocess image\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make prediction\npredictions = model(input_image)\n\n# Get class label\npredicted_class = tf.argmax(predictions, axis=-1)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNet V2 architecture on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\ninput_array = input_array / 255.0\n\n# Make predictions\npredictions = model(input_array)\n\n# Get the top predicted class\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 accuracy of 80.1% and Top-5 accuracy of 95.1%"}, "description": "A pre-trained model for image classification using MobileNetV2 architecture with an input size of 224x224 pixels."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "output_shape": "[1001]"}, "python_environment_requirements": {"tensorflow": "2.0", "tensorflow_hub": "0.7"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', output_shape=[1001])\n\n# Load an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.mobilenet_v2.preprocess_input(image)\nimage = tf.expand_dims(image, 0)\n\n# Make predictions\npredictions = model(image)\n\n# Decode predictions\ndecoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy(), top=5)\n\nfor i, (imagenet_id, label, score) in enumerate(decoded_predictions[0]):\n    print('{}. {}: {:.2f}%'.format(i + 1, label, score * 100))", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "MobileNetV2 is a lightweight deep learning model for image classification. It is pre-trained on the ImageNet dataset and can be loaded using TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nloaded_model = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load an image classification model from TensorFlow Hub by providing the model_id. This example demonstrates how to load the Inception V3 model."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.utils.get_file('image.jpg','https://example.com/image.jpg')\nimg = tf.keras.preprocessing.image.load_img(image, target_size=(224, 224))\nimg_array = tf.keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0)\n\npredictions = model.predict(img_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"image_url": "URL of the image to be classified", "image_size": "224x224 pixels"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\ndef classify_image(image_url):\n  image = tf.keras.utils.get_file('image.jpg', image_url)\n  image = tf.keras.preprocessing.image.load_img(image, target_size=(224, 224))\n  image = tf.keras.preprocessing.image.img_to_array(image)\n  image = tf.expand_dims(image, 0)\n  return model(image)\n\nresult = classify_image('https://example.com/image.jpg')", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a pre-trained image classification model based on MobileNetV2 architecture, which can classify images into 1000 different categories. The model is trained on ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "mobilenet_v2_100_224", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')])", "api_arguments": {"model_url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "output_shape": "[1001]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', output_shape=[1001])\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\n# Make predictions\npredictions = model.predict(input_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for image classification using TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nresult = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "Varies depending on the model"}, "description": "TensorFlow Hub provides a variety of pre-trained image classification models that can be easily loaded and used for various image classification tasks. The models are trained on the ImageNet dataset and their performance varies depending on the specific model chosen."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/universal-sentence-encoder/4'\nmodel = hub.load(model_id)\nembeddings = model(['Hello World'])", "performance": {"dataset": "n/a", "accuracy": "n/a"}, "description": "Load a TensorFlow Hub model for text preprocessing and generate embeddings for input text."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection", "api_name": "Model ID", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "URL of the model from TensorFlow Hub"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\nloaded_model = hub.load(model_id)\n\nimage_tensor = tf.convert_to_tensor(image, dtype=tf.uint8)\ninput_tensor = tf.expand_dims(image_tensor, 0)\ndetections = loaded_model(input_tensor)", "performance": {"dataset": "COCO", "accuracy": "mAP"}, "description": "A pre-trained TensorFlow Hub model for object detection in images using the SSD MobileNet V2 architecture."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make predictions\npredictions = model(image_array)\n\n# Get the top predicted class\npredicted_class = tf.argmax(predictions[0]).numpy()", "performance": {"dataset": "ImageNet", "accuracy": "94.1%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on the ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "A string representing the TensorFlow Hub model URL"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\nmodel = hub.load(model_id)\n\n# Load an image\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\n\n# Detect objects in the image\nresult = model(image)\n\n# Print detected objects\nfor obj in result['detection_boxes']:\n    print(obj)", "performance": {"dataset": "COCO", "accuracy": "mAP@0.5IOU"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the Single Shot MultiBox Detector (SSD) with MobileNetV2 backbone."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\nimage = tf.image.decode_jpeg(tf.io.read_file('image.jpg'))\nresult = detector(image[np.newaxis, ...])", "performance": {"dataset": "OpenImages V4", "accuracy": "Not specified"}, "description": "Detect objects in an image using TensorFlow Hub and the Faster R-CNN model with Inception ResNet V2"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Prepare an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make predictions\npredictions = model(image_array)\n\n# Decode predictions\npredicted_class = tf.keras.applications.mobilenet_v2.decode_predictions(predictions.numpy(), top=1)[0][0][1]", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture and trained on ImageNet dataset. The model is available on TensorFlow Hub and can be used for classifying images into one of 1000 classes."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "ssd_mobilenet_v2", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/fpnlite_640x640/1')", "api_arguments": {"image": "Input image tensor", "num_detections": "Number of detected objects", "detection_boxes": "Bounding boxes for detected objects", "detection_classes": "Class labels for detected objects", "detection_scores": "Confidence scores for detected objects"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\ndetector = hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/fpnlite_640x640/1')\n\n# Preprocess image\ninput_image = tf.image.resize(image, (640, 640))\ninput_image = tf.expand_dims(input_image, axis=0)\n\n# Run detector\noutput = detector(input_image)\n\n# Extract results\nnum_detections = output['num_detections'].numpy()\ndetection_boxes = output['detection_boxes'].numpy()\ndetection_classes = output['detection_classes'].numpy()\ndetection_scores = output['detection_scores'].numpy()", "performance": {"dataset": "COCO", "accuracy": "mAP 0.32"}, "description": "A pre-trained object detection model based on the SSD Mobilenet V2 architecture, capable of detecting multiple objects in an image. The model is trained on the COCO dataset and achieves a mean Average Precision (mAP) of 0.32."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": "2.0.0", "tensorflow_hub": "0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'This is a test'])", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "embeddings = embed(['Hello world'])", "performance": {"dataset": "STS Benchmark", "accuracy": "Mean Squared Error (MSE) of 0.30 on the development set"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding generation", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/universal-sentence-encoder/4'\nembed = hub.load(model_id)\ntext = ['This is an example sentence.']\nembeddings = embed(text).numpy()", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.8"}, "description": "This API generates text embeddings using TensorFlow Hub, which can be used for various natural language processing tasks such as semantic similarity, clustering, and classification."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\nloaded_model = hub.load(model_id)\n\nimage = tf.io.read_file('image.jpg')\ndecoded_image = tf.image.decode_jpeg(image)\nresized_image = tf.image.resize(decoded_image, [640, 480])\ninput_image = tf.expand_dims(resized_image, 0)\n\nresult = loaded_model(input_image)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A TensorFlow Hub model for detecting objects in images using the SSD MobileNet V2 architecture."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "faster_rcnn_inception_resnet_v2_atrous_oid_v4", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/inception_resnet_v2/atrous/oid_v4/1')", "api_arguments": {"image_tensor": "A tensor of shape [batch_size, height, width, 3] containing the input images."}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/faster_rcnn/inception_resnet_v2/atrous/oid_v4/1')\nimage_tensor = tf.zeros([1, 640, 640, 3])\noutput = model(image_tensor)", "performance": {"dataset": "Open Images Dataset v4", "accuracy": "mAP@0.5IOU = 0.480"}, "description": "A pre-trained Faster R-CNN model with Inception-ResNet-v2 feature extractor for object detection on the Open Images Dataset v4."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/centernet/hourglass_512x512/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/centernet/hourglass_512x512/1'\ndetector = hub.load(model_id)\n\nimage = tf.io.read_file('path/to/image.jpg')\nimage = tf.image.decode_jpeg(image, channels=3)\nimage = tf.image.convert_image_dtype(image, tf.float32)\nimage = tf.image.resize(image, (512, 512))\n\nresult = detector(image[tf.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "41.0 mAP"}, "description": "A pre-trained model for object detection in images using TensorFlow Hub and the CenterNet Hourglass architecture."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STSbenchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "Extracts feature vectors from images using the MobileNet V2 model pretrained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)\ninput_image = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(input_image)\ninput_batch = tf.expand_dims(input_array, 0)\npredictions = model(input_batch)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using TensorFlow Hub that can classify images into one of 1000 classes. The example code demonstrates how to load the model, preprocess an input image, and obtain predictions."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Transforms text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder (USE) is a pre-trained model that encodes text into 512-dimensional vectors. It can be used for various natural language processing tasks such as text classification, semantic similarity, and clustering."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in an image", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage_np = tf.keras.preprocessing.image.img_to_array(image)\ninput_tensor = tf.convert_to_tensor(image_np)\ninput_tensor = input_tensor[tf.newaxis, ...]\n\noutput_dict = detector(input_tensor)\n\nfor i in range(output_dict['detection_scores'][0].shape[0]):\n    if output_dict['detection_scores'][0][i] > 0.5:\n        print(output_dict['detection_class_entities'][0][i].numpy().decode('utf-8'), ':', output_dict['detection_scores'][0][i].numpy())", "performance": {"dataset": "OpenImages V4", "accuracy": "mAP@0.5IOU: 37.6%"}, "description": "A pre-trained Faster R-CNN model with Inception-ResNet-v2 feature extractor on OpenImages V4 dataset for object detection."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Converts text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text: A string or a list of strings to be embedded"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3), trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture with 100% depth and 224x224 input size. The model is trained on the ImageNet dataset and can be used for feature extraction, fine-tuning, or as a component in a larger model."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data for machine learning tasks", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks"}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vectors from images", "api_name": "image_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/5')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\nfeatures = model.predict(image)\nprint(features)", "performance": {"dataset": "ImageNet", "accuracy": "78.1%"}, "description": "This API provides a pre-trained Inception V3 model for extracting feature vectors from images. It is built on TensorFlow Hub and requires TensorFlow and TensorFlow Hub packages. The example code demonstrates how to load an image, preprocess it, and extract features using the API."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracting feature vectors from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3))\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Extract the feature vector\nfeature_vector = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API allows you to extract feature vectors from images using the MobileNetV2 model trained on the ImageNet dataset. The feature vectors can be used for various machine learning tasks, such as image classification, image retrieval, or transfer learning."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v3_small_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1024]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v3_small_100_224/feature_vector/5', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model with your data\n# model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))", "performance": {"dataset": "ImageNet", "accuracy": "61.9%"}, "description": "This module is an image feature vector module that takes an input image of size 224x224x3 and outputs a feature vector of size 1024. It uses the MobileNetV3-small model architecture with a width multiplier of 1.0, pretrained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow-hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "This API provides pre-trained image classification models using TensorFlow Hub for various architectures like Inception V3, MobileNet, and others. These models are trained on the ImageNet dataset and can be used for transfer learning or fine-tuning on custom datasets."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet_mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"module_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1001]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4\")\n])\n\n# Prepare an image\nimage = tf.keras.preprocessing.image.load_img(\"path/to/your/image.jpg\", target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\n# Make a prediction\npredictions = model.predict(input_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset. It can be used for classifying images into 1000 different categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(train_data, train_labels, epochs=10, validation_data=(val_data, val_labels))", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for extracting image feature vectors. The model takes an image of size 224x224 and returns a 1280-dimensional feature vector."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, height, width, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_batch = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_batch)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "Extracts a 1280-dimensional feature vector from images using the MobileNetV2 architecture trained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(299, 299))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_tensor = tf.expand_dims(image_array, 0)\n\npredictions = model(image_tensor)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows users to perform image classification using pre-trained models from TensorFlow Hub. Users can load a model using its model_id and then use it to classify images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image feature vectors", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False)\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.mobilenet_v2.preprocess_input(image)\n\n# Extract feature vector\nfeature_vector = model.predict(image[np.newaxis, ...])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2')", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "Load a pre-trained image classification model from TensorFlow Hub, providing a model_id for the desired model."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224, 224, 3),\n                    trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A Keras layer that wraps a pre-trained MobileNetV2 model for feature extraction. It takes an input image of size 224x224x3 and outputs a 1280-dimensional feature vector."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make a prediction\nprediction = model(image_array)\n\n# Decode the prediction\ndecoded_prediction = tf.keras.applications.mobilenet_v2.decode_predictions(prediction.numpy())", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "Pre-trained image classification model using MobileNetV2 architecture on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["input_shape", "output_shape", "trainable"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained feature vector model that can be used for image classification and other computer vision tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "A pre-trained image classification model using Inception V3 architecture, trained on ImageNet dataset. The model can be used to classify images into 1000 different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224", "api_call": "hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4\")", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4\")\n])\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained model for image classification using MobileNetV2 architecture with 224x224 input size, trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STSbenchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This module uses the MobileNet v2 architecture to extract feature vectors from images. It has been pre-trained on the ImageNet dataset and can be fine-tuned for various classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "0.779"}, "description": "A pre-trained model for image classification using Inception V3 architecture, available on TensorFlow Hub. The model has been trained on the ImageNet dataset and can be used to classify images into 1000 different classes."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.8"}, "description": "A text embedding model that converts sentences into fixed-length vectors, useful for various natural language processing tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracts feature vectors from images", "api_name": "imagenet-mobilenet_v2", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeature_vector = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 71.9%, Top-5 Accuracy: 91.0%"}, "description": "A pre-trained image feature vector model that extracts feature vectors from images using MobileNetV2 architecture. It is trained on the ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3],\n                   output_shape=[1280],\n                   trainable=False),\n    tf.keras.layers.Dense(5, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture with 100% depth and 224x224 input image size. It can be used for transfer learning to extract features from images and fine-tune for specific classification tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "URL of the model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding with TensorFlow Hub'])\nprint(embeddings)", "performance": {"dataset": "Common benchmarks", "accuracy": "State-of-the-art performance"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "mobilenet_v2_100_224", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub\nimport tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained MobileNetV2 model that takes an input image of shape (224, 224, 3) and outputs a 1280-dimensional feature vector. Useful for image classification, object detection, and other computer vision tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained Image Classifier", "api_name": "mobilenet_v2", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')])", "api_arguments": {"url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "output_shape": "[1001]"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', output_shape=[1001])])\nmodel.build([None, 224, 224, 3])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on TensorFlow Hub. It can be used to classify images into 1000 different categories with high accuracy."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_resnet_v2_50_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/5')", "api_arguments": ["url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": ""}, "description": "This model is trained on the ImageNet dataset and can be used to extract feature vectors from images using the ResNet-50 architecture."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generate image feature vectors", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"source": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3))\n])\n\nimage = tf.keras.preprocessing.image.load_img('example_image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\nfeature_vector = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained model that generates feature vectors from images using MobileNetV2 architecture with 100% depth and 224x224 input size. The model is trained on the ImageNet dataset and achieves 71.9% top-1 accuracy."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Universal Sentence Encoder", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Preprocess image, run the model, and postprocess the result\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\nimage_array = tf.keras.applications.mobilenet_v2.preprocess_input(image_array)\n\npredictions = model(image_array)\n\n# Get the top predicted class\npredicted_class = tf.argmax(predictions[0]).numpy()", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset, with an input size of 224x224 pixels."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodule_url = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4'\nmodel = hub.load(module_url)\n\nimage_tensor = tf.zeros([1, 224, 224, 3])\nfeature_vector = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "Pretrained Mobilenet V2 model for extracting image feature vectors using TensorFlow Hub."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Image segmentation model", "api_name": "deeplabv3", "api_call": "hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')", "api_arguments": {"input": "tensor", "output": "tensor"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/tensorflow/deeplabv3/1')\ninput_image = tf.constant(input_data)\nsegmentation_output = model(input_image)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": ">=70.0%"}, "description": "A pre-trained DeepLabV3 model for image segmentation using TensorFlow Hub."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3))\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. It can be used for transfer learning to extract features from images."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Audio feature extraction", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/yamnet/1'\nmodel = hub.load(model_id)\n\n# Load a wav file\nfilename = 'path/to/your/audio/file.wav'\nwav_data = tf.io.read_file(filename)\n\n# Extract features\nscores, embeddings, log_mel_spectrogram = model(wav_data)", "performance": {"dataset": "AudioSet", "accuracy": "81.7% mAP"}, "description": "YAMNet is a pre-trained deep learning model that can extract audio features. It is trained on the AudioSet dataset and can be used for various audio classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Load and use pre-trained image segmentation models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/lite-model/deeplabv3/1/default/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["pip install tensorflow-hub"], "example_code": "import tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/tensorflow/lite-model/deeplabv3/1/default/1')\nsegmentation = model(image_tensor)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "0.91"}, "description": "TensorFlow Hub provides pre-trained image segmentation models that can be loaded and used for various tasks such as semantic segmentation. The example code demonstrates how to load a DeepLabV3 model and perform segmentation on an input image tensor."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracting feature vectors from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False)\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path_to_your_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Extract feature vector from the image\nfeature_vector = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API allows you to extract feature vectors from images using the MobileNetV2 model trained on ImageNet dataset. The feature vectors can be used for various machine learning tasks such as image classification, object detection, and more."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS-Benchmark", "accuracy": "0.803"}, "description": "A deep averaging network (DAN) encoder that maps text inputs to 512-dimensional embeddings. Useful for various NLP tasks such as sentiment analysis, semantic similarity, and document clustering."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world']); print(embeddings)", "performance": {"dataset": "STSbenchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained on a variety of data sources and a variety of tasks with the aim of dynamically accommodating a wide variety of natural language understanding tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'I am learning about embeddings.'])\nprint(embeddings)", "performance": {"dataset": "Various tasks", "accuracy": "State-of-the-art"}, "description": "Pre-trained model to embed input text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\npredictions = model.predict(input_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNet V2 architecture and trained on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_id": "URL of the TensorFlow Hub model"}, "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Depends on the specific model"}, "description": "This API allows you to load a pre-trained image classification model from TensorFlow Hub for use in your applications."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4", "trainable": "Optional: Set to True if you want to fine-tune the model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0% top-1 accuracy"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, trained on ImageNet dataset, for extracting features from images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "A pre-trained model for embedding text into high-dimensional vectors that can be used for a wide range of tasks such as sentiment analysis, semantic similarity, and classification."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nloaded_model = hub.load(model_id)\n\n# Example image\nimage = tf.keras.utils.get_file('image.jpg','https://storage.googleapis.com/download.tensorflow.org/example_images/grace_hopper.jpg')\n\n# Preprocess image\nimage = tf.keras.preprocessing.image.load_img(image, target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.mobilenet_v2.preprocess_input(image)\nimage_batch = tf.expand_dims(image, 0)\n\n# Make predictions\npredictions = loaded_model(image_batch)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture, trained on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "mobilenet_v2_100_224", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": "URL of the model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')\ninput_image = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_tensor = tf.keras.preprocessing.image.img_to_array(input_image)\ninput_tensor = tf.expand_dims(input_tensor, 0)\ninput_tensor = tf.keras.applications.mobilenet_v2.preprocess_input(input_tensor)\npredictions = model(input_tensor)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "Pre-trained image classification model using MobileNetV2 architecture with input size of 224x224 pixels."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                    input_shape=(224,224,3),\n                    trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model that can be used to extract features from images. The model is based on the MobileNetV2 architecture and is trained on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vector from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4\")", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4\",\n                   input_shape=(224, 224, 3),\n                   output_shape=[1280],\n                   trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API provides a pre-trained model to extract feature vectors from images using the MobileNetV2 architecture trained on the ImageNet dataset. It can be used for various image classification tasks and transfer learning."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Generate embeddings for text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "A pre-trained model for generating text embeddings using the Universal Sentence Encoder. It can be used for various NLP tasks like semantic similarity, text classification, and clustering."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'),\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\npredictions = model.predict(input_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.68%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 100% depth and 224x224 input size, trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, trained on ImageNet dataset. It can be used for feature extraction from images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input_text": "string or list of strings"}, "python_environment_requirements": {"tensorflow": ">= 2.0.0", "tensorflow_hub": ">= 0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "Multiple datasets", "accuracy": "STS benchmark: 0.77"}, "description": "A pre-trained text embedding model that converts text into high-dimensional vectors that can be used for various NLP tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nloaded_model = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract features from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=[224, 224, 3],\n                   output_shape=[1280])\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_batch = tf.expand_dims(image_array, axis=0)\n\nfeatures = model.predict(image_batch)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture. It can be used to extract features from images, which can be used for various machine learning tasks like image classification, object detection, and more."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'TensorFlow is great!'])", "performance": {"dataset": "Various", "accuracy": "State-of-the-art"}, "description": "The Universal Sentence Encoder (USE) encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of strings to be embedded"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding with universal-sentence-encoder'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load a pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\ninput_image = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(input_image) / 255.0\ninput_tensor = tf.expand_dims(input_array, 0)\npredictions = model(input_tensor)\nclass_index = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 accuracy: 75.6%, Top-5 accuracy: 92.8%"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset. The model is designed to be small and efficient while maintaining high accuracy. It can be used for various image classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nloaded_model = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "Load pre-trained models for image classification from TensorFlow Hub using the model_id"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet-mobilenet_v2_100_224-classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_classes": "1000"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4', input_shape=[224, 224, 3])\n])\n\npredictions = model.predict(image_batch)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture with 100% depth and 224x224 input size. The model is trained on ImageNet dataset and can classify images into 1000 different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "imagenet-mobilenet_v2_100_224-classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification model", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"input": "An image tensor of shape [batch_size, height, width, 3]", "output": "A tensor of shape [batch_size, 1001] representing class probabilities"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.9.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n\n# Preprocess your image to the required format\nimage = tf.keras.preprocessing.image.load_img('your_image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make predictions\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Top-1 Accuracy: 83.5%, Top-5 Accuracy: 96.5%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture, trained on ImageNet dataset. The model accepts an image tensor of shape [batch_size, height, width, 3] and outputs class probabilities for each of the 1001 classes."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\nimage = tf.random.normal([1, 224, 224, 3])\npredictions = model(image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Varies depending on the model"}, "description": "A collection of pre-trained image classification models available on TensorFlow Hub, which can be used to classify images into various categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "tf.keras.Sequential([hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')])", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path_to_your_image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading and using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "This API is used to load and use pre-trained image classification models from TensorFlow Hub for tasks like object recognition and scene understanding."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow-hub", "tensorflow"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load pre-trained models for image classification from TensorFlow Hub using a model_id. The models are trained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading and using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Loads a pre-trained image classification model from TensorFlow Hub and uses it for inference."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, axis=0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model from TensorFlow Hub that can classify images into 1000 different categories using the MobileNetV2 architecture."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load and run a pre-trained image classification model", "api_name": "imagenet_mobilenet_v2_100_224", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\n# Run the model on a sample image\nsample_image = tf.zeros([1, 224, 224, 3])\nlogits = model(sample_image)\npredicted_class = tf.argmax(logits, axis=-1)\nprint(predicted_class)", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API allows you to load and run a pre-trained MobileNetV2 image classification model from TensorFlow Hub. The model is trained on the ImageNet dataset and can classify images into 1000 different categories with an accuracy of 71.9%."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not provided"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the model's ID."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in an image", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\ndetections = detector(input_image)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained object detection model that can detect multiple objects in an image using TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for a wide range of tasks, such as semantic similarity, classification, clustering, and sentiment analysis."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "STSbenchmark", "accuracy": "85.1%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"url": "https://tfhub.dev/google/universal-sentence-encoder/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "SNLI", "accuracy": "86.9%"}, "description": "A pre-trained model that encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data for machine learning models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences or phrases"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world', 'Embedding sentences with TensorFlow Hub'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs. It is trained on a variety of data sources and a variety of tasks with the aim of dynamically accommodating a wide variety of natural language understanding tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text for machine learning models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello World'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text preprocessing", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input_text", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "pearson correlation coefficient of 0.803"}, "description": "A pre-trained text encoder that converts text into a 512-dimensional vector. Useful for a wide range of natural language processing tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in an image", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\ndetector = hub.load(model_id)\n\nimage = tf.image.decode_jpeg(tf.io.read_file('image.jpg'))\nresult = detector([image])", "performance": {"dataset": "OpenImages_v4", "accuracy": "N/A"}, "description": "This API allows you to detect objects in an image using TensorFlow Hub and a pre-trained model."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in an image", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\nimage = tf.image.decode_image(tf.io.read_file('path/to/image.jpg'))\nresult = detector(image[tf.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in an image using the Single Shot MultiBox Detector (SSD) with MobileNet V2."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input_text": "List of sentences or phrases"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": {"import tensorflow as tf": "", "import tensorflow_hub as hub": "", "embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')": "", "sentences = ['This is a test sentence.', 'Another example sentence.']": "", "embeddings = embed(sentences)": "", "print(embeddings)": ""}, "performance": {"dataset": "STSbenchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text for various natural language processing tasks", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding with Universal Sentence Encoder.'])", "performance": {"dataset": "STS-Benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "A text embedding model that converts text into high-dimensional vectors for use in natural language processing tasks. The Universal Sentence Encoder is trained on a variety of data sources and can be fine-tuned for specific tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False)\n])\n\nfeatures = model(images)", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting image features. It takes an input image of shape (batch_size, 224, 224, 3) and returns a feature vector of shape (batch_size, 1280). The model is trained on the ImageNet dataset and achieves 71.8% accuracy."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Generating image feature vectors", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": {"import": ["import tensorflow as tf", "import tensorflow_hub as hub"], "model": ["model = tf.keras.Sequential([", "  hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',", "                 input_shape=(224,224,3),", "                 trainable=False),", "  tf.keras.layers.Dense(100, activation='softmax')", "])"]}, "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained deep learning model for generating image feature vectors using MobileNetV2 architecture with 100% depth and 224x224 input size."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet-feature-vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/feature_vector/1')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/feature_vector/1", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\ninput = tf.keras.layers.Input(shape=(224, 224, 3))\nfeatures = hub.KerasLayer('https://tfhub.dev/google/imagenet/feature_vector/1', trainable=False)(input)\nmodel = tf.keras.Model(inputs=input, outputs=features)", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "This API provides a pre-trained image feature vector model for extracting features from images using TensorFlow Hub. The model is based on the ImageNet dataset and can be used for various image-related tasks such as classification, detection, and segmentation."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "text"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into a fixed-size embedding vector. It is trained on a variety of data sources and can be used for multiple NLP tasks such as text classification, semantic similarity, and clustering."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(299, 299))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\npredictions = model(input_image)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "TensorFlow Hub provides pre-trained models for image classification tasks. This example demonstrates how to load a pre-trained Inception V3 model from TensorFlow Hub and use it to classify an image."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": [224, 224, 3], "output_shape": [1280], "trainable": false}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer(\"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4\",\n                   input_shape=(224,224,3),\n                   output_shape=[1280],\n                   trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": 0.71}, "description": "This is a feature vector obtained from the MobileNetV2 model trained on the ImageNet dataset. It can be used for transfer learning and fine-tuning on new datasets."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Load pre-trained models for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\nimage = tf.keras.applications.mobilenet_v2.preprocess_input(image)\n\npredictions = model(image)\n\npredicted_class_index = tf.argmax(predictions, axis=-1).numpy()[0]", "performance": {"dataset": "ImageNet", "accuracy": "71.0"}, "description": "A pre-trained MobileNetV2 model for image classification on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Create image feature vector", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v1/feature_vector/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v1/feature_vector/4'\nmodel = hub.load(model_id)\nfeature_vector = model(image_tensor)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load an image feature vector model from TensorFlow Hub and use it to create feature vectors for images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input: A list of strings", "python_environment_requirements": "tensorflow, tensorflow_hub, numpy", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!']); print(embeddings)", "performance": {"dataset": "various", "accuracy": "not specified"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for various natural language processing tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extracting feature vector from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/5')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/5',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNetV2 architecture on ImageNet dataset. It can be used for various image classification tasks by adding a classification head on top of the feature vector."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4')", "api_arguments": ["model_id", "input_shape", "trainable"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4'\ninputs = tf.keras.Input(shape=(224, 224, 3))\nfeature_extractor = hub.KerasLayer(model_id, trainable=False)(inputs)\noutputs = tf.keras.layers.Dense(1000, activation='softmax')(feature_extractor)\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows users to extract feature vectors from images using a pre-trained model from TensorFlow Hub. The feature vectors can then be used for various image recognition and classification tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[224, 224, 3]", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=[224, 224, 3], trainable=False),\n    tf.keras.layers.Dense(num_classes, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture for extracting features from images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nloaded_model = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224,224,3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This module uses the MobileNet v2 architecture for extracting image features. It takes an image input of shape (224, 224, 3) and outputs a 1280-dimensional feature vector."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"model_url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">= 2.0.0", "tensorflow_hub": ">= 0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\nresults = model(image)\npredicted_class = tf.math.argmax(results[0], axis=-1).numpy()", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture, trained on ImageNet dataset, and available on TensorFlow Hub for easy integration."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)", "output_shape": "(1280,)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow-hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3))\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, which is optimized for performance on mobile devices and other resource-constrained environments. It can be used for various image classification tasks, transfer learning, or as a feature extractor for other models."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "image_tensor", "output": "feature_vector"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\n\n# Load and preprocess the image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.expand_dims(image, axis=0)\n\n# Get the feature vector\nfeature_vector = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained model that takes an input image tensor and outputs a 1280-dimensional feature vector representing the image."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained model", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "", "performance": {"dataset": "ImageNet", "accuracy": ""}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture with input size 224x224 and trained on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "A list of strings to be embedded"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "embeddings = embed(['hello world', 'my name is John'])", "performance": {"dataset": "SNLI", "accuracy": "86.9%"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\n# Predict the class of the image\npredictions = model.predict(input_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Converts text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello, world!', 'How are you?'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS Benchmark", "accuracy": "Pearson correlation coefficient of 0.77"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n\n# Load and preprocess an image\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\ninput_image = tf.keras.applications.mobilenet_v2.preprocess_input(input_image)\n\n# Predict the class of the image\npredictions = model(input_image)\npredicted_class = tf.argmax(predictions, axis=-1).numpy()[0]\n\nprint('Predicted class:', predicted_class)", "performance": {"dataset": "ImageNet", "accuracy": "85.4%"}, "description": "A pre-trained image classification model based on MobileNetV2 architecture with 130 depth multiplier and 224x224 input size, trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vector from images", "api_name": "image_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4', output_shape=[1280])", "api_arguments": {"handle": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4", "output_shape": "[1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4', output_shape=[1280]),\n    tf.keras.layers.Dense(1)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.mobilenet_v2.preprocess_input(image)\nimage = tf.expand_dims(image, 0)\n\nfeature_vector = model.predict(image)\nprint(feature_vector)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "This API allows you to extract a 1280-dimensional feature vector from an image using the MobileNetV2 architecture, which is pre-trained on the ImageNet dataset. The feature vector can be used for various tasks, such as image classification, object detection, and transfer learning."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4", "output_shape": "[1001]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\n\npredictions = model.predict(input_array)", "performance": {"dataset": "ImageNet", "accuracy": "0.856"}, "description": "This model is a pre-trained image classification model based on MobileNetV2 architecture. It can classify images into 1000 different categories."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/4'\nmodel = hub.load(model_id)\nimage = tf.random.normal([1, 299, 299, 3])\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "Load a pre-trained TensorFlow Hub model to extract image feature vectors."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input": "A batch of images with shape [batch_size, height, width, 3]", "output": "A batch of feature vectors with shape [batch_size, num_features]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')\nimage_batch = tf.zeros([batch_size, height, width, 3])\nfeature_vectors = model(image_batch)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model that extracts feature vectors from images."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "model = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting feature vectors from images. It is trained on the ImageNet dataset and has an accuracy of 71.9%."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Convert text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS", "accuracy": "Pearson correlation coefficient of 0.8"}, "description": "A text embedding model that converts input text into high-dimensional vectors for use in natural language processing tasks"}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input: List of text strings", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'I am learning about text embedding'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[None, 224, 224, 3]", "output_shape": "[None, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4', input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(10, activation='softmax')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image feature vector model based on MobileNetV2 architecture, designed for extracting features from images for various tasks such as image classification, object detection, and semantic segmentation."}
{"domain": "Audio embedding", "framework": "TensorFlow Hub", "functionality": "Converts audio into embeddings", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/yamnet/1')", "api_arguments": ["audio"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/yamnet/1'\nmodel = hub.load(model_id)\nembeddings = model(audio)", "performance": {"dataset": "AudioSet", "accuracy": "Not provided"}, "description": "YAMNet is a deep net that predicts 521 audio event classes based on the AudioSet dataset. It employs the Mobilenet_v1 depthwise-separable convolution architecture."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": [{"name": "model_id", "type": "string", "description": "The ID of the pre-trained model to be loaded"}], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model ID."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "[batch_size, 224, 224, 3]", "output_shape": "[batch_size, 1280]"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow-hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\nimage = tf.random.uniform((1, 224, 224, 3))\nfeatures = model(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0% (top-1)"}, "description": "A pre-trained image feature vector model that uses MobileNetV2 architecture to extract features from images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')\n])\n\ndecoded_image = tf.image.decode_jpeg(tf.io.read_file('image.jpg'))\nresized_image = tf.image.resize(decoded_image, (224, 224))\ninput_image = tf.expand_dims(resized_image, 0)\n\npredictions = model(input_image)", "performance": {"dataset": "ImageNet", "accuracy": "94.5%"}, "description": "A pre-trained model for image classification using MobileNetV2 architecture with 130 depth multiplier and 224x224 input size, trained on ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Feature extraction from images", "api_name": "imagenet-mobilenet_v2_100_224-feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                  input_shape=(224, 224, 3),\n                  trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained model that can be used to extract feature vectors from images using MobileNetV2 architecture with 224x224 input size."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "Text input"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow-hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": ["image_url"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(\n        'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n        input_shape=(224, 224, 3),\n        trainable=False\n    )\n])\n\nimage_url = 'https://example.com/path/to/image.jpg'\nimage = load_and_preprocess_image(image_url)\n\nfeature_vector = model.predict(image)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image feature vector model using MobileNet V2 architecture on ImageNet dataset. It can be used to extract features from images for various tasks like classification, object detection, and more."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract feature vector from images", "api_name": "module_name", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/feature_vector/1')", "api_arguments": ["module_name"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodule_name = 'https://tfhub.dev/google/imagenet/inception_v3/feature_vector/1'\nmodule = hub.load(module_name)\n\nimage = tf.random.uniform((1, 299, 299, 3))\nfeatures = module(image)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows you to extract feature vectors from images using a pre-trained model from TensorFlow Hub. The model is based on the Inception V3 architecture and has been trained on the ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained models for image classification", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": ["URL"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\n])\nresult = model.predict(image_batch)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained model for image classification using MobileNetV2 architecture on the ImageNet dataset."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Image feature extraction", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3),\n                   trainable=False)\n])\n\nx = tf.keras.layers.Input(shape=(224, 224, 3))\nfeatures = model(x)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "This module uses MobileNet V2 architecture for image feature vector extraction. It accepts a batch of images of shape (224, 224, 3) and returns a 1280-dimensional feature vector for each image."}
{"domain": "Image segmentation", "framework": "TensorFlow Hub", "functionality": "Image segmentation model", "api_name": "deeplabv3_257_mv_gpu", "api_call": "hub.load('https://tfhub.dev/tensorflow/deeplabv3_257_mv_gpu/1')", "api_arguments": {"url": "https://tfhub.dev/tensorflow/deeplabv3_257_mv_gpu/1"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow_hub as hub\nmodel = hub.load(\"https://tfhub.dev/tensorflow/deeplabv3_257_mv_gpu/1\")\nsegmentation = model(input_image)", "performance": {"dataset": "PASCAL VOC 2012", "accuracy": "0.897"}, "description": "DeepLabv3 is a state-of-the-art deep learning model for image segmentation. It assigns a semantic label to each pixel in the input image, allowing for a more detailed understanding of the image content. This model is trained on the PASCAL VOC 2012 dataset and achieves a mean intersection-over-union (mIoU) score of 0.897."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image Classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": "URL: https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'),\n])\n", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset with 100% depth and 224x224 input size."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['text to embed'])", "performance": {"dataset": "STS", "accuracy": "Pearson correlation coefficient of 0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text into a high-dimensional vector", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of text"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'My name is John'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.78"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "text_input", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "0.803"}, "description": "A text embedding model that maps text inputs to high-dimensional vectors for use in downstream tasks like text classification or clustering."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of strings"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world', 'Embedding sentences with TensorFlow Hub'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained image classification models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\n# Make predictions\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.8%"}, "description": "This API provides pre-trained image classification models from TensorFlow Hub. Users can load a model using its model_id and make predictions on images."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_140_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/feature_vector/4',\n                    input_shape=(224, 224, 3),\n                    trainable=False)\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_batch = tf.expand_dims(image_array, 0)\n\nfeatures = model.predict(image_batch)", "performance": {"dataset": "ImageNet", "accuracy": "80.3%"}, "description": "This API provides a pre-trained MobileNetV2 model for extracting feature vectors from images. The model is trained on the ImageNet dataset and achieves 80.3% accuracy on the validation set."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation coefficient of 0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is pretrained on a variety of data sources and is available on TensorFlow Hub."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models for image classification", "api_name": "mobilenet_v2", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained MobileNetV2 model for image classification using TensorFlow Hub"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": {"model_id": "URL of the TensorFlow Hub model"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Depends on the pre-trained model"}, "description": "Load pre-trained image classification models from TensorFlow Hub for transfer learning and fine-tuning"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image classification model using MobileNet V2 architecture with 224x224 input size, available on TensorFlow Hub"}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet_mobilenet_v2_130_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5"}, "python_environment_requirements": {"tensorflow": "2.x", "tensorflow_hub": "0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/5')\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Make predictions\npredictions = model.predict(input_image)\n\n# Decode the predictions\nclass_names = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=1)\nprint(class_names)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "A pre-trained image classification model using MobileNetV2 architecture from TensorFlow Hub. The model is trained on ImageNet dataset and can classify images into 1000 different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "model_id", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"model_id": "string"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = tf.keras.Sequential([\n    hub.KerasLayer(model_id, trainable=True)\n])", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "Load a pre-trained image classification model from TensorFlow Hub and use it for classifying images."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading", "api_name": "imagenet_mobilenet_v2_100_224_classification_4", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["URL"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 with a depth multiplier of 1.0 and input size of 224x224 pixels. It can classify images into 1000 classes."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification model", "api_name": "mobilenet_v2_100_224", "api_call": "hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4", "input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow": ">=2.0", "tensorflow_hub": ">=0.12"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4', input_shape=(224, 224, 3))\n])\n\n# Load an image and preprocess it\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\n# Predict the class of the image\npredictions = model.predict(input_image)\npredicted_class = tf.math.argmax(predictions, axis=-1)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet-mobilenet_v2_130_224-classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')", "api_arguments": {"url": "https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.6.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4')\ninput_image = tf.zeros([1, 224, 224, 3])\noutput = model(input_image)", "performance": {"dataset": "ImageNet", "accuracy": "0.856"}, "description": "A pre-trained image classification model using MobileNetV2 with 130 as width multiplier and 224 as input resolution. It is trained on ImageNet dataset and can be used for various image classification tasks."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "", "accuracy": ""}, "description": "Load a pre-trained image classification model from TensorFlow Hub using the specified model_id."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading a pre-trained image classification model", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/4'\nmodel = hub.load(model_id)", "performance": {"dataset": "ImageNet", "accuracy": "Not specified"}, "description": "This API allows you to load a pre-trained image classification model from TensorFlow Hub using a specific model_id. The model can then be used to classify images into different categories."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/imagenet/inception_v3/classification/5')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/imagenet/inception_v3/classification/5'\nmodel = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(299, 299))\nimage = tf.keras.preprocessing.image.img_to_array(image)\nimage = tf.keras.applications.inception_v3.preprocess_input(image)\n\npredictions = model(tf.expand_dims(image, 0))", "performance": {"dataset": "ImageNet", "accuracy": "N/A"}, "description": "Loads a pre-trained image classification model from TensorFlow Hub for Inception V3, and classifies an input image."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Pre-trained model for image classification", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"URL": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\npredictions = model.predict(image_array)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset with 100% depth and 224x224 input size."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Image classification using pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": {"handle": "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4", "trainable": "False"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\n])\n\nimage = tf.keras.preprocessing.image.load_img('path/to/your/image.jpg', target_size=(224, 224))\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\nimage_array = tf.expand_dims(image_array, 0)\n\npredictions = model.predict(image_array)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset. It can classify images into 1000 different categories with an accuracy of 71.0%."}
{"domain": "Image feature vector", "framework": "TensorFlow Hub", "functionality": "Extract image features", "api_name": "imagenet_mobilenet_v2_100_224_feature_vector", "api_call": "hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4')", "api_arguments": {"input_shape": "(224, 224, 3)"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel = tf.keras.Sequential([\n    hub.KerasLayer('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/4',\n                   input_shape=(224, 224, 3), trainable=False),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])", "performance": {"dataset": "ImageNet", "accuracy": "71.9%"}, "description": "A pre-trained image feature extraction model using MobileNetV2 architecture on ImageNet dataset to convert images into feature vectors."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "imagenet_mobilenet_v2_100_224_classification", "api_call": "hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')", "api_arguments": "URL of the pre-trained model", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel = hub.load('https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/4')\nimage = tf.keras.preprocessing.image.load_img('image.jpg', target_size=(224, 224))\ninput_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_array = tf.expand_dims(input_array, 0)\npredictions = model(input_array)\nprint(predictions)", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "A pre-trained image classification model using MobileNetV2 architecture on ImageNet dataset with 100% depth and 224x224 input size."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Text embedding model", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.8.0"}, "example_code": "import tensorflow_hub as hub; embed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4'); embeddings = embed(['Hello, world!'])", "performance": {"dataset": "STS benchmark", "accuracy": "Pearson correlation of 0.78"}, "description": "A text embedding model that encodes text into 512-dimensional vectors, trained on a variety of data sources and tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": "input: List of strings", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding is fun!'])", "performance": {"dataset": "STS Benchmark", "accuracy": "0.803"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Object detection in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": {"model_id": "URL or path to the TensorFlow Hub model"}, "python_environment_requirements": {"tensorflow": ">=2.0.0", "tensorflow_hub": ">=0.12.0"}, "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg')\nimage = tf.keras.preprocessing.image.img_to_array(image)\n\nresult = detector(image[np.newaxis, ...])", "performance": {"dataset": "COCO", "accuracy": "Unknown"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the Single Shot MultiBox Detector (SSD) with MobileNetV2 backbone."}
{"domain": "Image classification", "framework": "TensorFlow Hub", "functionality": "Loading pre-trained models", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'\nmodel = hub.load(model_id)\n", "performance": {"dataset": "ImageNet", "accuracy": "71.0%"}, "description": "Load a pre-trained image classification model from TensorFlow Hub to classify images using the MobileNet_v2 architecture."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text using pre-trained models", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": {"input": "List of sentences"}, "python_environment_requirements": ["pip install tensorflow", "pip install tensorflow-hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!', 'Embedding with TensorFlow Hub is easy!'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is pre-trained on a variety of data sources and can be used with TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embedding text into high-dimensional vectors", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])\nprint(embeddings)", "performance": {"dataset": "STS benchmark", "accuracy": "0.80"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks."}
{"domain": "Text preprocessing", "framework": "TensorFlow Hub", "functionality": "Text tokenization and vectorization", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\nembeddings = embed(['Hello world!'])", "performance": {"dataset": "Various", "accuracy": "N/A"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. It is a pre-trained model available on TensorFlow Hub."}
{"domain": "Text embedding", "framework": "TensorFlow Hub", "functionality": "Embed text data", "api_name": "universal-sentence-encoder", "api_call": "hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')", "api_arguments": ["input_text"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nembed = hub.load('https://tfhub.dev/google/universal-sentence-encoder/4')\ntext = ['This is a sample text', 'Another sample text']\nembeddings = embed(text)", "performance": {"dataset": "STS", "accuracy": "Pearson correlation coefficient of 0.8"}, "description": "The Universal Sentence Encoder encodes text into high-dimensional vectors that can be used for text classification, semantic similarity, clustering, and other natural language tasks. The model is trained and optimized for greater-than-word length text, such as sentences, phrases, or short paragraphs."}
{"domain": "Audio Speech-to-Text", "framework": "TensorFlow Hub", "functionality": "Speech Recognition", "api_name": "wav2vec2_large_960h", "api_call": "hub.KerasLayer('https://tfhub.dev/vasudevgupta7/wav2vec2/1')", "api_arguments": "", "python_environment_requirements": "tensorflow, tensorflow_hub", "example_code": "", "performance": {"dataset": "LibriSpeech", "accuracy": "0.960"}, "description": "A pre-trained model for converting spoken language in audio files into written text using TensorFlow Hub."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in an image", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(image_array, 0)\n\nresult = detector(input_image)", "performance": {"dataset": "COCO", "accuracy": "Not specified"}, "description": "Detect objects in an image using a pre-trained model from TensorFlow Hub"}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow-hub", "tensorflow"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\n\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('image.jpg')\ninput_image = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(input_image, 0)\n\nresult = detector(input_image)\n\nprint(result)", "performance": {"dataset": "COCO", "accuracy": "mAP"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the Single Shot MultiBox Detector (SSD) with MobileNet V2."}
{"domain": "Image object detection", "framework": "TensorFlow Hub", "functionality": "Detect objects in images", "api_name": "model_id", "api_call": "hub.load('https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2')", "api_arguments": ["model_id"], "python_environment_requirements": ["tensorflow", "tensorflow_hub"], "example_code": "import tensorflow as tf\nimport tensorflow_hub as hub\nmodel_id = 'https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2'\ndetector = hub.load(model_id)\n\nimage = tf.keras.preprocessing.image.load_img('path/to/image.jpg')\nimage_array = tf.keras.preprocessing.image.img_to_array(image)\ninput_image = tf.expand_dims(image_array, 0)\n\nresult = detector(input_image)\n", "performance": {"dataset": "COCO", "accuracy": "Unknown"}, "description": "A pre-trained TensorFlow Hub model for detecting objects in images using the SSD MobileNet V2 architecture."}
