TYPE_MAP = {
    "int": int,
    "float": float,
    "bool": bool,
    "str": str,
    "list": list,
    "dict": dict,
    "tuple": tuple,
    "boolean": bool,
    "Boolean": bool,
    "string": str,
    "integer": int,
    "number": float,
    "array": list,
    "object": dict,
    "String": str,
    "any": object,
}


AVAILABLE_TYPES = [
    "boolean",
    "array",
    "string",
    "integer",
    "float",
    "tuple",
    "any",
    "dict",
]  # python

ERROR_MESSAGES = {
    0: "Function description is correctly formatted.âœ…",
    1: "Function description must be a dictionary.",
    2: "Function description must contain a field 'name' with the function name.",
    3: "Function description must contain a field 'description' with the function description.",
    4: "Function description must contain a field 'parameters' with the function parameters information.",
    5: "Function description must only contain 'name', 'description', and 'parameters' fields. Any other fields should be removed.",
    6: "Function 'parameters' field must be a dictionary.",
    7: "Function 'parameters' field must contain a field 'type' with the value 'dict'.",
    8: "Function 'parameters' field must contain a field 'properties' with the function parameters.",
    9: "Function 'parameters' field must contain a field 'required' that is a list of required parameters.",
    10: "Function 'parameters' field must only contain 'type', 'properties', and 'required' fields. Any other fields should be removed.",
    11: "The 'properties' field must be a dictionary. Each key in the dictionary should be a parameter name, and the value should be a dictionary describing the parameter (with the 'type' and 'description' fields).",
    12: "The 'required' field must be a list of required parameters.",
    13: "The parameter '{param_name}' in the 'required' field is not present in the 'properties' field.",
    14: "The parameter '{param_name}' is a required parameter and should not have a 'default' field.",
    15: "The parameter '{param_name}' is an optional parameter and should have a 'default' field with the default value in the correct type.",
    16: "The 'properties' field must be a dictionary. Each key in the dictionary should be a parameter name, and the value should be a dictionary describing the parameter (with the 'type' and 'description' fields).",
    17: "The 'properties' field must be a dictionary. Each key in the dictionary should be a parameter name, and the value should be a dictionary describing the parameter (with the 'type' and 'description' fields).",
    18: "The parameter name '{param_name}' is a Python keyword and should not be used as a parameter name.",
    19: "In parameter 'properties', the value for each parameter must be a dictionary describing the parameter (with the 'type' and 'description' fields). The parameter '{param_name}' is not a dictionary.",
    20: "The parameter '{param_name}' should contain a field 'type' with the parameter type. Allowed types are: {AVAILABLE_TYPES}. No other types are allowed.",
    21: "The parameter '{param_name}' should contain a field 'description' with a description of the parameter.",
    22: "The parameter '{param_name}' is repeated. Each parameter should only appear once.",
    23: "The parameter '{param_name}' has an invalid type '{param_details['type']}'. Allowed types are: {AVAILABLE_TYPES}. No other types are allowed.",
    24: "Problem in the inner nested field for the parameter '{param_name}': {message} Note that the outer parameter is of type 'dict', and so the 'properties' field is a inner nested dictionary with the sub-parameters details. Be careful with the structure and where the issue is.",
    25: "The parameter '{param_name}' is of type 'dict' and should not contain a field 'items'.",
    26: "The 'additionalProperties' field for parameter '{param_name}' must be a dictionary with a 'type' field that describes the type of the key-value pairs in it.",
    27: "The parameter '{param_name}' is of type 'dict' and should contain either 'properties' or 'additionalProperties' field to specify the sub-parameters details.",
    28: "The parameter '{param_name}' is of type 'array' and should contain a field 'items' with the description of the items in the array.",
    29: "Since the parameter '{param_name}' is of type 'array', the 'items' field for the parameter '{param_name}' should be a dictionary with only one key 'type' that describes the type of the items in the {param_details['type']}.",
    30: "The 'items' field for the parameter '{param_name}' should be a dictionary that must contain a key 'type' that describes the type of the items in the array.",
    31: "The 'items' field for the parameter '{param_name}' has an invalid 'type' value '{list_properties['type']}'. Allowed types are: {AVAILABLE_TYPES}. No other types are allowed.",
    32: "The parameter '{param_name}' is of type 'array' and should not contain a field 'properties'.",
    33: "The parameter '{param_name}' is not of type 'array' and should not contain a field 'items'.",
    34: "The parameter '{param_name}' is not of type 'dict' and should not contain a field 'properties'.",
    35: "The 'enum' field for the parameter '{param_name}' must be a list of allowed values for the parameter.",
    36: "The enum value {repr(enum_value)} is not of type {param_details['type']}. Expected {TYPE_MAP[param_details['type']]}, got {type(enum_value)}.",
    37: "The default value {repr(param_details['default'])} for the parameter '{param_name}' is not of type {param_details['type']}. Expected {TYPE_MAP[param_details['type']]}, got {type(param_details['default'])}.",
}